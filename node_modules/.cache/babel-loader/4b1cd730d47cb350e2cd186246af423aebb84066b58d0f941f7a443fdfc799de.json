{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\nvar getPermissionsWithoutProvider = function () {\n  return Promise.resolve([]);\n};\n/**\n * Get a callback for calling the authProvider.getPermissions() method.\n *\n * @see useAuthProvider\n *\n * @returns {Function} getPermissions callback\n *\n * This is a low level hook. See those more specialized hooks\n * offering state handling.\n *\n * @see usePermissions\n *\n * @example\n *\n * import { useGetPermissions } from 'react-admin';\n *\n * const Roles = () => {\n *     const [permissions, setPermissions] = useState([]);\n *     const getPermissions = useGetPermissions();\n *     useEffect(() => {\n *         getPermissions().then(permissions => setPermissions(permissions))\n *     }, [])\n *     return (\n *         <ul>\n *             {permissions.map((permission, key) => (\n *                 <li key={key}>{permission}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n */\nvar useGetPermissions = function () {\n  var authProvider = useAuthProvider();\n  var getPermissions = useCallback(function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n    // react-query requires the query to return something\n    return authProvider ? authProvider.getPermissions(params).then(function (result) {\n      return result !== null && result !== void 0 ? result : null;\n    }) : getPermissionsWithoutProvider();\n  }, [authProvider]);\n  return getPermissions;\n};\nexport default useGetPermissions;","map":{"version":3,"names":["useCallback","useAuthProvider","getPermissionsWithoutProvider","Promise","resolve","useGetPermissions","authProvider","getPermissions","params","then","result"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/auth/useGetPermissions.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport useAuthProvider from './useAuthProvider';\n\nconst getPermissionsWithoutProvider = () => Promise.resolve([]);\n\n/**\n * Get a callback for calling the authProvider.getPermissions() method.\n *\n * @see useAuthProvider\n *\n * @returns {Function} getPermissions callback\n *\n * This is a low level hook. See those more specialized hooks\n * offering state handling.\n *\n * @see usePermissions\n *\n * @example\n *\n * import { useGetPermissions } from 'react-admin';\n *\n * const Roles = () => {\n *     const [permissions, setPermissions] = useState([]);\n *     const getPermissions = useGetPermissions();\n *     useEffect(() => {\n *         getPermissions().then(permissions => setPermissions(permissions))\n *     }, [])\n *     return (\n *         <ul>\n *             {permissions.map((permission, key) => (\n *                 <li key={key}>{permission}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n */\nconst useGetPermissions = (): GetPermissions => {\n    const authProvider = useAuthProvider();\n    const getPermissions = useCallback(\n        (params: any = {}) =>\n            // react-query requires the query to return something\n            authProvider\n                ? authProvider\n                      .getPermissions(params)\n                      .then(result => result ?? null)\n                : getPermissionsWithoutProvider(),\n        [authProvider]\n    );\n\n    return getPermissions;\n};\n\n/**\n * Proxy for calling authProvider.getPermissions()\n *\n * @param {Object} params The parameters to pass to the authProvider\n *\n * @return {Promise} The authProvider response\n */\ntype GetPermissions = (params?: any) => Promise<any>;\n\nexport default useGetPermissions;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,IAAMC,6BAA6B,GAAG,SAAAA,CAAA;EAAM,OAAAC,OAAO,CAACC,OAAO,CAAC,EAAE,CAAC;AAAnB,CAAmB;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAMC,iBAAiB,GAAG,SAAAA,CAAA;EACtB,IAAMC,YAAY,GAAGL,eAAe,EAAE;EACtC,IAAMM,cAAc,GAAGP,WAAW,CAC9B,UAACQ,MAAgB;IAAhB,IAAAA,MAAA;MAAAA,MAAA,KAAgB;IAAA;IACb;IACA,OAAAF,YAAY,GACNA,YAAY,CACPC,cAAc,CAACC,MAAM,CAAC,CACtBC,IAAI,CAAC,UAAAC,MAAM;MAAI,OAAAA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,IAAI;IAAd,CAAc,CAAC,GACnCR,6BAA6B,EAAE;EAJrC,CAIqC,EACzC,CAACI,YAAY,CAAC,CACjB;EAED,OAAOC,cAAc;AACzB,CAAC;AAWD,eAAeF,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}