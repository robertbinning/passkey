{"ast":null,"code":"// webauthn.js\nexport const createCredential = async email => {\n  const publicKeyCredentialCreationOptions = {\n    challenge: window.crypto.getRandomValues(new Uint8Array(32)),\n    rp: {\n      name: \"Kwaai\"\n    },\n    user: {\n      id: window.crypto.getRandomValues(new Uint8Array(32)),\n      name: email,\n      displayName: email\n    },\n    pubKeyCredParams: [{\n      type: \"public-key\",\n      alg: -7 // ES256 algorithm\n    }],\n    authenticatorSelection: {\n      authenticatorAttachment: \"hybrid\",\n      // Ensure cross-platform for QR code\n      userVerification: \"preferred\"\n    },\n    timeout: 60000,\n    attestation: \"direct\"\n  };\n  const credential = await navigator.credentials.create({\n    publicKey: publicKeyCredentialCreationOptions\n  });\n  return credential;\n};\nexport const getCredential = async () => {\n  const publicKeyCredentialRequestOptions = {\n    challenge: window.crypto.getRandomValues(new Uint8Array(32)),\n    allowCredentials: [{\n      type: \"public-key\",\n      id: Uint8Array.from('credentialIdFromServer', c => c.charCodeAt(0)),\n      transports: [\"internal\", \"cross-platform\", \"hybrid\"] // Ensure cross-platform and hybrid for QR code\n    }],\n    userVerification: \"preferred\",\n    timeout: 60000\n  };\n  const assertion = await navigator.credentials.get({\n    publicKey: publicKeyCredentialRequestOptions\n  });\n  return assertion;\n};","map":{"version":3,"names":["createCredential","email","publicKeyCredentialCreationOptions","challenge","window","crypto","getRandomValues","Uint8Array","rp","name","user","id","displayName","pubKeyCredParams","type","alg","authenticatorSelection","authenticatorAttachment","userVerification","timeout","attestation","credential","navigator","credentials","create","publicKey","getCredential","publicKeyCredentialRequestOptions","allowCredentials","from","c","charCodeAt","transports","assertion","get"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/webauthn.js"],"sourcesContent":["// webauthn.js\nexport const createCredential = async (email) => {\n    const publicKeyCredentialCreationOptions = {\n        challenge: window.crypto.getRandomValues(new Uint8Array(32)),\n        rp: {\n            name: \"Kwaai\"\n        },\n        user: {\n            id: window.crypto.getRandomValues(new Uint8Array(32)),\n            name: email,\n            displayName: email\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg: -7 // ES256 algorithm\n            }\n        ],\n        authenticatorSelection: {\n            authenticatorAttachment: \"hybrid\", // Ensure cross-platform for QR code\n            userVerification: \"preferred\"\n        },\n        timeout: 60000,\n        attestation: \"direct\"\n    };\n\n    const credential = await navigator.credentials.create({\n        publicKey: publicKeyCredentialCreationOptions\n    });\n\n    return credential;\n};\n\nexport const getCredential = async () => {\n    const publicKeyCredentialRequestOptions = {\n        challenge: window.crypto.getRandomValues(new Uint8Array(32)),\n        allowCredentials: [\n            {\n                type: \"public-key\",\n                id: Uint8Array.from('credentialIdFromServer', c => c.charCodeAt(0)),\n                transports: [\"internal\", \"cross-platform\", \"hybrid\"] // Ensure cross-platform and hybrid for QR code\n            }\n        ],\n        userVerification: \"preferred\",\n        timeout: 60000\n    };\n\n    const assertion = await navigator.credentials.get({\n        publicKey: publicKeyCredentialRequestOptions\n    });\n\n    return assertion;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC7C,MAAMC,kCAAkC,GAAG;IACvCC,SAAS,EAAEC,MAAM,CAACC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC;IAC5DC,EAAE,EAAE;MACAC,IAAI,EAAE;IACV,CAAC;IACDC,IAAI,EAAE;MACFC,EAAE,EAAEP,MAAM,CAACC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC;MACrDE,IAAI,EAAER,KAAK;MACXW,WAAW,EAAEX;IACjB,CAAC;IACDY,gBAAgB,EAAE,CACd;MACIC,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC,CAAC,CAAC;IACZ,CAAC,CACJ;IACDC,sBAAsB,EAAE;MACpBC,uBAAuB,EAAE,QAAQ;MAAE;MACnCC,gBAAgB,EAAE;IACtB,CAAC;IACDC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE;EACjB,CAAC;EAED,MAAMC,UAAU,GAAG,MAAMC,SAAS,CAACC,WAAW,CAACC,MAAM,CAAC;IAClDC,SAAS,EAAEvB;EACf,CAAC,CAAC;EAEF,OAAOmB,UAAU;AACrB,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMC,iCAAiC,GAAG;IACtCxB,SAAS,EAAEC,MAAM,CAACC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC;IAC5DqB,gBAAgB,EAAE,CACd;MACId,IAAI,EAAE,YAAY;MAClBH,EAAE,EAAEJ,UAAU,CAACsB,IAAI,CAAC,wBAAwB,EAAEC,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;MACnEC,UAAU,EAAE,CAAC,UAAU,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACzD,CAAC,CACJ;IACDd,gBAAgB,EAAE,WAAW;IAC7BC,OAAO,EAAE;EACb,CAAC;EAED,MAAMc,SAAS,GAAG,MAAMX,SAAS,CAACC,WAAW,CAACW,GAAG,CAAC;IAC9CT,SAAS,EAAEE;EACf,CAAC,CAAC;EAEF,OAAOM,SAAS;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}