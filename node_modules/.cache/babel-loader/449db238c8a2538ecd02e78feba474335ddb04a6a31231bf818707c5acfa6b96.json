{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useResourceContext } from '../core';\nimport { useDataProvider } from '../dataProvider';\nimport { useStore } from '../store';\nimport { SORT_ASC } from './list';\nimport { useRecordContext } from './record';\nimport { useCreatePath } from '../routing';\n/**\n * A hook used to fetch the previous and next record identifiers for a given record and resource.\n *\n * It fetches the list of records according to the filters\n * and the sort order configured in the list, and merges\n * the filters and the sorting order passed as props.\n *\n * usePrevNextController can be used anywhere a record context is provided\n * (often inside a `<Show>` or `<Edit>` component).\n *\n * @example <caption>Simple usage</caption>\n *\n * import { usePrevNextControllerProps } from 'ra-core';\n * const {\n *         hasPrev,\n *         hasNext,\n *         prevPath,\n *         nextPath,\n *         index,\n *         total,\n *         error,\n *         isPending,\n *     } = usePrevNextController(props);\n *\n * @example <caption>Custom PrevNextButton</caption>\n *\n * import { UsePrevNextControllerProps, useTranslate } from 'ra-core';\n * import NavigateBefore from '@mui/icons-material/NavigateBefore';\n * import NavigateNext from '@mui/icons-material/NavigateNext';\n * import ErrorIcon from '@mui/icons-material/Error';\n * import { Link } from 'react-router-dom';\n * import { CircularProgress, IconButton } from '@mui/material';\n *\n * const MyPrevNextButtons = props => {\n *     const {\n *         hasPrev,\n *         hasNext,\n *         nextPath,\n *         prevPath,\n *         index,\n *         total,\n *         error,\n *         isPending,\n *     } = usePrevNextController(props);\n *\n *     const translate = useTranslate();\n *\n *     if (isPending) {\n *         return <CircularProgress size={14} />;\n *     }\n *\n *     if (error) {\n *         return (\n *             <ErrorIcon\n *                 color=\"error\"\n *                 fontSize=\"small\"\n *                 titleAccess=\"error\"\n *                 aria-errormessage={error.message}\n *             />\n *         );\n *     }\n *\n *     return (\n *         <ul>\n *             <li>\n *                 <IconButton\n *                     component={hasPrev ? Link : undefined}\n *                     to={navigateToPrev}\n *                     aria-label={translate('ra.navigation.previous')}\n *                     disabled={!hasPrev}\n *                 >\n *                     <NavigateBefore />\n *                 </IconButton>\n *             </li>\n *             {typeof index === 'number' && (\n *                 <li>\n *                     {index + 1} / {total}\n *                 </li>\n *             )}\n *             <li>\n *                 <IconButton\n *                     component={hasNext ? Link : undefined}\n *                     to={navigateToNext}\n *                     aria-label={translate('ra.navigation.next')}\n *                     disabled={!hasNext}\n *                 >\n *                     <NavigateNext />\n *                 </IconButton>\n *             </li>\n *         </ul>\n *     );\n * };\n */\nexport var usePrevNextController = function (props) {\n  var _a, _b;\n  var _c = props.linkType,\n    linkType = _c === void 0 ? 'edit' : _c,\n    storeKey = props.storeKey,\n    _d = props.limit,\n    limit = _d === void 0 ? 1000 : _d,\n    _e = props.sort,\n    initialSort = _e === void 0 ? {\n      field: 'id',\n      order: SORT_ASC\n    } : _e,\n    _f = props.filter,\n    permanentFilter = _f === void 0 ? {} : _f,\n    _g = props.filterDefaultValues,\n    filterDefaultValues = _g === void 0 ? {} : _g,\n    _h = props.queryOptions,\n    queryOptions = _h === void 0 ? {\n      staleTime: 5 * 60 * 1000\n    } : _h;\n  var record = useRecordContext(props);\n  var resource = useResourceContext(props);\n  var createPath = useCreatePath();\n  if (!resource) {\n    throw new Error(\"useNextPrevController was called outside of a ResourceContext and without a resource prop. You must set the resource prop.\");\n  }\n  var storedParams = useStore(storeKey || \"\".concat(resource, \".listParams\"), {\n    filter: filterDefaultValues,\n    order: initialSort.order,\n    sort: initialSort.field,\n    page: 1,\n    perPage: 10,\n    displayedFilters: {}\n  })[0];\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var pagination = {\n    page: 1,\n    perPage: limit\n  };\n  var sort = {\n    field: storedParams.sort,\n    order: storedParams.order\n  };\n  var filter = __assign(__assign({}, storedParams.filter), permanentFilter);\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  var params = {\n    pagination: pagination,\n    sort: sort,\n    filter: filter,\n    meta: meta\n  };\n  // try to use data from the cache first\n  var queryData = queryClient.getQueryData([resource, 'getList', __assign(__assign({}, params), {\n    pagination: {\n      page: storedParams.page,\n      perPage: storedParams.perPage\n    }\n  })]);\n  var recordIndexInQueryData = (_a = queryData === null || queryData === void 0 ? void 0 : queryData.data) === null || _a === void 0 ? void 0 : _a.findIndex(function (r) {\n    return r.id === (record === null || record === void 0 ? void 0 : record.id);\n  });\n  var isRecordIndexFirstInNonFirstPage = recordIndexInQueryData === 0 && storedParams.page > 1;\n  var isRecordIndexLastInNonLastPage = (queryData === null || queryData === void 0 ? void 0 : queryData.data) && (queryData === null || queryData === void 0 ? void 0 : queryData.total) ? recordIndexInQueryData === ((_b = queryData === null || queryData === void 0 ? void 0 : queryData.data) === null || _b === void 0 ? void 0 : _b.length) - 1 && storedParams.page < (queryData === null || queryData === void 0 ? void 0 : queryData.total) / storedParams.perPage : undefined;\n  var canUseCacheData = record && (queryData === null || queryData === void 0 ? void 0 : queryData.data) && recordIndexInQueryData !== -1 && !isRecordIndexFirstInNonFirstPage && !isRecordIndexLastInNonLastPage;\n  // If the previous and next ids are not in the cache, fetch the entire list.\n  // This is necessary e.g. when coming directly to a detail page,\n  // without displaying the list first\n  var _j = useQuery(__assign({\n      queryKey: [resource, 'getList', params],\n      queryFn: function (queryParams) {\n        return dataProvider.getList(resource, __assign(__assign({}, params), {\n          signal: dataProvider.supportAbortSignal === true ? queryParams.signal : undefined\n        }));\n      },\n      enabled: !canUseCacheData\n    }, otherQueryOptions)),\n    data = _j.data,\n    error = _j.error,\n    isFetching = _j.isFetching,\n    isLoading = _j.isLoading,\n    isPending = _j.isPending;\n  var finalData = canUseCacheData ? queryData.data : (data === null || data === void 0 ? void 0 : data.data) || [];\n  if (!record || isPending && !canUseCacheData) return {\n    isFetching: true,\n    isLoading: true,\n    isPending: true,\n    prevPath: undefined,\n    nextPath: undefined,\n    index: undefined,\n    total: undefined,\n    hasPrev: false,\n    hasNext: false\n  };\n  var ids = finalData.map(function (record) {\n    return record.id;\n  });\n  var index = ids.indexOf(record.id);\n  var previousId = typeof ids[index - 1] !== 'undefined' ? ids[index - 1] : null; // could be 0\n  var nextId = index !== -1 && index < ids.length - 1 ? ids[index + 1] : null;\n  return {\n    hasPrev: previousId !== null,\n    hasNext: nextId !== null,\n    prevPath: previousId !== null ? createPath({\n      type: linkType,\n      resource: resource,\n      id: previousId\n    }) : undefined,\n    nextPath: nextId !== null ? createPath({\n      type: linkType,\n      resource: resource,\n      id: nextId\n    }) : undefined,\n    index: index === -1 ? undefined : index,\n    total: canUseCacheData ? queryData === null || queryData === void 0 ? void 0 : queryData.total : data === null || data === void 0 ? void 0 : data.total,\n    error: error,\n    isFetching: canUseCacheData ? false : isFetching,\n    isLoading: canUseCacheData ? false : isLoading,\n    isPending: canUseCacheData ? false : isPending\n  };\n};","map":{"version":3,"names":["useQuery","useQueryClient","useResourceContext","useDataProvider","useStore","SORT_ASC","useRecordContext","useCreatePath","usePrevNextController","props","_c","linkType","storeKey","_d","limit","_e","sort","initialSort","field","order","_f","filter","permanentFilter","_g","filterDefaultValues","_h","queryOptions","staleTime","record","resource","createPath","Error","storedParams","concat","page","perPage","displayedFilters","dataProvider","queryClient","pagination","__assign","meta","otherQueryOptions","__rest","params","queryData","getQueryData","recordIndexInQueryData","_a","data","findIndex","r","id","isRecordIndexFirstInNonFirstPage","isRecordIndexLastInNonLastPage","total","_b","length","undefined","canUseCacheData","_j","queryKey","queryFn","queryParams","getList","signal","supportAbortSignal","enabled","error","isFetching","isLoading","isPending","finalData","prevPath","nextPath","index","hasPrev","hasNext","ids","map","indexOf","previousId","nextId","type"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/usePrevNextController.ts"],"sourcesContent":["import {\n    UseQueryOptions,\n    useQuery,\n    useQueryClient,\n} from '@tanstack/react-query';\nimport { useResourceContext } from '../core';\nimport { useDataProvider } from '../dataProvider';\nimport { useStore } from '../store';\nimport { FilterPayload, RaRecord, SortPayload } from '../types';\nimport { ListParams, SORT_ASC } from './list';\nimport { useRecordContext } from './record';\nimport { useCreatePath } from '../routing';\n\n/**\n * A hook used to fetch the previous and next record identifiers for a given record and resource.\n *\n * It fetches the list of records according to the filters\n * and the sort order configured in the list, and merges\n * the filters and the sorting order passed as props.\n *\n * usePrevNextController can be used anywhere a record context is provided\n * (often inside a `<Show>` or `<Edit>` component).\n *\n * @example <caption>Simple usage</caption>\n *\n * import { usePrevNextControllerProps } from 'ra-core';\n * const {\n *         hasPrev,\n *         hasNext,\n *         prevPath,\n *         nextPath,\n *         index,\n *         total,\n *         error,\n *         isPending,\n *     } = usePrevNextController(props);\n *\n * @example <caption>Custom PrevNextButton</caption>\n *\n * import { UsePrevNextControllerProps, useTranslate } from 'ra-core';\n * import NavigateBefore from '@mui/icons-material/NavigateBefore';\n * import NavigateNext from '@mui/icons-material/NavigateNext';\n * import ErrorIcon from '@mui/icons-material/Error';\n * import { Link } from 'react-router-dom';\n * import { CircularProgress, IconButton } from '@mui/material';\n *\n * const MyPrevNextButtons = props => {\n *     const {\n *         hasPrev,\n *         hasNext,\n *         nextPath,\n *         prevPath,\n *         index,\n *         total,\n *         error,\n *         isPending,\n *     } = usePrevNextController(props);\n *\n *     const translate = useTranslate();\n *\n *     if (isPending) {\n *         return <CircularProgress size={14} />;\n *     }\n *\n *     if (error) {\n *         return (\n *             <ErrorIcon\n *                 color=\"error\"\n *                 fontSize=\"small\"\n *                 titleAccess=\"error\"\n *                 aria-errormessage={error.message}\n *             />\n *         );\n *     }\n *\n *     return (\n *         <ul>\n *             <li>\n *                 <IconButton\n *                     component={hasPrev ? Link : undefined}\n *                     to={navigateToPrev}\n *                     aria-label={translate('ra.navigation.previous')}\n *                     disabled={!hasPrev}\n *                 >\n *                     <NavigateBefore />\n *                 </IconButton>\n *             </li>\n *             {typeof index === 'number' && (\n *                 <li>\n *                     {index + 1} / {total}\n *                 </li>\n *             )}\n *             <li>\n *                 <IconButton\n *                     component={hasNext ? Link : undefined}\n *                     to={navigateToNext}\n *                     aria-label={translate('ra.navigation.next')}\n *                     disabled={!hasNext}\n *                 >\n *                     <NavigateNext />\n *                 </IconButton>\n *             </li>\n *         </ul>\n *     );\n * };\n */\n\nexport const usePrevNextController = <RecordType extends RaRecord = any>(\n    props: UsePrevNextControllerProps<RecordType>\n): UsePrevNextControllerResult => {\n    const {\n        linkType = 'edit',\n        storeKey,\n        limit = 1000,\n        sort: initialSort = { field: 'id', order: SORT_ASC },\n        filter: permanentFilter = {},\n        filterDefaultValues = {},\n        queryOptions = {\n            staleTime: 5 * 60 * 1000,\n        },\n    } = props;\n\n    const record = useRecordContext<RecordType>(props);\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n\n    if (!resource) {\n        throw new Error(\n            `useNextPrevController was called outside of a ResourceContext and without a resource prop. You must set the resource prop.`\n        );\n    }\n\n    const [storedParams] = useStore<ListParams>(\n        storeKey || `${resource}.listParams`,\n        {\n            filter: filterDefaultValues,\n            order: initialSort.order,\n            sort: initialSort.field,\n            page: 1,\n            perPage: 10,\n            displayedFilters: {},\n        }\n    );\n\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const pagination = { page: 1, perPage: limit };\n    const sort = {\n        field: storedParams.sort,\n        order: storedParams.order,\n    };\n    const filter = { ...storedParams.filter, ...permanentFilter };\n    const { meta, ...otherQueryOptions } = queryOptions;\n    const params = { pagination, sort, filter, meta };\n\n    // try to use data from the cache first\n    const queryData = queryClient.getQueryData<{\n        data: RaRecord[];\n        total: number;\n    }>([\n        resource,\n        'getList',\n        {\n            ...params,\n            pagination: {\n                page: storedParams.page,\n                perPage: storedParams.perPage,\n            },\n        },\n    ]);\n    const recordIndexInQueryData = queryData?.data?.findIndex(\n        r => r.id === record?.id\n    );\n    const isRecordIndexFirstInNonFirstPage =\n        recordIndexInQueryData === 0 && storedParams.page > 1;\n    const isRecordIndexLastInNonLastPage =\n        queryData?.data && queryData?.total\n            ? recordIndexInQueryData === queryData?.data?.length - 1 &&\n              storedParams.page < queryData?.total / storedParams.perPage\n            : undefined;\n    const canUseCacheData =\n        record &&\n        queryData?.data &&\n        recordIndexInQueryData !== -1 &&\n        !isRecordIndexFirstInNonFirstPage &&\n        !isRecordIndexLastInNonLastPage;\n\n    // If the previous and next ids are not in the cache, fetch the entire list.\n    // This is necessary e.g. when coming directly to a detail page,\n    // without displaying the list first\n    const { data, error, isFetching, isLoading, isPending } = useQuery({\n        queryKey: [resource, 'getList', params],\n        queryFn: queryParams => {\n            return dataProvider.getList(resource, {\n                ...params,\n                signal:\n                    dataProvider.supportAbortSignal === true\n                        ? queryParams.signal\n                        : undefined,\n            });\n        },\n        enabled: !canUseCacheData,\n        ...otherQueryOptions,\n    });\n\n    const finalData = canUseCacheData ? queryData.data : data?.data || [];\n\n    if (!record || (isPending && !canUseCacheData))\n        return {\n            isFetching: true,\n            isLoading: true,\n            isPending: true,\n            prevPath: undefined,\n            nextPath: undefined,\n            index: undefined,\n            total: undefined,\n            hasPrev: false,\n            hasNext: false,\n        };\n\n    const ids = finalData.map(record => record.id);\n    const index = ids.indexOf(record.id);\n    const previousId =\n        typeof ids[index - 1] !== 'undefined' ? ids[index - 1] : null; // could be 0\n    const nextId =\n        index !== -1 && index < ids.length - 1 ? ids[index + 1] : null;\n\n    return {\n        hasPrev: previousId !== null,\n        hasNext: nextId !== null,\n        prevPath:\n            previousId !== null\n                ? createPath({\n                      type: linkType,\n                      resource,\n                      id: previousId,\n                  })\n                : undefined,\n        nextPath:\n            nextId !== null\n                ? createPath({\n                      type: linkType,\n                      resource,\n                      id: nextId,\n                  })\n                : undefined,\n        index: index === -1 ? undefined : index,\n        total: canUseCacheData ? queryData?.total : data?.total,\n        error,\n        isFetching: canUseCacheData ? false : isFetching,\n        isLoading: canUseCacheData ? false : isLoading,\n        isPending: canUseCacheData ? false : isPending,\n    };\n};\n\nexport interface UsePrevNextControllerProps<RecordType extends RaRecord = any> {\n    linkType?: 'edit' | 'show';\n    storeKey?: string | false;\n    limit?: number;\n    filter?: FilterPayload;\n    filterDefaultValues?: FilterPayload;\n    sort?: SortPayload;\n    resource?: string;\n    queryOptions?: Omit<\n        UseQueryOptions<{\n            data: RecordType[];\n            total?: number;\n            pageInfo?: {\n                hasNextPage?: boolean;\n                hasPreviousPage?: boolean;\n            };\n        }>,\n        'queryFn' | 'queryKey'\n    > & { meta?: any };\n}\n\nexport type UsePrevNextControllerResult = {\n    isFetching: boolean;\n    isLoading: boolean;\n    isPending: boolean;\n    hasPrev: boolean;\n    hasNext: boolean;\n    prevPath: string | undefined;\n    nextPath: string | undefined;\n    index: number | undefined;\n    total: number | undefined;\n    error?: any;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAEIA,QAAQ,EACRC,cAAc,QACX,uBAAuB;AAC9B,SAASC,kBAAkB,QAAQ,SAAS;AAC5C,SAASC,eAAe,QAAQ,iBAAiB;AACjD,SAASC,QAAQ,QAAQ,UAAU;AAEnC,SAAqBC,QAAQ,QAAQ,QAAQ;AAC7C,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,SAASC,aAAa,QAAQ,YAAY;AAE1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA,OAAO,IAAMC,qBAAqB,GAAG,SAAAA,CACjCC,KAA6C;;EAGzC,IAAAC,EAAA,GASAD,KAAK,CAAAE,QATY;IAAjBA,QAAQ,GAAAD,EAAA,cAAG,MAAM,GAAAA,EAAA;IACjBE,QAAQ,GAQRH,KAAK,CAAAG,QARG;IACRC,EAAA,GAOAJ,KAAK,CAAAK,KAPO;IAAZA,KAAK,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACZE,EAAA,GAMAN,KAAK,CAAAO,IAN+C;IAA9CC,WAAW,GAAAF,EAAA,cAAG;MAAEG,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAEd;IAAQ,CAAE,GAAAU,EAAA;IACpDK,EAAA,GAKAX,KAAK,CAAAY,MALuB;IAApBC,eAAe,GAAAF,EAAA,cAAG,EAAE,GAAAA,EAAA;IAC5BG,EAAA,GAIAd,KAAK,CAAAe,mBAJmB;IAAxBA,mBAAmB,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACxBE,EAAA,GAGAhB,KAAK,CAAAiB,YADJ;IAFDA,YAAY,GAAAD,EAAA,cAAG;MACXE,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG;KACvB,GAAAF,EAAA;EAGL,IAAMG,MAAM,GAAGtB,gBAAgB,CAAaG,KAAK,CAAC;EAClD,IAAMoB,QAAQ,GAAG3B,kBAAkB,CAACO,KAAK,CAAC;EAC1C,IAAMqB,UAAU,GAAGvB,aAAa,EAAE;EAElC,IAAI,CAACsB,QAAQ,EAAE;IACX,MAAM,IAAIE,KAAK,CACX,4HAA4H,CAC/H;;EAGE,IAAAC,YAAY,GAAI5B,QAAQ,CAC3BQ,QAAQ,IAAI,GAAAqB,MAAA,CAAGJ,QAAQ,gBAAa,EACpC;IACIR,MAAM,EAAEG,mBAAmB;IAC3BL,KAAK,EAAEF,WAAW,CAACE,KAAK;IACxBH,IAAI,EAAEC,WAAW,CAACC,KAAK;IACvBgB,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,EAAE;IACXC,gBAAgB,EAAE;GACrB,CACJ,GAVkB;EAYnB,IAAMC,YAAY,GAAGlC,eAAe,EAAE;EACtC,IAAMmC,WAAW,GAAGrC,cAAc,EAAE;EACpC,IAAMsC,UAAU,GAAG;IAAEL,IAAI,EAAE,CAAC;IAAEC,OAAO,EAAErB;EAAK,CAAE;EAC9C,IAAME,IAAI,GAAG;IACTE,KAAK,EAAEc,YAAY,CAAChB,IAAI;IACxBG,KAAK,EAAEa,YAAY,CAACb;GACvB;EACD,IAAME,MAAM,GAAAmB,QAAA,CAAAA,QAAA,KAAQR,YAAY,CAACX,MAAM,GAAKC,eAAe,CAAE;EACrD,IAAAmB,IAAI,GAA2Bf,YAAY,CAAAe,IAAvC;IAAKC,iBAAiB,GAAAC,MAAA,CAAKjB,YAAY,EAA7C,QAA8B,CAAF;EAClC,IAAMkB,MAAM,GAAG;IAAEL,UAAU,EAAAA,UAAA;IAAEvB,IAAI,EAAAA,IAAA;IAAEK,MAAM,EAAAA,MAAA;IAAEoB,IAAI,EAAAA;EAAA,CAAE;EAEjD;EACA,IAAMI,SAAS,GAAGP,WAAW,CAACQ,YAAY,CAGvC,CACCjB,QAAQ,EACR,SAAS,E,sBAEFe,MAAM;IACTL,UAAU,EAAE;MACRL,IAAI,EAAEF,YAAY,CAACE,IAAI;MACvBC,OAAO,EAAEH,YAAY,CAACG;;EACzB,GAER,CAAC;EACF,IAAMY,sBAAsB,GAAG,CAAAC,EAAA,GAAAH,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEI,IAAI,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,SAAS,CACrD,UAAAC,CAAC;IAAI,OAAAA,CAAC,CAACC,EAAE,MAAKxB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEwB,EAAE;EAAnB,CAAmB,CAC3B;EACD,IAAMC,gCAAgC,GAClCN,sBAAsB,KAAK,CAAC,IAAIf,YAAY,CAACE,IAAI,GAAG,CAAC;EACzD,IAAMoB,8BAA8B,GAChC,CAAAT,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEI,IAAI,MAAIJ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEU,KAAK,IAC7BR,sBAAsB,KAAK,EAAAS,EAAA,GAAAX,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEI,IAAI,cAAAO,EAAA,uBAAAA,EAAA,CAAEC,MAAM,IAAG,CAAC,IACtDzB,YAAY,CAACE,IAAI,GAAG,CAAAW,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEU,KAAK,IAAGvB,YAAY,CAACG,OAAO,GAC3DuB,SAAS;EACnB,IAAMC,eAAe,GACjB/B,MAAM,KACNiB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEI,IAAI,KACfF,sBAAsB,KAAK,CAAC,CAAC,IAC7B,CAACM,gCAAgC,IACjC,CAACC,8BAA8B;EAEnC;EACA;EACA;EACM,IAAAM,EAAA,GAAoD5D,QAAQ,CAAAwC,QAAA;MAC9DqB,QAAQ,EAAE,CAAChC,QAAQ,EAAE,SAAS,EAAEe,MAAM,CAAC;MACvCkB,OAAO,EAAE,SAAAA,CAAAC,WAAW;QAChB,OAAO1B,YAAY,CAAC2B,OAAO,CAACnC,QAAQ,EAAAW,QAAA,CAAAA,QAAA,KAC7BI,MAAM;UACTqB,MAAM,EACF5B,YAAY,CAAC6B,kBAAkB,KAAK,IAAI,GAClCH,WAAW,CAACE,MAAM,GAClBP;QAAS,GACrB;MACN,CAAC;MACDS,OAAO,EAAE,CAACR;IAAe,GACtBjB,iBAAiB,EACtB;IAbMO,IAAI,GAAAW,EAAA,CAAAX,IAAA;IAAEmB,KAAK,GAAAR,EAAA,CAAAQ,KAAA;IAAEC,UAAU,GAAAT,EAAA,CAAAS,UAAA;IAAEC,SAAS,GAAAV,EAAA,CAAAU,SAAA;IAAEC,SAAS,GAAAX,EAAA,CAAAW,SAanD;EAEF,IAAMC,SAAS,GAAGb,eAAe,GAAGd,SAAS,CAACI,IAAI,GAAG,CAAAA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,KAAI,EAAE;EAErE,IAAI,CAACrB,MAAM,IAAK2C,SAAS,IAAI,CAACZ,eAAgB,EAC1C,OAAO;IACHU,UAAU,EAAE,IAAI;IAChBC,SAAS,EAAE,IAAI;IACfC,SAAS,EAAE,IAAI;IACfE,QAAQ,EAAEf,SAAS;IACnBgB,QAAQ,EAAEhB,SAAS;IACnBiB,KAAK,EAAEjB,SAAS;IAChBH,KAAK,EAAEG,SAAS;IAChBkB,OAAO,EAAE,KAAK;IACdC,OAAO,EAAE;GACZ;EAEL,IAAMC,GAAG,GAAGN,SAAS,CAACO,GAAG,CAAC,UAAAnD,MAAM;IAAI,OAAAA,MAAM,CAACwB,EAAE;EAAT,CAAS,CAAC;EAC9C,IAAMuB,KAAK,GAAGG,GAAG,CAACE,OAAO,CAACpD,MAAM,CAACwB,EAAE,CAAC;EACpC,IAAM6B,UAAU,GACZ,OAAOH,GAAG,CAACH,KAAK,GAAG,CAAC,CAAC,KAAK,WAAW,GAAGG,GAAG,CAACH,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;EACnE,IAAMO,MAAM,GACRP,KAAK,KAAK,CAAC,CAAC,IAAIA,KAAK,GAAGG,GAAG,CAACrB,MAAM,GAAG,CAAC,GAAGqB,GAAG,CAACH,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI;EAElE,OAAO;IACHC,OAAO,EAAEK,UAAU,KAAK,IAAI;IAC5BJ,OAAO,EAAEK,MAAM,KAAK,IAAI;IACxBT,QAAQ,EACJQ,UAAU,KAAK,IAAI,GACbnD,UAAU,CAAC;MACPqD,IAAI,EAAExE,QAAQ;MACdkB,QAAQ,EAAAA,QAAA;MACRuB,EAAE,EAAE6B;KACP,CAAC,GACFvB,SAAS;IACnBgB,QAAQ,EACJQ,MAAM,KAAK,IAAI,GACTpD,UAAU,CAAC;MACPqD,IAAI,EAAExE,QAAQ;MACdkB,QAAQ,EAAAA,QAAA;MACRuB,EAAE,EAAE8B;KACP,CAAC,GACFxB,SAAS;IACnBiB,KAAK,EAAEA,KAAK,KAAK,CAAC,CAAC,GAAGjB,SAAS,GAAGiB,KAAK;IACvCpB,KAAK,EAAEI,eAAe,GAAGd,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEU,KAAK,GAAGN,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,KAAK;IACvDa,KAAK,EAAAA,KAAA;IACLC,UAAU,EAAEV,eAAe,GAAG,KAAK,GAAGU,UAAU;IAChDC,SAAS,EAAEX,eAAe,GAAG,KAAK,GAAGW,SAAS;IAC9CC,SAAS,EAAEZ,eAAe,GAAG,KAAK,GAAGY;GACxC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}