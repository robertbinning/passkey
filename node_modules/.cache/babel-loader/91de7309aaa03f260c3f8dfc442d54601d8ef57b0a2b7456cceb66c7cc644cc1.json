{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { isValidElement, useEffect, useMemo } from 'react';\nimport { useAuthenticated } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useGetList } from '../../dataProvider';\nimport { SORT_ASC } from './queryReducer';\nimport { defaultExporter } from '../../export';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\n/**\n * Prepare data for the List view\n *\n * @param {Object} props The props passed to the List component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport var useListController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _a = props.debounce,\n    debounce = _a === void 0 ? 500 : _a,\n    disableAuthentication = props.disableAuthentication,\n    disableSyncWithLocation = props.disableSyncWithLocation,\n    _b = props.exporter,\n    exporter = _b === void 0 ? defaultExporter : _b,\n    filter = props.filter,\n    filterDefaultValues = props.filterDefaultValues,\n    _c = props.perPage,\n    perPage = _c === void 0 ? 10 : _c,\n    _d = props.queryOptions,\n    queryOptions = _d === void 0 ? {} : _d,\n    _e = props.sort,\n    sort = _e === void 0 ? defaultSort : _e,\n    storeKey = props.storeKey;\n  useAuthenticated({\n    enabled: !disableAuthentication\n  });\n  var resource = useResourceContext(props);\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  if (!resource) {\n    throw new Error(\"useListController requires a non-empty resource prop or context\");\n  }\n  if (filter && isValidElement(filter)) {\n    throw new Error('useListController received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.');\n  }\n  var translate = useTranslate();\n  var notify = useNotify();\n  var _f = useListParams({\n      debounce: debounce,\n      disableSyncWithLocation: disableSyncWithLocation,\n      filterDefaultValues: filterDefaultValues,\n      perPage: perPage,\n      resource: resource,\n      sort: sort,\n      storeKey: storeKey\n    }),\n    query = _f[0],\n    queryModifiers = _f[1];\n  var _g = useRecordSelection({\n      resource: resource,\n      disableSyncWithStore: storeKey === false\n    }),\n    selectedIds = _g[0],\n    selectionModifiers = _g[1];\n  var _h = useGetList(resource, {\n      pagination: {\n        page: query.page,\n        perPage: query.perPage\n      },\n      sort: {\n        field: query.sort,\n        order: query.order\n      },\n      filter: __assign(__assign({}, query.filter), filter),\n      meta: meta\n    }, __assign({\n      placeholderData: function (previousData) {\n        return previousData;\n      },\n      retry: false,\n      onError: function (error) {\n        return notify((error === null || error === void 0 ? void 0 : error.message) || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: error === null || error === void 0 ? void 0 : error.message\n          }\n        });\n      }\n    }, otherQueryOptions)),\n    data = _h.data,\n    pageInfo = _h.pageInfo,\n    total = _h.total,\n    error = _h.error,\n    isLoading = _h.isLoading,\n    isFetching = _h.isFetching,\n    isPending = _h.isPending,\n    refetch = _h.refetch;\n  // change page if there is no data\n  useEffect(function () {\n    if (query.page <= 0 || !isFetching && query.page > 1 && (data == null || (data === null || data === void 0 ? void 0 : data.length) === 0)) {\n      // Query for a page that doesn't exist, set page to 1\n      queryModifiers.setPage(1);\n      return;\n    }\n    if (total == null) {\n      return;\n    }\n    var totalPages = Math.ceil(total / query.perPage) || 1;\n    if (!isFetching && query.page > totalPages) {\n      // Query for a page out of bounds, set page to the last existing page\n      // It occurs when deleting the last element of the last page\n      queryModifiers.setPage(totalPages);\n    }\n  }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n  var currentSort = useMemo(function () {\n    return {\n      field: query.sort,\n      order: query.order\n    };\n  }, [query.sort, query.order]);\n  var getResourceLabel = useGetResourceLabel();\n  var defaultTitle = translate('ra.page.list', {\n    name: getResourceLabel(resource, 2)\n  });\n  return {\n    sort: currentSort,\n    data: data,\n    defaultTitle: defaultTitle,\n    displayedFilters: query.displayedFilters,\n    error: error,\n    exporter: exporter,\n    filter: filter,\n    filterValues: query.filterValues,\n    hideFilter: queryModifiers.hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    isPending: isPending,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: query.page,\n    perPage: query.perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: queryModifiers.setFilters,\n    setPage: queryModifiers.setPage,\n    setPerPage: queryModifiers.setPerPage,\n    setSort: queryModifiers.setSort,\n    showFilter: queryModifiers.showFilter,\n    total: total,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? query.page * query.perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : query.page > 1\n  };\n};\nvar defaultSort = {\n  field: 'id',\n  order: SORT_ASC\n};\nexport var injectedProps = ['sort', 'data', 'defaultTitle', 'displayedFilters', 'error', 'exporter', 'filterValues', 'hasNextPage', 'hasPreviousPage', 'hideFilter', 'isFetching', 'isLoading', 'isPending', 'onSelect', 'onToggleItem', 'onUnselectItems', 'page', 'perPage', 'refetch', 'refresh', 'resource', 'selectedIds', 'setFilters', 'setPage', 'setPerPage', 'setSort', 'showFilter', 'total', 'totalPages'];\n/**\n * Select the props injected by the useListController hook\n * to be passed to the List children need\n * This is an implementation of pick()\n */\nexport var getListControllerProps = function (props) {\n  return injectedProps.reduce(function (acc, key) {\n    var _a;\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\n/**\n * Select the props not injected by the useListController hook\n * to be used inside the List children to sanitize props injected by List\n * This is an implementation of omit()\n */\nexport var sanitizeListRestProps = function (props) {\n  return Object.keys(props).filter(function (propName) {\n    return !injectedProps.includes(propName);\n  }).reduce(function (acc, key) {\n    var _a;\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};","map":{"version":3,"names":["isValidElement","useEffect","useMemo","useAuthenticated","useTranslate","useNotify","useGetList","SORT_ASC","defaultExporter","useResourceContext","useGetResourceLabel","useRecordSelection","useListParams","useListController","props","_a","debounce","disableAuthentication","disableSyncWithLocation","_b","exporter","filter","filterDefaultValues","_c","perPage","_d","queryOptions","_e","sort","defaultSort","storeKey","enabled","resource","meta","otherQueryOptions","__rest","Error","translate","notify","_f","query","queryModifiers","_g","disableSyncWithStore","selectedIds","selectionModifiers","_h","pagination","page","field","order","__assign","placeholderData","previousData","retry","onError","error","message","type","messageArgs","_","data","pageInfo","total","isLoading","isFetching","isPending","refetch","length","setPage","totalPages","Math","ceil","currentSort","getResourceLabel","defaultTitle","name","displayedFilters","filterValues","hideFilter","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","setFilters","setPerPage","setSort","showFilter","hasNextPage","undefined","hasPreviousPage","injectedProps","getListControllerProps","reduce","acc","key","sanitizeListRestProps","Object","keys","propName","includes"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/list/useListController.ts"],"sourcesContent":["import { isValidElement, useEffect, useMemo } from 'react';\n\nimport { useAuthenticated } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport {\n    useGetList,\n    UseGetListHookValue,\n    UseGetListOptions,\n} from '../../dataProvider';\nimport { SORT_ASC } from './queryReducer';\nimport { defaultExporter } from '../../export';\nimport { FilterPayload, SortPayload, RaRecord, Exporter } from '../../types';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\n\n/**\n * Prepare data for the List view\n *\n * @param {Object} props The props passed to the List component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport const useListController = <RecordType extends RaRecord = any>(\n    props: ListControllerProps<RecordType> = {}\n): ListControllerResult<RecordType> => {\n    const {\n        debounce = 500,\n        disableAuthentication,\n        disableSyncWithLocation,\n        exporter = defaultExporter,\n        filter,\n        filterDefaultValues,\n        perPage = 10,\n        queryOptions = {},\n        sort = defaultSort,\n        storeKey,\n    } = props;\n    useAuthenticated({ enabled: !disableAuthentication });\n    const resource = useResourceContext(props);\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    if (!resource) {\n        throw new Error(\n            `useListController requires a non-empty resource prop or context`\n        );\n    }\n    if (filter && isValidElement(filter)) {\n        throw new Error(\n            'useListController received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.'\n        );\n    }\n\n    const translate = useTranslate();\n    const notify = useNotify();\n\n    const [query, queryModifiers] = useListParams({\n        debounce,\n        disableSyncWithLocation,\n        filterDefaultValues,\n        perPage,\n        resource,\n        sort,\n        storeKey,\n    });\n\n    const [selectedIds, selectionModifiers] = useRecordSelection({\n        resource,\n        disableSyncWithStore: storeKey === false,\n    });\n\n    const {\n        data,\n        pageInfo,\n        total,\n        error,\n        isLoading,\n        isFetching,\n        isPending,\n        refetch,\n    } = useGetList<RecordType>(\n        resource,\n        {\n            pagination: {\n                page: query.page,\n                perPage: query.perPage,\n            },\n            sort: { field: query.sort, order: query.order },\n            filter: { ...query.filter, ...filter },\n            meta,\n        },\n        {\n            placeholderData: previousData => previousData,\n            retry: false,\n            onError: error =>\n                notify(error?.message || 'ra.notification.http_error', {\n                    type: 'error',\n                    messageArgs: {\n                        _: error?.message,\n                    },\n                }),\n            ...otherQueryOptions,\n        }\n    );\n\n    // change page if there is no data\n    useEffect(() => {\n        if (\n            query.page <= 0 ||\n            (!isFetching &&\n                query.page > 1 &&\n                (data == null || data?.length === 0))\n        ) {\n            // Query for a page that doesn't exist, set page to 1\n            queryModifiers.setPage(1);\n            return;\n        }\n        if (total == null) {\n            return;\n        }\n        const totalPages = Math.ceil(total / query.perPage) || 1;\n        if (!isFetching && query.page > totalPages) {\n            // Query for a page out of bounds, set page to the last existing page\n            // It occurs when deleting the last element of the last page\n            queryModifiers.setPage(totalPages);\n        }\n    }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n\n    const currentSort = useMemo(\n        () => ({\n            field: query.sort,\n            order: query.order,\n        }),\n        [query.sort, query.order]\n    );\n\n    const getResourceLabel = useGetResourceLabel();\n    const defaultTitle = translate('ra.page.list', {\n        name: getResourceLabel(resource, 2),\n    });\n\n    return {\n        sort: currentSort,\n        data,\n        defaultTitle,\n        displayedFilters: query.displayedFilters,\n        error,\n        exporter,\n        filter,\n        filterValues: query.filterValues,\n        hideFilter: queryModifiers.hideFilter,\n        isFetching,\n        isLoading,\n        isPending,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page: query.page,\n        perPage: query.perPage,\n        refetch,\n        resource,\n        selectedIds,\n        setFilters: queryModifiers.setFilters,\n        setPage: queryModifiers.setPage,\n        setPerPage: queryModifiers.setPerPage,\n        setSort: queryModifiers.setSort,\n        showFilter: queryModifiers.showFilter,\n        total: total,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n              ? query.page * query.perPage < total\n              : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : query.page > 1,\n    } as ListControllerResult<RecordType>;\n};\n\nexport interface ListControllerProps<RecordType extends RaRecord = any> {\n    /**\n     * The debounce delay for filter queries in milliseconds. Defaults to 500ms.\n     *\n     * @see https://marmelab.com/react-admin/List.html#debounce\n     * @example\n     * // wait 1 seconds instead of 500 milliseconds befoce calling the dataProvider\n     * const PostList = () => (\n     *     <List debounce={1000}>\n     *         ...\n     *     </List>\n     * );\n     */\n    debounce?: number;\n\n    /**\n     * Allow anonymous access to the list view. Defaults to false.\n     *\n     * @see https://marmelab.com/react-admin/List.html#disableauthentication\n     * @example\n     * import { List } from 'react-admin';\n     *\n     * const BoolkList = () => (\n     *     <List disableAuthentication>\n     *         ...\n     *     </List>\n     * );\n     */\n    disableAuthentication?: boolean;\n\n    /**\n     * Whether to disable the synchronization of the list parameters with the current location (URL search parameters)\n     *\n     * @see https://marmelab.com/react-admin/List.html#disablesyncwithlocation\n     * @example\n     * const Dashboard = () => (\n     *     <div>\n     *         // ...\n     *         <ResourceContextProvider value=\"posts\">\n     *             <List disableSyncWithLocation>\n     *                 <SimpleList\n     *                     primaryText={record => record.title}\n     *                     secondaryText={record => `${record.views} views`}\n     *                     tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\n     *                 />\n     *             </List>\n     *         </ResourceContextProvider>\n     *         <ResourceContextProvider value=\"comments\">\n     *             <List disableSyncWithLocation>\n     *                 <SimpleList\n     *                     primaryText={record => record.title}\n     *                     secondaryText={record => `${record.views} views`}\n     *                     tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\n     *                 />\n     *             </List>\n     *         </ResourceContextProvider>\n     *     </div>\n     * )\n     */\n    disableSyncWithLocation?: boolean;\n\n    /**\n     * The function called when a user exports the list\n     *\n     * @see https://marmelab.com/react-admin/List.html#exporter\n     * @example\n     * import { List, downloadCSV } from 'react-admin';\n     * import jsonExport from 'jsonexport/dist';\n     *\n     * const exporter = posts => {\n     *     const postsForExport = posts.map(post => {\n     *         const { backLinks, author, ...postForExport } = post; // omit backLinks and author\n     *         postForExport.author_name = post.author.name; // add a field\n     *         return postForExport;\n     *     });\n     *     jsonExport(postsForExport, {\n     *         headers: ['id', 'title', 'author_name', 'body'] // order fields in the export\n     *     }, (err, csv) => {\n     *         downloadCSV(csv, 'posts'); // download as 'posts.csv` file\n     *     });\n     * };\n     *\n     * const PostList = () => (\n     *     <List exporter={exporter}>\n     *         ...\n     *     </List>\n     * )\n     */\n    exporter?: Exporter | false;\n\n    /**\n     * Permanent filter applied to all getList queries, regardless of the user selected filters.\n     *\n     * @see https://marmelab.com/react-admin/List.html#filter\n     * @example\n     * export const PostList = () => (\n     *     <List filter={{ is_published: true }}>\n     *         ...\n     *     </List>\n     * );\n     */\n    filter?: FilterPayload;\n\n    /**\n     * The filter to apply when calling getList if the filter is empty.\n     *\n     * @see https://marmelab.com/react-admin/List.html#filterdefaultvalues\n     * @example\n     * const postFilters = [\n     *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n     *     <BooleanInput source=\"is_published\" alwaysOn />,\n     *     <TextInput source=\"title\" defaultValue=\"Hello, World!\" />,\n     * ];\n     *\n     * export const PostList = () => (\n     *     <List filters={postFilters} filterDefaultValues={{ is_published: true }}>\n     *         ...\n     *     </List>\n     * );\n     */\n    filterDefaultValues?: object;\n\n    /**\n     * The number of results per page. Defaults to 10.\n     *\n     * @see https://marmelab.com/react-admin/List.html#perpage\n     * @example\n     * export const PostList = () => (\n     *     <List perPage={25}>\n     *         ...\n     *     </List>\n     * );\n     */\n    perPage?: number;\n\n    /**\n     * The options passed to react-query's useQuery when calling getList.\n     *\n     * @see https://marmelab.com/react-admin/List.html#queryoptions\n     * @example\n     * import { useNotify, useRedirect, List } from 'react-admin';\n     *\n     * const PostList = () => {\n     *     const notify = useNotify();\n     *     const redirect = useRedirect();\n     *\n     *     const onError = (error) => {\n     *         notify(`Could not load list: ${error.message}`, { type: 'error' });\n     *         redirect('/dashboard');\n     *     };\n     *\n     *     return (\n     *         <List queryOptions={{ onError }}>\n     *             ...\n     *         </List>\n     *     );\n     * }\n     */\n    queryOptions?: UseGetListOptions<RecordType>;\n\n    /**\n     * The resource name. Defaults to the resource from ResourceContext.\n     *\n     * @see https://marmelab.com/react-admin/List.html#resource\n     * @example\n     * import { List } from 'react-admin';\n     *\n     * const PostList = () => (\n     *    <List resource=\"posts\">\n     *       ...\n     *   </List>\n     * );\n     */\n    resource?: string;\n\n    /**\n     * The default sort field and order. Defaults to { field: 'id', order: 'ASC' }.\n     *\n     * @see https://marmelab.com/react-admin/List.html#sort\n     * @example\n     * export const PostList = () => (\n     *     <List sort={{ field: 'published_at', order: 'DESC' }}>\n     *         ...\n     *     </List>\n     * );\n     */\n    sort?: SortPayload;\n\n    /**\n     * The key to use to store the current filter & sort. Pass false to disable.\n     *\n     * @see https://marmelab.com/react-admin/List.html#storekey\n     * @example\n     * const NewerBooks = () => (\n     *     <List\n     *         resource=\"books\"\n     *         storeKey=\"newerBooks\"\n     *         sort={{ field: 'year', order: 'DESC' }}\n     *     >\n     *         ...\n     *     </List>\n     * );\n     */\n    storeKey?: string | false;\n}\n\nconst defaultSort = {\n    field: 'id',\n    order: SORT_ASC,\n} as const;\n\nexport const injectedProps = [\n    'sort',\n    'data',\n    'defaultTitle',\n    'displayedFilters',\n    'error',\n    'exporter',\n    'filterValues',\n    'hasNextPage',\n    'hasPreviousPage',\n    'hideFilter',\n    'isFetching',\n    'isLoading',\n    'isPending',\n    'onSelect',\n    'onToggleItem',\n    'onUnselectItems',\n    'page',\n    'perPage',\n    'refetch',\n    'refresh',\n    'resource',\n    'selectedIds',\n    'setFilters',\n    'setPage',\n    'setPerPage',\n    'setSort',\n    'showFilter',\n    'total',\n    'totalPages',\n];\n\n/**\n * Select the props injected by the useListController hook\n * to be passed to the List children need\n * This is an implementation of pick()\n */\nexport const getListControllerProps = props =>\n    injectedProps.reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n\n/**\n * Select the props not injected by the useListController hook\n * to be used inside the List children to sanitize props injected by List\n * This is an implementation of omit()\n */\nexport const sanitizeListRestProps = props =>\n    Object.keys(props)\n        .filter(propName => !injectedProps.includes(propName))\n        .reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n\nexport interface ListControllerBaseResult<RecordType extends RaRecord = any> {\n    sort: SortPayload;\n    defaultTitle?: string;\n    displayedFilters: any;\n    exporter?: Exporter | false;\n    filter?: FilterPayload;\n    filterValues: any;\n    hideFilter: (filterName: string) => void;\n    onSelect: (ids: RecordType['id'][]) => void;\n    onToggleItem: (id: RecordType['id']) => void;\n    onUnselectItems: () => void;\n    page: number;\n    perPage: number;\n    refetch: (() => void) | UseGetListHookValue<RecordType>['refetch'];\n    resource: string;\n    selectedIds: RecordType['id'][];\n    setFilters: (\n        filters: any,\n        displayedFilters?: any,\n        debounce?: boolean\n    ) => void;\n    setPage: (page: number) => void;\n    setPerPage: (page: number) => void;\n    setSort: (sort: SortPayload) => void;\n    showFilter: (filterName: string, defaultValue: any) => void;\n    hasNextPage?: boolean;\n    hasPreviousPage?: boolean;\n    isFetching?: boolean;\n    isLoading?: boolean;\n}\n\nexport interface ListControllerLoadingResult<RecordType extends RaRecord = any>\n    extends ListControllerBaseResult<RecordType> {\n    data: undefined;\n    total: undefined;\n    error: null;\n    isPending: true;\n}\nexport interface ListControllerErrorResult<\n    RecordType extends RaRecord = any,\n    TError = Error,\n> extends ListControllerBaseResult<RecordType> {\n    data: undefined;\n    total: undefined;\n    error: TError;\n    isPending: false;\n}\nexport interface ListControllerRefetchErrorResult<\n    RecordType extends RaRecord = any,\n    TError = Error,\n> extends ListControllerBaseResult<RecordType> {\n    data: RecordType[];\n    total: number;\n    error: TError;\n    isPending: false;\n}\nexport interface ListControllerSuccessResult<RecordType extends RaRecord = any>\n    extends ListControllerBaseResult<RecordType> {\n    data: RecordType[];\n    total: number;\n    error: null;\n    isPending: false;\n}\n\nexport type ListControllerResult<RecordType extends RaRecord = any> =\n    | ListControllerLoadingResult<RecordType>\n    | ListControllerErrorResult<RecordType>\n    | ListControllerRefetchErrorResult<RecordType>\n    | ListControllerSuccessResult<RecordType>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}