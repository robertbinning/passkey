{"ast":null,"code":"import { useCallback } from 'react';\nimport { useRecordSelection } from './useRecordSelection';\n/**\n * Hook to unselect all row of a datagrid\n *\n * @example\n *\n * const unselectAll = useUnselectAll('posts');\n * unselectAll();\n */\nexport var useUnselectAll = function (resource) {\n  var _a = useRecordSelection(resource ? {\n      resource: resource\n    } : {\n      disableSyncWithStore: true\n    }),\n    clearSelection = _a[1].clearSelection;\n  return useCallback(function () {\n    clearSelection();\n  }, [clearSelection]);\n};","map":{"version":3,"names":["useCallback","useRecordSelection","useUnselectAll","resource","_a","disableSyncWithStore","clearSelection"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/list/useUnselectAll.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { useRecordSelection } from './useRecordSelection';\n\n/**\n * Hook to unselect all row of a datagrid\n *\n * @example\n *\n * const unselectAll = useUnselectAll('posts');\n * unselectAll();\n */\nexport const useUnselectAll = (resource?: string) => {\n    const [, { clearSelection }] = useRecordSelection(\n        resource ? { resource } : { disableSyncWithStore: true }\n    );\n    return useCallback(() => {\n        clearSelection();\n    }, [clearSelection]);\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD;;;;;;;;AAQA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAACC,QAAiB;EACtC,IAAAC,EAAA,GAAyBH,kBAAkB,CAC7CE,QAAQ,GAAG;MAAEA,QAAQ,EAAAA;IAAA,CAAE,GAAG;MAAEE,oBAAoB,EAAE;IAAI,CAAE,CAC3D;IAFUC,cAAc,GAAAF,EAAA,IAAAE,cAExB;EACD,OAAON,WAAW,CAAC;IACfM,cAAc,EAAE;EACpB,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}