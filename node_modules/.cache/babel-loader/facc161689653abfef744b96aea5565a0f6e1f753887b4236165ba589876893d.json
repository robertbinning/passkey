{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { styled } from '@mui/material/styles';\nimport { LinearProgress } from '../layout';\nimport { SingleFieldList } from '../list/SingleFieldList';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nexport var ReferenceArrayField = function (props) {\n  var filter = props.filter,\n    _a = props.page,\n    page = _a === void 0 ? 1 : _a,\n    perPage = props.perPage,\n    reference = props.reference,\n    resource = props.resource,\n    sort = props.sort,\n    source = props.source,\n    queryOptions = props.queryOptions;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceArrayFieldController({\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source,\n    queryOptions: queryOptions\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(PureReferenceArrayFieldView, __assign({}, props))));\n};\nexport var ReferenceArrayFieldView = function (props) {\n  var children = props.children,\n    pagination = props.pagination,\n    className = props.className,\n    sx = props.sx;\n  var _a = useListContext(),\n    isPending = _a.isPending,\n    total = _a.total;\n  return React.createElement(Root, {\n    className: className,\n    sx: sx\n  }, isPending ? React.createElement(LinearProgress, {\n    className: ReferenceArrayFieldClasses.progress\n  }) : React.createElement(\"span\", null, children || React.createElement(SingleFieldList, null), pagination && total !== undefined ? pagination : null));\n};\nvar PREFIX = 'RaReferenceArrayField';\nexport var ReferenceArrayFieldClasses = {\n  progress: \"\".concat(PREFIX, \"-progress\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(ReferenceArrayFieldClasses.progress)] = {\n    marginTop: theme.spacing(2)\n  }, _b;\n});\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);","map":{"version":3,"names":["React","memo","ListContextProvider","useListContext","useReferenceArrayFieldController","ResourceContextProvider","useRecordContext","styled","LinearProgress","SingleFieldList","ReferenceArrayField","props","filter","_a","page","perPage","reference","resource","sort","source","queryOptions","record","controllerProps","createElement","value","PureReferenceArrayFieldView","__assign","ReferenceArrayFieldView","children","pagination","className","sx","isPending","total","Root","ReferenceArrayFieldClasses","progress","undefined","PREFIX","concat","name","overridesResolver","styles","root","theme","_b","marginTop","spacing"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/ReferenceArrayField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FC, memo, ReactElement, ReactNode } from 'react';\nimport {\n    ListContextProvider,\n    useListContext,\n    ListControllerProps,\n    useReferenceArrayFieldController,\n    SortPayload,\n    FilterPayload,\n    ResourceContextProvider,\n    useRecordContext,\n    RaRecord,\n} from 'ra-core';\nimport { styled } from '@mui/material/styles';\nimport { SxProps } from '@mui/system';\nimport { UseQueryOptions } from '@tanstack/react-query';\n\nimport { FieldProps } from './types';\nimport { LinearProgress } from '../layout';\nimport { SingleFieldList } from '../list/SingleFieldList';\n\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nexport const ReferenceArrayField = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord,\n>(\n    props: ReferenceArrayFieldProps<RecordType, ReferenceRecordType>\n) => {\n    const {\n        filter,\n        page = 1,\n        perPage,\n        reference,\n        resource,\n        sort,\n        source,\n        queryOptions,\n    } = props;\n    const record = useRecordContext(props);\n    const controllerProps = useReferenceArrayFieldController<\n        RecordType,\n        ReferenceRecordType\n    >({\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n        queryOptions,\n    });\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                <PureReferenceArrayFieldView {...props} />\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\nexport interface ReferenceArrayFieldProps<\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord,\n> extends FieldProps<RecordType> {\n    children?: ReactNode;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    sort?: SortPayload;\n    sx?: SxProps;\n    queryOptions?: UseQueryOptions<ReferenceRecordType[], Error>;\n}\n\nexport interface ReferenceArrayFieldViewProps\n    extends Omit<ReferenceArrayFieldProps, 'resource' | 'page' | 'perPage'>,\n        Omit<ListControllerProps, 'queryOptions'> {}\n\nexport const ReferenceArrayFieldView: FC<\n    ReferenceArrayFieldViewProps\n> = props => {\n    const { children, pagination, className, sx } = props;\n    const { isPending, total } = useListContext();\n\n    return (\n        <Root className={className} sx={sx}>\n            {isPending ? (\n                <LinearProgress\n                    className={ReferenceArrayFieldClasses.progress}\n                />\n            ) : (\n                <span>\n                    {children || <SingleFieldList />}\n                    {pagination && total !== undefined ? pagination : null}\n                </span>\n            )}\n        </Root>\n    );\n};\n\nconst PREFIX = 'RaReferenceArrayField';\n\nexport const ReferenceArrayFieldClasses = {\n    progress: `${PREFIX}-progress`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ReferenceArrayFieldClasses.progress}`]: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\n"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAaC,IAAI,QAAiC,OAAO;AACzD,SACIC,mBAAmB,EACnBC,cAAc,EAEdC,gCAAgC,EAGhCC,uBAAuB,EACvBC,gBAAgB,QAEb,SAAS;AAChB,SAASC,MAAM,QAAQ,sBAAsB;AAK7C,SAASC,cAAc,QAAQ,WAAW;AAC1C,SAASC,eAAe,QAAQ,yBAAyB;AAEzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CAI/BC,KAAgE;EAG5D,IAAAC,MAAM,GAQND,KAAK,CAAAC,MARC;IACNC,EAAA,GAOAF,KAAK,CAAAG,IAPG;IAARA,IAAI,GAAAD,EAAA,cAAG,CAAC,GAAAA,EAAA;IACRE,OAAO,GAMPJ,KAAK,CAAAI,OANE;IACPC,SAAS,GAKTL,KAAK,CAAAK,SALI;IACTC,QAAQ,GAIRN,KAAK,CAAAM,QAJG;IACRC,IAAI,GAGJP,KAAK,CAAAO,IAHD;IACJC,MAAM,GAENR,KAAK,CAAAQ,MAFC;IACNC,YAAY,GACZT,KAAK,CAAAS,YADO;EAEhB,IAAMC,MAAM,GAAGf,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAMW,eAAe,GAAGlB,gCAAgC,CAGtD;IACEQ,MAAM,EAAAA,MAAA;IACNE,IAAI,EAAAA,IAAA;IACJC,OAAO,EAAAA,OAAA;IACPM,MAAM,EAAAA,MAAA;IACNL,SAAS,EAAAA,SAAA;IACTC,QAAQ,EAAAA,QAAA;IACRC,IAAI,EAAAA,IAAA;IACJC,MAAM,EAAAA,MAAA;IACNC,YAAY,EAAAA;GACf,CAAC;EACF,OACIpB,KAAA,CAAAuB,aAAA,CAAClB,uBAAuB;IAACmB,KAAK,EAAER;EAAS,GACrChB,KAAA,CAAAuB,aAAA,CAACrB,mBAAmB;IAACsB,KAAK,EAAEF;EAAe,GACvCtB,KAAA,CAAAuB,aAAA,CAACE,2BAA2B,EAAAC,QAAA,KAAKf,KAAK,EAAI,CACxB,CACA;AAElC,CAAC;AAoBD,OAAO,IAAMgB,uBAAuB,GAEhC,SAAAA,CAAAhB,KAAK;EACG,IAAAiB,QAAQ,GAAgCjB,KAAK,CAAAiB,QAArC;IAAEC,UAAU,GAAoBlB,KAAK,CAAAkB,UAAzB;IAAEC,SAAS,GAASnB,KAAK,CAAAmB,SAAd;IAAEC,EAAE,GAAKpB,KAAK,CAAAoB,EAAV;EACrC,IAAAlB,EAAA,GAAuBV,cAAc,EAAE;IAArC6B,SAAS,GAAAnB,EAAA,CAAAmB,SAAA;IAAEC,KAAK,GAAApB,EAAA,CAAAoB,KAAqB;EAE7C,OACIjC,KAAA,CAAAuB,aAAA,CAACW,IAAI;IAACJ,SAAS,EAAEA,SAAS;IAAEC,EAAE,EAAEA;EAAE,GAC7BC,SAAS,GACNhC,KAAA,CAAAuB,aAAA,CAACf,cAAc;IACXsB,SAAS,EAAEK,0BAA0B,CAACC;EAAQ,EAChD,GAEFpC,KAAA,CAAAuB,aAAA,eACKK,QAAQ,IAAI5B,KAAA,CAAAuB,aAAA,CAACd,eAAe,OAAG,EAC/BoB,UAAU,IAAII,KAAK,KAAKI,SAAS,GAAGR,UAAU,GAAG,IAAI,CAE7D,CACE;AAEf,CAAC;AAED,IAAMS,MAAM,GAAG,uBAAuB;AAEtC,OAAO,IAAMH,0BAA0B,GAAG;EACtCC,QAAQ,EAAE,GAAAG,MAAA,CAAGD,MAAM;CACtB;AAED,IAAMJ,IAAI,GAAG3B,MAAM,CAAC,KAAK,EAAE;EACvBiC,IAAI,EAAEF,MAAM;EACZG,iBAAiB,EAAE,SAAAA,CAAC9B,KAAK,EAAE+B,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAC9B,EAAS;;MAAP+B,KAAK,GAAA/B,EAAA,CAAA+B,KAAA;EAAO,OAAAC,EAAA,OACdA,EAAA,CAAC,MAAAN,MAAA,CAAMJ,0BAA0B,CAACC,QAAQ,CAAE,IAAG;IAC3CU,SAAS,EAAEF,KAAK,CAACG,OAAO,CAAC,CAAC;GAC7B,E;AAHa,CAIhB,CAAC;AAEH,IAAMtB,2BAA2B,GAAGxB,IAAI,CAAC0B,uBAAuB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}