{"ast":null,"code":"import { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\nconst apiUrl = 'https://localhost:3000';\nconst httpClient = fetchUtils.fetchJson;\nconst dataProvider = {\n  getList: (resource, params) => {\n    const url = `${apiUrl}/${resource}`;\n    return httpClient(url).then(({\n      json\n    }) => {\n      console.log('Fetched users:', json.users); // Add this line\n      return {\n        data: json.users,\n        total: json.users.length\n      };\n    });\n  },\n  getOne: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  getMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    const url = `${apiUrl}/${resource}?${stringify(query)}`;\n    return httpClient(url).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  },\n  getManyReference: (resource, params) => {\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const {\n      field,\n      order\n    } = params.sort;\n    const query = {\n      sort: JSON.stringify([field, order]),\n      range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n      filter: JSON.stringify({\n        ...params.filter,\n        [params.target]: params.id\n      })\n    };\n    const url = `${apiUrl}/${resource}?${stringify(query)}`;\n    return httpClient(url).then(({\n      headers,\n      json\n    }) => ({\n      data: json,\n      total: parseInt(headers.get('content-range').split('/').pop(), 10)\n    }));\n  },\n  update: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`, {\n    method: 'PUT',\n    body: JSON.stringify(params.data)\n  }).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  updateMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return httpClient(`${apiUrl}/${resource}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data)\n    }).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  },\n  create: (resource, params) => httpClient(`${apiUrl}/${resource}`, {\n    method: 'POST',\n    body: JSON.stringify(params.data)\n  }).then(({\n    json\n  }) => ({\n    data: {\n      ...params.data,\n      id: json.id\n    }\n  })),\n  delete: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`, {\n    method: 'DELETE'\n  }).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  deleteMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return httpClient(`${apiUrl}/${resource}`, {\n      method: 'DELETE',\n      body: JSON.stringify(params.data)\n    }).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  }\n};\nexport default dataProvider;","map":{"version":3,"names":["fetchUtils","stringify","apiUrl","httpClient","fetchJson","dataProvider","getList","resource","params","url","then","json","console","log","users","data","total","length","getOne","id","getMany","query","filter","JSON","ids","getManyReference","page","perPage","pagination","field","order","sort","range","target","headers","parseInt","get","split","pop","update","method","body","updateMany","create","delete","deleteMany"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/dataProvider.js"],"sourcesContent":["import { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\n\nconst apiUrl = 'https://localhost:3000';\nconst httpClient = fetchUtils.fetchJson;\n\nconst dataProvider = {\n    getList: (resource, params) => {\n        const url = `${apiUrl}/${resource}`;\n        return httpClient(url).then(({ json }) => {\n            console.log('Fetched users:', json.users); // Add this line\n            return {\n                data: json.users,\n                total: json.users.length,\n            };\n        });\n    },\n    getOne: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\n            data: json,\n        })),\n    getMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        return httpClient(url).then(({ json }) => ({ data: json }));\n    },\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify({\n                ...params.filter,\n                [params.target]: params.id,\n            }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        return httpClient(url).then(({ headers, json }) => ({\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },\n    update: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json })),\n    updateMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        return httpClient(`${apiUrl}/${resource}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n    create: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({\n            data: { ...params.data, id: json.id },\n        })),\n    delete: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n        }).then(({ json }) => ({ data: json })),\n    deleteMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        return httpClient(`${apiUrl}/${resource}`, {\n            method: 'DELETE',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n};\n\nexport default dataProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}