{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport lodashDebounce from 'lodash/debounce';\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\nvar defaultFilter = {};\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isPending, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n * @param {UseQuery Options} props.queryOptions `react-query` options`\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport var useReferenceManyFieldController = function (props) {\n  var _a = props.debounce,\n    debounce = _a === void 0 ? 500 : _a,\n    reference = props.reference,\n    record = props.record,\n    target = props.target,\n    _b = props.filter,\n    filter = _b === void 0 ? defaultFilter : _b,\n    _c = props.source,\n    source = _c === void 0 ? 'id' : _c,\n    initialPage = props.page,\n    initialPerPage = props.perPage,\n    _d = props.sort,\n    initialSort = _d === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _d,\n    _e = props.queryOptions,\n    queryOptions = _e === void 0 ? {} : _e;\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  // pagination logic\n  var _f = usePaginationState({\n      page: initialPage,\n      perPage: initialPerPage\n    }),\n    page = _f.page,\n    setPage = _f.setPage,\n    perPage = _f.perPage,\n    setPerPage = _f.setPerPage;\n  // sort logic\n  var _g = useSortState(initialSort),\n    sort = _g.sort,\n    setSortState = _g.setSort;\n  var setSort = useCallback(function (sort) {\n    setSortState(sort);\n    setPage(1);\n  }, [setPage, setSortState]);\n  // selection logic\n  var _h = useRecordSelection({\n      resource: \"\".concat(resource, \".\").concat(record === null || record === void 0 ? void 0 : record.id, \".\").concat(reference)\n    }),\n    selectedIds = _h[0],\n    selectionModifiers = _h[1];\n  // filter logic\n  var filterRef = useRef(filter);\n  var _j = useSafeSetState({}),\n    displayedFilters = _j[0],\n    setDisplayedFilters = _j[1];\n  var _k = useSafeSetState(filter),\n    filterValues = _k[0],\n    setFilterValues = _k[1];\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  var debouncedSetFilters = useCallback(lodashDebounce(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n    setDisplayedFilters(displayedFilters);\n    setPage(1);\n  }, debounce), [setDisplayedFilters, setFilterValues, setPage]);\n  var setFilters = useCallback(function (filters, displayedFilters, debounce) {\n    if (debounce === void 0) {\n      debounce = false;\n    }\n    if (debounce) {\n      debouncedSetFilters(filters, displayedFilters);\n    } else {\n      setFilterValues(removeEmpty(filters));\n      setDisplayedFilters(displayedFilters);\n      setPage(1);\n    }\n  }, [setDisplayedFilters, setFilterValues, setPage, debouncedSetFilters]);\n  // handle filter prop change\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  });\n  var _l = useGetManyReference(reference, {\n      target: target,\n      id: get(record, source),\n      pagination: {\n        page: page,\n        perPage: perPage\n      },\n      sort: sort,\n      filter: filterValues,\n      meta: meta\n    }, __assign({\n      enabled: get(record, source) != null,\n      placeholderData: function (previousData) {\n        return previousData;\n      },\n      onError: function (error) {\n        return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n      }\n    }, otherQueryOptions)),\n    data = _l.data,\n    total = _l.total,\n    pageInfo = _l.pageInfo,\n    error = _l.error,\n    isFetching = _l.isFetching,\n    isLoading = _l.isLoading,\n    isPending = _l.isPending,\n    refetch = _l.refetch;\n  return {\n    sort: sort,\n    data: data,\n    defaultTitle: undefined,\n    displayedFilters: displayedFilters,\n    error: error,\n    filterValues: filterValues,\n    hideFilter: hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    isPending: isPending,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: reference,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? page * perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","get","isEqual","lodashDebounce","useSafeSetState","removeEmpty","useGetManyReference","useNotify","usePaginationState","useRecordSelection","useSortState","useResourceContext","defaultFilter","useReferenceManyFieldController","props","_a","debounce","reference","record","target","_b","filter","_c","source","initialPage","page","initialPerPage","perPage","_d","sort","initialSort","field","order","_e","queryOptions","notify","resource","meta","otherQueryOptions","__rest","_f","setPage","setPerPage","_g","setSortState","setSort","_h","concat","id","selectedIds","selectionModifiers","filterRef","_j","displayedFilters","setDisplayedFilters","_k","filterValues","setFilterValues","hideFilter","filterName","previousState","_","newState","showFilter","defaultValue","__assign","debouncedSetFilters","filters","setFilters","current","_l","pagination","enabled","placeholderData","previousData","onError","error","message","type","messageArgs","undefined","data","total","pageInfo","isFetching","isLoading","isPending","refetch","defaultTitle","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","hasNextPage","hasPreviousPage"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/field/useReferenceManyFieldController.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { UseQueryOptions } from '@tanstack/react-query';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport lodashDebounce from 'lodash/debounce';\n\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport { Identifier, RaRecord, SortPayload } from '../../types';\nimport { ListControllerResult } from '../list';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\n\nexport interface UseReferenceManyFieldControllerParams<\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord,\n> {\n    debounce?: number;\n    filter?: any;\n    page?: number;\n    perPage?: number;\n    record?: RecordType;\n    reference: string;\n    resource?: string;\n    sort?: SortPayload;\n    source?: string;\n    target: string;\n    queryOptions?: UseQueryOptions<\n        { data: ReferenceRecordType[]; total: number },\n        Error\n    >;\n}\n\nconst defaultFilter = {};\n\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isPending, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n * @param {UseQuery Options} props.queryOptions `react-query` options`\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport const useReferenceManyFieldController = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord,\n>(\n    props: UseReferenceManyFieldControllerParams<\n        RecordType,\n        ReferenceRecordType\n    >\n): ListControllerResult<ReferenceRecordType> => {\n    const {\n        debounce = 500,\n        reference,\n        record,\n        target,\n        filter = defaultFilter,\n        source = 'id',\n        page: initialPage,\n        perPage: initialPerPage,\n        sort: initialSort = { field: 'id', order: 'DESC' },\n        queryOptions = {} as UseQueryOptions<\n            { data: ReferenceRecordType[]; total: number },\n            Error\n        >,\n    } = props;\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    // pagination logic\n    const { page, setPage, perPage, setPerPage } = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    });\n\n    // sort logic\n    const { sort, setSort: setSortState } = useSortState(initialSort);\n    const setSort = useCallback(\n        (sort: SortPayload) => {\n            setSortState(sort);\n            setPage(1);\n        },\n        [setPage, setSortState]\n    );\n\n    // selection logic\n    const [selectedIds, selectionModifiers] = useRecordSelection({\n        resource: `${resource}.${record?.id}.${reference}`,\n    });\n\n    // filter logic\n    const filterRef = useRef(filter);\n    const [displayedFilters, setDisplayedFilters] = useSafeSetState<{\n        [key: string]: boolean;\n    }>({});\n    const [filterValues, setFilterValues] = useSafeSetState<{\n        [key: string]: any;\n    }>(filter);\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            setDisplayedFilters(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n            setFilterValues(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            setDisplayedFilters(previousState => ({\n                ...previousState,\n                [filterName]: true,\n            }));\n            setFilterValues(previousState => ({\n                ...previousState,\n                [filterName]: defaultValue,\n            }));\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const debouncedSetFilters = useCallback(\n        lodashDebounce((filters, displayedFilters) => {\n            setFilterValues(removeEmpty(filters));\n            setDisplayedFilters(displayedFilters);\n            setPage(1);\n        }, debounce),\n        [setDisplayedFilters, setFilterValues, setPage]\n    );\n\n    const setFilters = useCallback(\n        (filters, displayedFilters, debounce = false) => {\n            if (debounce) {\n                debouncedSetFilters(filters, displayedFilters);\n            } else {\n                setFilterValues(removeEmpty(filters));\n                setDisplayedFilters(displayedFilters);\n                setPage(1);\n            }\n        },\n        [setDisplayedFilters, setFilterValues, setPage, debouncedSetFilters]\n    );\n    // handle filter prop change\n    useEffect(() => {\n        if (!isEqual(filter, filterRef.current)) {\n            filterRef.current = filter;\n            setFilterValues(filter);\n        }\n    });\n\n    const {\n        data,\n        total,\n        pageInfo,\n        error,\n        isFetching,\n        isLoading,\n        isPending,\n        refetch,\n    } = useGetManyReference<ReferenceRecordType>(\n        reference,\n        {\n            target,\n            id: get(record, source) as Identifier,\n            pagination: { page, perPage },\n            sort,\n            filter: filterValues,\n            meta,\n        },\n        {\n            enabled: get(record, source) != null,\n            placeholderData: previousData => previousData,\n            onError: error =>\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                      ? error.message\n                                      : undefined,\n                        },\n                    }\n                ),\n            ...otherQueryOptions,\n        }\n    );\n\n    return {\n        sort,\n        data,\n        defaultTitle: undefined,\n        displayedFilters,\n        error,\n        filterValues,\n        hideFilter,\n        isFetching,\n        isLoading,\n        isPending,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page,\n        perPage,\n        refetch,\n        resource: reference,\n        selectedIds,\n        setFilters,\n        setPage,\n        setPerPage,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n              ? page * perPage < total\n              : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n        setSort,\n        showFilter,\n        total,\n    } as ListControllerResult<ReferenceRecordType>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}