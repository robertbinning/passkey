{"ast":null,"code":"import * as React from 'react';\nimport { ReferenceFieldContextProvider } from './ReferenceFieldContext';\nimport { useReferenceFieldController } from './useReferenceFieldController';\nimport { ResourceContextProvider } from '../../core';\nimport { RecordContextProvider } from '../record';\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceFieldBase>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceFieldBase>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport var ReferenceFieldBase = function (props) {\n  var children = props.children;\n  var controllerProps = useReferenceFieldController(props);\n  return React.createElement(ResourceContextProvider, {\n    value: props.reference\n  }, React.createElement(ReferenceFieldContextProvider, {\n    value: controllerProps\n  }, React.createElement(RecordContextProvider, {\n    value: controllerProps.referenceRecord\n  }, children)));\n};","map":{"version":3,"names":["React","ReferenceFieldContextProvider","useReferenceFieldController","ResourceContextProvider","RecordContextProvider","ReferenceFieldBase","props","children","controllerProps","createElement","value","reference","referenceRecord"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/field/ReferenceFieldBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { UseQueryOptions } from '@tanstack/react-query';\nimport { ReferenceFieldContextProvider } from './ReferenceFieldContext';\nimport { RaRecord } from '../../types';\nimport { useReferenceFieldController } from './useReferenceFieldController';\nimport { ResourceContextProvider } from '../../core';\nimport { RecordContextProvider } from '../record';\n\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceFieldBase>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceFieldBase>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceFieldBase label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport const ReferenceFieldBase = <\n    ReferenceRecordType extends RaRecord = RaRecord,\n>(\n    props: ReferenceFieldBaseProps<ReferenceRecordType>\n) => {\n    const { children } = props;\n\n    const controllerProps =\n        useReferenceFieldController<ReferenceRecordType>(props);\n\n    return (\n        <ResourceContextProvider value={props.reference}>\n            <ReferenceFieldContextProvider value={controllerProps}>\n                <RecordContextProvider value={controllerProps.referenceRecord}>\n                    {children}\n                </RecordContextProvider>\n            </ReferenceFieldContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceFieldBaseProps<\n    ReferenceRecordType extends RaRecord = RaRecord,\n> {\n    children?: ReactNode;\n    className?: string;\n    error?: ReactNode;\n    queryOptions?: Partial<\n        UseQueryOptions<ReferenceRecordType[], Error> & {\n            meta?: any;\n        }\n    >;\n    reference: string;\n    source: string;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,SAASC,6BAA6B,QAAQ,yBAAyB;AAEvE,SAASC,2BAA2B,QAAQ,+BAA+B;AAC3E,SAASC,uBAAuB,QAAQ,YAAY;AACpD,SAASC,qBAAqB,QAAQ,WAAW;AAEjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAO,IAAMC,kBAAkB,GAAG,SAAAA,CAG9BC,KAAmD;EAE3C,IAAAC,QAAQ,GAAKD,KAAK,CAAAC,QAAV;EAEhB,IAAMC,eAAe,GACjBN,2BAA2B,CAAsBI,KAAK,CAAC;EAE3D,OACIN,KAAA,CAAAS,aAAA,CAACN,uBAAuB;IAACO,KAAK,EAAEJ,KAAK,CAACK;EAAS,GAC3CX,KAAA,CAAAS,aAAA,CAACR,6BAA6B;IAACS,KAAK,EAAEF;EAAe,GACjDR,KAAA,CAAAS,aAAA,CAACL,qBAAqB;IAACM,KAAK,EAAEF,eAAe,CAACI;EAAe,GACxDL,QAAQ,CACW,CACI,CACV;AAElC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}