{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { RecordContextProvider, useGetRecordRepresentation, useTranslate, ReferenceFieldBase, useReferenceFieldContext, useFieldValue } from 'ra-core';\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { genericMemo } from './genericMemo';\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceField>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport var ReferenceField = function (props) {\n  var emptyText = props.emptyText;\n  var translate = useTranslate();\n  var id = useFieldValue(props);\n  if (id == null) {\n    return emptyText ? React.createElement(Typography, {\n      component: \"span\",\n      variant: \"body2\"\n    }, emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  return React.createElement(ReferenceFieldBase, __assign({}, props), React.createElement(PureReferenceFieldView, __assign({}, props)));\n};\n// useful to prevent click bubbling in a datagrid with rowClick\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\nexport var ReferenceFieldView = function (props) {\n  var children = props.children,\n    className = props.className,\n    emptyText = props.emptyText,\n    reference = props.reference,\n    sx = props.sx;\n  var _a = useReferenceFieldContext(),\n    error = _a.error,\n    link = _a.link,\n    isLoading = _a.isLoading,\n    referenceRecord = _a.referenceRecord;\n  var getRecordRepresentation = useGetRecordRepresentation(reference);\n  var translate = useTranslate();\n  if (error) {\n    return /* eslint-disable jsx-a11y/role-supports-aria-props */(\n      React.createElement(ErrorIcon, {\n        \"aria-errormessage\": error.message ? error.message : error,\n        role: \"presentation\",\n        color: \"error\",\n        fontSize: \"small\"\n      })\n      /* eslint-enable */\n    );\n  }\n  // We explicitly check isLoading here as the record may not have an id for the reference,\n  // in which case, the query will not be enabled and isPending will be true\n  // isLoading checks that we are actually loading the reference record\n  if (isLoading) {\n    return React.createElement(LinearProgress, null);\n  }\n  if (!referenceRecord) {\n    return emptyText ? React.createElement(Typography, {\n      component: \"span\",\n      variant: \"body2\"\n    }, emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var child = children || React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, getRecordRepresentation(referenceRecord));\n  if (link) {\n    return React.createElement(Root, {\n      className: className,\n      sx: sx\n    }, React.createElement(RecordContextProvider, {\n      value: referenceRecord\n    }, React.createElement(Link, {\n      to: link,\n      className: ReferenceFieldClasses.link,\n      onClick: stopPropagation,\n      state: {\n        _scrollToTop: true\n      }\n    }, child)));\n  }\n  return React.createElement(Root, {\n    className: className,\n    sx: sx\n  }, React.createElement(RecordContextProvider, {\n    value: referenceRecord\n  }, child));\n};\nvar PureReferenceFieldView = genericMemo(ReferenceFieldView);\nvar PREFIX = 'RaReferenceField';\nexport var ReferenceFieldClasses = {\n  link: \"\".concat(PREFIX, \"-link\")\n};\nvar Root = styled('span', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    lineHeight: 'initial'\n  }, _b[\"& .\".concat(ReferenceFieldClasses.link)] = {\n    '& > *': {\n      color: theme.palette.primary.main\n    }\n  }, _b;\n});","map":{"version":3,"names":["React","Typography","styled","ErrorIcon","RecordContextProvider","useGetRecordRepresentation","useTranslate","ReferenceFieldBase","useReferenceFieldContext","useFieldValue","LinearProgress","Link","genericMemo","ReferenceField","props","emptyText","translate","id","createElement","component","variant","_","__assign","PureReferenceFieldView","stopPropagation","e","ReferenceFieldView","children","className","reference","sx","_a","error","link","isLoading","referenceRecord","getRecordRepresentation","message","role","color","fontSize","child","Root","value","to","ReferenceFieldClasses","onClick","state","_scrollToTop","PREFIX","concat","name","overridesResolver","styles","root","theme","_b","lineHeight","palette","primary","main"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/ReferenceField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { Typography, SxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport {\n    LinkToType,\n    RecordContextProvider,\n    useGetRecordRepresentation,\n    useTranslate,\n    RaRecord,\n    ReferenceFieldBase,\n    useReferenceFieldContext,\n    useFieldValue,\n} from 'ra-core';\nimport { UseQueryOptions } from '@tanstack/react-query';\n\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { FieldProps } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceField>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport const ReferenceField = <\n    RecordType extends Record<string, any> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord,\n>(\n    props: ReferenceFieldProps<RecordType, ReferenceRecordType>\n) => {\n    const { emptyText } = props;\n    const translate = useTranslate();\n    const id = useFieldValue(props);\n\n    if (id == null) {\n        return emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    return (\n        <ReferenceFieldBase<ReferenceRecordType> {...props}>\n            <PureReferenceFieldView<RecordType, ReferenceRecordType>\n                {...props}\n            />\n        </ReferenceFieldBase>\n    );\n};\n\nexport interface ReferenceFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord,\n> extends Omit<FieldProps<RecordType>, 'source'>,\n        Required<Pick<FieldProps<RecordType>, 'source'>> {\n    children?: ReactNode;\n    queryOptions?: Partial<\n        UseQueryOptions<ReferenceRecordType[], Error> & {\n            meta?: any;\n        }\n    >;\n    reference: string;\n    translateChoice?: Function | boolean;\n    link?: LinkToType<ReferenceRecordType>;\n    sx?: SxProps;\n}\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\nexport const ReferenceFieldView = <\n    RecordType extends Record<string, any> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord,\n>(\n    props: ReferenceFieldViewProps<RecordType, ReferenceRecordType>\n) => {\n    const { children, className, emptyText, reference, sx } = props;\n    const { error, link, isLoading, referenceRecord } =\n        useReferenceFieldContext();\n\n    const getRecordRepresentation = useGetRecordRepresentation(reference);\n    const translate = useTranslate();\n\n    if (error) {\n        return (\n            /* eslint-disable jsx-a11y/role-supports-aria-props */\n            <ErrorIcon\n                aria-errormessage={error.message ? error.message : error}\n                role=\"presentation\"\n                color=\"error\"\n                fontSize=\"small\"\n            />\n            /* eslint-enable */\n        );\n    }\n    // We explicitly check isLoading here as the record may not have an id for the reference,\n    // in which case, the query will not be enabled and isPending will be true\n    // isLoading checks that we are actually loading the reference record\n    if (isLoading) {\n        return <LinearProgress />;\n    }\n    if (!referenceRecord) {\n        return emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    let child = children || (\n        <Typography component=\"span\" variant=\"body2\">\n            {getRecordRepresentation(referenceRecord)}\n        </Typography>\n    );\n\n    if (link) {\n        return (\n            <Root className={className} sx={sx}>\n                <RecordContextProvider value={referenceRecord}>\n                    <Link\n                        to={link}\n                        className={ReferenceFieldClasses.link}\n                        onClick={stopPropagation}\n                        state={{ _scrollToTop: true }}\n                    >\n                        {child}\n                    </Link>\n                </RecordContextProvider>\n            </Root>\n        );\n    }\n\n    return (\n        <Root className={className} sx={sx}>\n            <RecordContextProvider value={referenceRecord}>\n                {child}\n            </RecordContextProvider>\n        </Root>\n    );\n};\n\nexport interface ReferenceFieldViewProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord,\n> extends FieldProps<RecordType>,\n        Omit<ReferenceFieldProps<RecordType, ReferenceRecordType>, 'link'> {\n    children?: ReactNode;\n    reference: string;\n    resource?: string;\n    translateChoice?: Function | boolean;\n    sx?: SxProps;\n}\n\nconst PureReferenceFieldView = genericMemo(ReferenceFieldView);\n\nconst PREFIX = 'RaReferenceField';\n\nexport const ReferenceFieldClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    lineHeight: 'initial',\n    [`& .${ReferenceFieldClasses.link}`]: {\n        '& > *': {\n            color: theme.palette.primary.main,\n        },\n    },\n}));\n"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,UAAU,QAAiB,eAAe;AACnD,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,SAAS,MAAM,2BAA2B;AACjD,SAEIC,qBAAqB,EACrBC,0BAA0B,EAC1BC,YAAY,EAEZC,kBAAkB,EAClBC,wBAAwB,EACxBC,aAAa,QACV,SAAS;AAGhB,SAASC,cAAc,QAAQ,WAAW;AAC1C,SAASC,IAAI,QAAQ,SAAS;AAE9B,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAI1BC,KAA2D;EAEnD,IAAAC,SAAS,GAAKD,KAAK,CAAAC,SAAV;EACjB,IAAMC,SAAS,GAAGV,YAAY,EAAE;EAChC,IAAMW,EAAE,GAAGR,aAAa,CAACK,KAAK,CAAC;EAE/B,IAAIG,EAAE,IAAI,IAAI,EAAE;IACZ,OAAOF,SAAS,GACZf,KAAA,CAAAkB,aAAA,CAACjB,UAAU;MAACkB,SAAS,EAAC,MAAM;MAACC,OAAO,EAAC;IAAO,GACvCL,SAAS,IAAIC,SAAS,CAACD,SAAS,EAAE;MAAEM,CAAC,EAAEN;IAAS,CAAE,CAAC,CAC3C,GACb,IAAI;;EAGZ,OACIf,KAAA,CAAAkB,aAAA,CAACX,kBAAkB,EAAAe,QAAA,KAA0BR,KAAK,GAC9Cd,KAAA,CAAAkB,aAAA,CAACK,sBAAsB,EAAAD,QAAA,KACfR,KAAK,EACX,CACe;AAE7B,CAAC;AAmBD;AACA,IAAMU,eAAe,GAAG,SAAAA,CAAAC,CAAC;EAAI,OAAAA,CAAC,CAACD,eAAe,EAAE;AAAnB,CAAmB;AAEhD,OAAO,IAAME,kBAAkB,GAAG,SAAAA,CAI9BZ,KAA+D;EAEvD,IAAAa,QAAQ,GAA0Cb,KAAK,CAAAa,QAA/C;IAAEC,SAAS,GAA+Bd,KAAK,CAAAc,SAApC;IAAEb,SAAS,GAAoBD,KAAK,CAAAC,SAAzB;IAAEc,SAAS,GAASf,KAAK,CAAAe,SAAd;IAAEC,EAAE,GAAKhB,KAAK,CAAAgB,EAAV;EAC/C,IAAAC,EAAA,GACFvB,wBAAwB,EAAE;IADtBwB,KAAK,GAAAD,EAAA,CAAAC,KAAA;IAAEC,IAAI,GAAAF,EAAA,CAAAE,IAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEC,eAAe,GAAAJ,EAAA,CAAAI,eACjB;EAE9B,IAAMC,uBAAuB,GAAG/B,0BAA0B,CAACwB,SAAS,CAAC;EACrE,IAAMb,SAAS,GAAGV,YAAY,EAAE;EAEhC,IAAI0B,KAAK,EAAE;IACP,OACI;MACAhC,KAAA,CAAAkB,aAAA,CAACf,SAAS;QAAA,qBACa6B,KAAK,CAACK,OAAO,GAAGL,KAAK,CAACK,OAAO,GAAGL,KAAK;QACxDM,IAAI,EAAC,cAAc;QACnBC,KAAK,EAAC,OAAO;QACbC,QAAQ,EAAC;MAAO;MAEpB;IAAA;;EAGR;EACA;EACA;EACA,IAAIN,SAAS,EAAE;IACX,OAAOlC,KAAA,CAAAkB,aAAA,CAACR,cAAc,OAAG;;EAE7B,IAAI,CAACyB,eAAe,EAAE;IAClB,OAAOpB,SAAS,GACZf,KAAA,CAAAkB,aAAA,CAACjB,UAAU;MAACkB,SAAS,EAAC,MAAM;MAACC,OAAO,EAAC;IAAO,GACvCL,SAAS,IAAIC,SAAS,CAACD,SAAS,EAAE;MAAEM,CAAC,EAAEN;IAAS,CAAE,CAAC,CAC3C,GACb,IAAI;;EAGZ,IAAI0B,KAAK,GAAGd,QAAQ,IAChB3B,KAAA,CAAAkB,aAAA,CAACjB,UAAU;IAACkB,SAAS,EAAC,MAAM;IAACC,OAAO,EAAC;EAAO,GACvCgB,uBAAuB,CAACD,eAAe,CAAC,CAEhD;EAED,IAAIF,IAAI,EAAE;IACN,OACIjC,KAAA,CAAAkB,aAAA,CAACwB,IAAI;MAACd,SAAS,EAAEA,SAAS;MAAEE,EAAE,EAAEA;IAAE,GAC9B9B,KAAA,CAAAkB,aAAA,CAACd,qBAAqB;MAACuC,KAAK,EAAER;IAAe,GACzCnC,KAAA,CAAAkB,aAAA,CAACP,IAAI;MACDiC,EAAE,EAAEX,IAAI;MACRL,SAAS,EAAEiB,qBAAqB,CAACZ,IAAI;MACrCa,OAAO,EAAEtB,eAAe;MACxBuB,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAI;IAAE,GAE5BP,KAAK,CACH,CACa,CACrB;;EAIf,OACIzC,KAAA,CAAAkB,aAAA,CAACwB,IAAI;IAACd,SAAS,EAAEA,SAAS;IAAEE,EAAE,EAAEA;EAAE,GAC9B9B,KAAA,CAAAkB,aAAA,CAACd,qBAAqB;IAACuC,KAAK,EAAER;EAAe,GACxCM,KAAK,CACc,CACrB;AAEf,CAAC;AAcD,IAAMlB,sBAAsB,GAAGX,WAAW,CAACc,kBAAkB,CAAC;AAE9D,IAAMuB,MAAM,GAAG,kBAAkB;AAEjC,OAAO,IAAMJ,qBAAqB,GAAG;EACjCZ,IAAI,EAAE,GAAAiB,MAAA,CAAGD,MAAM;CAClB;AAED,IAAMP,IAAI,GAAGxC,MAAM,CAAC,MAAM,EAAE;EACxBiD,IAAI,EAAEF,MAAM;EACZG,iBAAiB,EAAE,SAAAA,CAACtC,KAAK,EAAEuC,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAACvB,EAAS;;MAAPwB,KAAK,GAAAxB,EAAA,CAAAwB,KAAA;EAAO,OAAAC,EAAA;IACdC,UAAU,EAAE;KACZD,EAAA,CAAC,MAAAN,MAAA,CAAML,qBAAqB,CAACZ,IAAI,CAAE,IAAG;IAClC,OAAO,EAAE;MACLM,KAAK,EAAEgB,KAAK,CAACG,OAAO,CAACC,OAAO,CAACC;;GAEpC,E;AANa,CAOhB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}