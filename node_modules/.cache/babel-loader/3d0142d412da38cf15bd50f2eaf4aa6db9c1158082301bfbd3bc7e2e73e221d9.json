{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Typography } from '@mui/material';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { genericMemo } from './genericMemo';\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nvar DateFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    locales = props.locales,\n    options = props.options,\n    _a = props.showTime,\n    showTime = _a === void 0 ? false : _a,\n    _b = props.showDate,\n    showDate = _b === void 0 ? true : _b,\n    _c = props.transform,\n    transform = _c === void 0 ? defaultTransform : _c,\n    rest = __rest(props, [\"className\", \"emptyText\", \"locales\", \"options\", \"showTime\", \"showDate\", \"transform\"]);\n  var translate = useTranslate();\n  if (!showTime && !showDate) {\n    throw new Error('<DateField> cannot have showTime and showDate false at the same time');\n  }\n  var value = useFieldValue(props);\n  if (value == null || value === '') {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var date = transform(value);\n  var dateString = '';\n  if (date) {\n    if (showTime && showDate) {\n      dateString = toLocaleStringSupportsLocales ? date.toLocaleString(locales, options) : date.toLocaleString();\n    } else if (showDate) {\n      // If input is a date string (e.g. '2022-02-15') without time and time zone,\n      // force timezone to UTC to fix issue with people in negative time zones\n      // who may see a different date when calling toLocaleDateString().\n      var dateOptions = options !== null && options !== void 0 ? options : typeof value === 'string' && value.length <= 10 ? {\n        timeZone: 'UTC'\n      } : undefined;\n      dateString = toLocaleStringSupportsLocales ? date.toLocaleDateString(locales, dateOptions) : date.toLocaleDateString();\n    } else if (showTime) {\n      dateString = toLocaleStringSupportsLocales ? date.toLocaleTimeString(locales, options) : date.toLocaleTimeString();\n    }\n  }\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), dateString);\n};\nDateFieldImpl.displayName = 'DateFieldImpl';\nexport var DateField = genericMemo(DateFieldImpl);\nvar defaultTransform = function (value) {\n  return value instanceof Date ? value : typeof value === 'string' || typeof value === 'number' ? new Date(value) : undefined;\n};\nvar toLocaleStringSupportsLocales = function () {\n  // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n  try {\n    new Date().toLocaleString('i');\n  } catch (error) {\n    return error instanceof RangeError;\n  }\n  return false;\n}();","map":{"version":3,"names":["React","Typography","useFieldValue","useTranslate","sanitizeFieldRestProps","genericMemo","DateFieldImpl","props","className","emptyText","locales","options","_a","showTime","_b","showDate","_c","transform","defaultTransform","rest","__rest","translate","Error","value","createElement","__assign","component","variant","_","date","dateString","toLocaleStringSupportsLocales","toLocaleString","dateOptions","length","timeZone","undefined","toLocaleDateString","toLocaleTimeString","displayName","DateField","Date","error","RangeError"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/DateField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Typography, TypographyProps } from '@mui/material';\nimport { useFieldValue, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nconst DateFieldImpl = <\n    RecordType extends Record<string, any> = Record<string, any>,\n>(\n    props: DateFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        locales,\n        options,\n        showTime = false,\n        showDate = true,\n        transform = defaultTransform,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n\n    if (!showTime && !showDate) {\n        throw new Error(\n            '<DateField> cannot have showTime and showDate false at the same time'\n        );\n    }\n\n    const value = useFieldValue(props);\n    if (value == null || value === '') {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    const date = transform(value);\n\n    let dateString = '';\n    if (date) {\n        if (showTime && showDate) {\n            dateString = toLocaleStringSupportsLocales\n                ? date.toLocaleString(locales, options)\n                : date.toLocaleString();\n        } else if (showDate) {\n            // If input is a date string (e.g. '2022-02-15') without time and time zone,\n            // force timezone to UTC to fix issue with people in negative time zones\n            // who may see a different date when calling toLocaleDateString().\n            const dateOptions =\n                options ??\n                (typeof value === 'string' && value.length <= 10\n                    ? { timeZone: 'UTC' }\n                    : undefined);\n            dateString = toLocaleStringSupportsLocales\n                ? date.toLocaleDateString(locales, dateOptions)\n                : date.toLocaleDateString();\n        } else if (showTime) {\n            dateString = toLocaleStringSupportsLocales\n                ? date.toLocaleTimeString(locales, options)\n                : date.toLocaleTimeString();\n        }\n    }\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {dateString}\n        </Typography>\n    );\n};\nDateFieldImpl.displayName = 'DateFieldImpl';\n\nexport const DateField = genericMemo(DateFieldImpl);\n\nexport interface DateFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    locales?: Intl.LocalesArgument;\n    options?: Intl.DateTimeFormatOptions;\n    showTime?: boolean;\n    showDate?: boolean;\n    transform?: (value: any) => Date;\n}\n\nconst defaultTransform = value =>\n    value instanceof Date\n        ? value\n        : typeof value === 'string' || typeof value === 'number'\n          ? new Date(value)\n          : undefined;\n\nconst toLocaleStringSupportsLocales = (() => {\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n    try {\n        new Date().toLocaleString('i');\n    } catch (error) {\n        return error instanceof RangeError;\n    }\n    return false;\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}