{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { ResettableTextField } from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n/**\n * An Input component for a string\n *\n * @example\n * <TextInput source=\"first_name\" />\n *\n * You can customize the `type` props (which defaults to \"text\").\n * Note that, due to a React bug, you should use `<NumberField>` instead of using type=\"number\".\n * @example\n * <TextInput source=\"email\" type=\"email\" />\n * <NumberInput source=\"nb_views\" />\n *\n */\nexport var TextInput = function (props) {\n  var className = props.className,\n    defaultValue = props.defaultValue,\n    label = props.label,\n    format = props.format,\n    helperText = props.helperText,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    parse = props.parse,\n    resource = props.resource,\n    source = props.source,\n    validate = props.validate,\n    rest = __rest(props, [\"className\", \"defaultValue\", \"label\", \"format\", \"helperText\", \"onBlur\", \"onChange\", \"parse\", \"resource\", \"source\", \"validate\"]);\n  var _a = useInput(__assign({\n      defaultValue: defaultValue,\n      format: format,\n      parse: parse,\n      resource: resource,\n      source: source,\n      type: 'text',\n      validate: validate,\n      onBlur: onBlur,\n      onChange: onChange\n    }, rest)),\n    field = _a.field,\n    _b = _a.fieldState,\n    error = _b.error,\n    invalid = _b.invalid,\n    id = _a.id,\n    isRequired = _a.isRequired;\n  var renderHelperText = helperText !== false || invalid;\n  return React.createElement(ResettableTextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    label: label !== '' && label !== false ? React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }) : null,\n    error: invalid,\n    helperText: renderHelperText ? React.createElement(InputHelperText, {\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }) : null\n  }, sanitizeInputRestProps(rest)));\n};","map":{"version":3,"names":["React","clsx","useInput","FieldTitle","ResettableTextField","InputHelperText","sanitizeInputRestProps","TextInput","props","className","defaultValue","label","format","helperText","onBlur","onChange","parse","resource","source","validate","rest","__rest","_a","__assign","type","field","_b","fieldState","error","invalid","id","isRequired","renderHelperText","createElement","concat","message"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport {\n    ResettableTextField,\n    ResettableTextFieldProps,\n} from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\n/**\n * An Input component for a string\n *\n * @example\n * <TextInput source=\"first_name\" />\n *\n * You can customize the `type` props (which defaults to \"text\").\n * Note that, due to a React bug, you should use `<NumberField>` instead of using type=\"number\".\n * @example\n * <TextInput source=\"email\" type=\"email\" />\n * <NumberInput source=\"nb_views\" />\n *\n */\nexport const TextInput = (props: TextInputProps) => {\n    const {\n        className,\n        defaultValue,\n        label,\n        format,\n        helperText,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest\n    } = props;\n    const {\n        field,\n        fieldState: { error, invalid },\n        id,\n        isRequired,\n    } = useInput({\n        defaultValue,\n        format,\n        parse,\n        resource,\n        source,\n        type: 'text',\n        validate,\n        onBlur,\n        onChange,\n        ...rest,\n    });\n\n    const renderHelperText = helperText !== false || invalid;\n\n    return (\n        <ResettableTextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            label={\n                label !== '' && label !== false ? (\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                ) : null\n            }\n            error={invalid}\n            helperText={\n                renderHelperText ? (\n                    <InputHelperText\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                ) : null\n            }\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nexport type TextInputProps = CommonInputProps &\n    Omit<ResettableTextFieldProps, 'label' | 'helperText'>;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,QAAQ,EAAEC,UAAU,QAAQ,SAAS;AAG9C,SACIC,mBAAmB,QAEhB,uBAAuB;AAC9B,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE;;;;;;;;;;;;;AAaA,OAAO,IAAMC,SAAS,GAAG,SAAAA,CAACC,KAAqB;EAEvC,IAAAC,SAAS,GAYTD,KAAK,CAAAC,SAZI;IACTC,YAAY,GAWZF,KAAK,CAAAE,YAXO;IACZC,KAAK,GAULH,KAAK,CAAAG,KAVA;IACLC,MAAM,GASNJ,KAAK,CAAAI,MATC;IACNC,UAAU,GAQVL,KAAK,CAAAK,UARK;IACVC,MAAM,GAONN,KAAK,CAAAM,MAPC;IACNC,QAAQ,GAMRP,KAAK,CAAAO,QANG;IACRC,KAAK,GAKLR,KAAK,CAAAQ,KALA;IACLC,QAAQ,GAIRT,KAAK,CAAAS,QAJG;IACRC,MAAM,GAGNV,KAAK,CAAAU,MAHC;IACNC,QAAQ,GAERX,KAAK,CAAAW,QAFG;IACLC,IAAI,GAAAC,MAAA,CACPb,KAAK,EAbH,+HAaL,CADU;EAEL,IAAAc,EAAA,GAKFpB,QAAQ,CAAAqB,QAAA;MACRb,YAAY,EAAAA,YAAA;MACZE,MAAM,EAAAA,MAAA;MACNI,KAAK,EAAAA,KAAA;MACLC,QAAQ,EAAAA,QAAA;MACRC,MAAM,EAAAA,MAAA;MACNM,IAAI,EAAE,MAAM;MACZL,QAAQ,EAAAA,QAAA;MACRL,MAAM,EAAAA,MAAA;MACNC,QAAQ,EAAAA;IAAA,GACLK,IAAI,EACT;IAfEK,KAAK,GAAAH,EAAA,CAAAG,KAAA;IACLC,EAAA,GAAAJ,EAAA,CAAAK,UAA8B;IAAhBC,KAAK,GAAAF,EAAA,CAAAE,KAAA;IAAEC,OAAO,GAAAH,EAAA,CAAAG,OAAA;IAC5BC,EAAE,GAAAR,EAAA,CAAAQ,EAAA;IACFC,UAAU,GAAAT,EAAA,CAAAS,UAYZ;EAEF,IAAMC,gBAAgB,GAAGnB,UAAU,KAAK,KAAK,IAAIgB,OAAO;EAExD,OACI7B,KAAA,CAAAiC,aAAA,CAAC7B,mBAAmB,EAAAmB,QAAA;IAChBO,EAAE,EAAEA;EAAE,GACFL,KAAK;IACThB,SAAS,EAAER,IAAI,CAAC,UAAU,EAAE,YAAAiC,MAAA,CAAYhB,MAAM,CAAE,EAAET,SAAS,CAAC;IAC5DE,KAAK,EACDA,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,KAAK,GAC3BX,KAAA,CAAAiC,aAAA,CAAC9B,UAAU;MACPQ,KAAK,EAAEA,KAAK;MACZO,MAAM,EAAEA,MAAM;MACdD,QAAQ,EAAEA,QAAQ;MAClBc,UAAU,EAAEA;IAAU,EACxB,GACF,IAAI;IAEZH,KAAK,EAAEC,OAAO;IACdhB,UAAU,EACNmB,gBAAgB,GACZhC,KAAA,CAAAiC,aAAA,CAAC5B,eAAe;MACZuB,KAAK,EAAEA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEO,OAAO;MACrBtB,UAAU,EAAEA;IAAU,EACxB,GACF;EAAI,GAERP,sBAAsB,CAACc,IAAI,CAAC,EAClC;AAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}