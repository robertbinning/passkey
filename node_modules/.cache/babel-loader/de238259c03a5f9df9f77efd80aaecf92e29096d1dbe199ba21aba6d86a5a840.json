{"ast":null,"code":"import { useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useNotificationContext } from '../notification';\nimport { useBasename } from '../routing';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nvar useLogin = function () {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var locationState = location.state;\n  var navigate = useNavigate();\n  var basename = useBasename();\n  var resetNotifications = useNotificationContext().resetNotifications;\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var afterLoginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.afterLoginUrl));\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n    if (authProvider) {\n      return authProvider.login(params).then(function (ret) {\n        resetNotifications();\n        if (ret && ret.hasOwnProperty('redirectTo')) {\n          if (ret) {\n            navigate(ret.redirectTo);\n          }\n        } else {\n          var redirectUrl = pathName ? pathName : nextPathName + nextSearch || afterLoginUrl;\n          navigate(redirectUrl);\n        }\n        return ret;\n      });\n    } else {\n      resetNotifications();\n      navigate(afterLoginUrl);\n      return Promise.resolve();\n    }\n  }, [authProvider, navigate, nextPathName, nextSearch, resetNotifications, afterLoginUrl]);\n  return login;\n};\nexport default useLogin;","map":{"version":3,"names":["useCallback","useLocation","useNavigate","useNotificationContext","useBasename","useAuthProvider","defaultAuthParams","removeDoubleSlashes","useLogin","authProvider","location","locationState","state","navigate","basename","resetNotifications","nextPathName","nextPathname","nextSearch","afterLoginUrl","concat","login","params","pathName","then","ret","hasOwnProperty","redirectTo","redirectUrl","Promise","resolve"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/auth/useLogin.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { useNotificationContext } from '../notification';\nimport { useBasename } from '../routing';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nconst useLogin = (): Login => {\n    const authProvider = useAuthProvider();\n    const location = useLocation();\n    const locationState = location.state as any;\n    const navigate = useNavigate();\n    const basename = useBasename();\n    const { resetNotifications } = useNotificationContext();\n    const nextPathName = locationState && locationState.nextPathname;\n    const nextSearch = locationState && locationState.nextSearch;\n    const afterLoginUrl = removeDoubleSlashes(\n        `${basename}/${defaultAuthParams.afterLoginUrl}`\n    );\n\n    const login = useCallback(\n        (params: any = {}, pathName) => {\n            if (authProvider) {\n                return authProvider.login(params).then(ret => {\n                    resetNotifications();\n                    if (ret && ret.hasOwnProperty('redirectTo')) {\n                        if (ret) {\n                            navigate(ret.redirectTo);\n                        }\n                    } else {\n                        const redirectUrl = pathName\n                            ? pathName\n                            : nextPathName + nextSearch || afterLoginUrl;\n                        navigate(redirectUrl);\n                    }\n                    return ret;\n                });\n            } else {\n                resetNotifications();\n                navigate(afterLoginUrl);\n                return Promise.resolve();\n            }\n        },\n        [\n            authProvider,\n            navigate,\n            nextPathName,\n            nextSearch,\n            resetNotifications,\n            afterLoginUrl,\n        ]\n    );\n\n    return login;\n};\n\n/**\n * Log a user in by calling the authProvider.login() method\n *\n * @param {Object} params Login parameters to pass to the authProvider. May contain username/email, password, etc\n * @param {string} pathName The path to redirect to after login. By default, redirects to the home page, or to the last page visited after disconnection.\n *\n * @return {Promise} The authProvider response\n */\ntype Login = (params: any, pathName?: string) => Promise<any>;\n\nexport default useLogin;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAOC,eAAe,IAAIC,iBAAiB,QAAQ,mBAAmB;AACtE,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMC,QAAQ,GAAG,SAAAA,CAAA;EACb,IAAMC,YAAY,GAAGJ,eAAe,EAAE;EACtC,IAAMK,QAAQ,GAAGT,WAAW,EAAE;EAC9B,IAAMU,aAAa,GAAGD,QAAQ,CAACE,KAAY;EAC3C,IAAMC,QAAQ,GAAGX,WAAW,EAAE;EAC9B,IAAMY,QAAQ,GAAGV,WAAW,EAAE;EACtB,IAAAW,kBAAkB,GAAKZ,sBAAsB,EAAE,CAAAY,kBAA7B;EAC1B,IAAMC,YAAY,GAAGL,aAAa,IAAIA,aAAa,CAACM,YAAY;EAChE,IAAMC,UAAU,GAAGP,aAAa,IAAIA,aAAa,CAACO,UAAU;EAC5D,IAAMC,aAAa,GAAGZ,mBAAmB,CACrC,GAAAa,MAAA,CAAGN,QAAQ,OAAAM,MAAA,CAAId,iBAAiB,CAACa,aAAa,CAAE,CACnD;EAED,IAAME,KAAK,GAAGrB,WAAW,CACrB,UAACsB,MAAgB,EAAEC,QAAQ;IAA1B,IAAAD,MAAA;MAAAA,MAAA,KAAgB;IAAA;IACb,IAAIb,YAAY,EAAE;MACd,OAAOA,YAAY,CAACY,KAAK,CAACC,MAAM,CAAC,CAACE,IAAI,CAAC,UAAAC,GAAG;QACtCV,kBAAkB,EAAE;QACpB,IAAIU,GAAG,IAAIA,GAAG,CAACC,cAAc,CAAC,YAAY,CAAC,EAAE;UACzC,IAAID,GAAG,EAAE;YACLZ,QAAQ,CAACY,GAAG,CAACE,UAAU,CAAC;;SAE/B,MAAM;UACH,IAAMC,WAAW,GAAGL,QAAQ,GACtBA,QAAQ,GACRP,YAAY,GAAGE,UAAU,IAAIC,aAAa;UAChDN,QAAQ,CAACe,WAAW,CAAC;;QAEzB,OAAOH,GAAG;MACd,CAAC,CAAC;KACL,MAAM;MACHV,kBAAkB,EAAE;MACpBF,QAAQ,CAACM,aAAa,CAAC;MACvB,OAAOU,OAAO,CAACC,OAAO,EAAE;;EAEhC,CAAC,EACD,CACIrB,YAAY,EACZI,QAAQ,EACRG,YAAY,EACZE,UAAU,EACVH,kBAAkB,EAClBI,aAAa,CAChB,CACJ;EAED,OAAOE,KAAK;AAChB,CAAC;AAYD,eAAeb,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}