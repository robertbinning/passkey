{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useResourceContext, usePreference, useStore, useTranslate } from 'ra-core';\nimport { Configurable } from '../preferences';\nimport { SimpleForm } from './SimpleForm';\nimport { SimpleFormEditor } from './SimpleFormEditor';\nexport var SimpleFormConfigurable = function (_a) {\n  var preferenceKey = _a.preferenceKey,\n    omit = _a.omit,\n    props = __rest(_a, [\"preferenceKey\", \"omit\"]);\n  var translate = useTranslate();\n  var resource = useResourceContext(props);\n  var finalPreferenceKey = preferenceKey || \"\".concat(resource, \".simpleForm\");\n  var _b = useStore(\"preferences.\".concat(finalPreferenceKey, \".availableInputs\"), EMPTY_ARRAY),\n    availableInputs = _b[0],\n    setAvailableInputs = _b[1];\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _c = useStore(\"preferences.\".concat(finalPreferenceKey, \".omit\"), omit),\n    _ = _c[0],\n    setOmit = _c[1];\n  React.useEffect(function () {\n    var _a, _b;\n    // first render, or the preference have been cleared\n    var inputs = (_b = (_a = React.Children.map(props.children, function (child, index) {\n      return React.isValidElement(child) ? {\n        index: String(index),\n        source: child.props.source,\n        label: child.props.source || child.props.label ? child.props.label : translate('ra.configurable.SimpleForm.unlabeled', {\n          input: index,\n          _: \"Unlabeled input #%{input}\"\n        })\n      } : null;\n    })) === null || _a === void 0 ? void 0 : _a.filter(function (column) {\n      return column != null;\n    })) !== null && _b !== void 0 ? _b : EMPTY_ARRAY;\n    if (inputs.length !== availableInputs.length) {\n      setAvailableInputs(inputs);\n      setOmit(omit || EMPTY_ARRAY);\n    }\n  }, [availableInputs]); // eslint-disable-line react-hooks/exhaustive-deps\n  return React.createElement(Configurable, {\n    editor: React.createElement(SimpleFormEditor, null),\n    preferenceKey: finalPreferenceKey,\n    sx: {\n      display: 'block',\n      '&.RaConfigurable-editMode': {\n        margin: '2px'\n      }\n    }\n  }, React.createElement(SimpleFormWithPreferences, __assign({}, props)));\n};\nvar EMPTY_ARRAY = [];\n/**\n * This SimpleForm filters its children depending on preferences\n */\nvar SimpleFormWithPreferences = function (_a) {\n  var children = _a.children,\n    props = __rest(_a, [\"children\"]);\n  var availableInputs = usePreference('availableInputs', [])[0];\n  var omit = usePreference('omit', [])[0];\n  var inputs = usePreference('inputs', availableInputs.filter(function (input) {\n    return !(omit === null || omit === void 0 ? void 0 : omit.includes(input.source));\n  }).map(function (input) {\n    return input.index;\n  }))[0];\n  var childrenArray = React.Children.toArray(children);\n  return React.createElement(SimpleForm, __assign({}, props), inputs === undefined ? children : inputs.map(function (index) {\n    return childrenArray[index];\n  }));\n};","map":{"version":3,"names":["React","useResourceContext","usePreference","useStore","useTranslate","Configurable","SimpleForm","SimpleFormEditor","SimpleFormConfigurable","_a","preferenceKey","omit","props","__rest","translate","resource","finalPreferenceKey","concat","_b","EMPTY_ARRAY","availableInputs","setAvailableInputs","_c","_","setOmit","useEffect","inputs","Children","map","children","child","index","isValidElement","String","source","label","input","filter","column","length","createElement","editor","sx","display","margin","SimpleFormWithPreferences","__assign","includes","childrenArray","toArray","undefined"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/form/SimpleFormConfigurable.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    useResourceContext,\n    usePreference,\n    useStore,\n    useTranslate,\n} from 'ra-core';\n\nimport { Configurable } from '../preferences';\nimport { SimpleForm, SimpleFormProps } from './SimpleForm';\nimport { SimpleFormEditor } from './SimpleFormEditor';\n\nexport const SimpleFormConfigurable = ({\n    preferenceKey,\n    omit,\n    ...props\n}: SimpleFormConfigurableProps) => {\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const finalPreferenceKey = preferenceKey || `${resource}.simpleForm`;\n\n    const [availableInputs, setAvailableInputs] = useStore<\n        SimpleFormConfigurableColumn[]\n    >(`preferences.${finalPreferenceKey}.availableInputs`, EMPTY_ARRAY);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, setOmit] = useStore<string[]>(\n        `preferences.${finalPreferenceKey}.omit`,\n        omit\n    );\n\n    React.useEffect(() => {\n        // first render, or the preference have been cleared\n        const inputs =\n            React.Children.map(props.children, (child, index) =>\n                React.isValidElement(child)\n                    ? {\n                          index: String(index),\n                          source: child.props.source,\n                          label:\n                              child.props.source || child.props.label\n                                  ? child.props.label\n                                  : translate(\n                                        'ra.configurable.SimpleForm.unlabeled',\n                                        {\n                                            input: index,\n                                            _: `Unlabeled input #%{input}`,\n                                        }\n                                    ),\n                      }\n                    : null\n            )?.filter(column => column != null) ?? EMPTY_ARRAY;\n        if (inputs.length !== availableInputs.length) {\n            setAvailableInputs(inputs);\n            setOmit(omit || EMPTY_ARRAY);\n        }\n    }, [availableInputs]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <Configurable\n            editor={<SimpleFormEditor />}\n            preferenceKey={finalPreferenceKey}\n            sx={{\n                display: 'block',\n                '&.RaConfigurable-editMode': {\n                    margin: '2px',\n                },\n            }}\n        >\n            <SimpleFormWithPreferences {...props} />\n        </Configurable>\n    );\n};\n\nconst EMPTY_ARRAY: any[] = [];\n\nexport interface SimpleFormConfigurableProps extends SimpleFormProps {\n    /**\n     * Key to use to store the user's preferences for this SimpleForm.\n     *\n     * Set to '[resource].simpleForm' by default. Pass a custom key if you need\n     * to display more than one SimpleFormConfigurable per resource.\n     */\n    preferenceKey?: string;\n    /**\n     * columns to hide by default\n     *\n     * @example\n     * // by default, hide the id and author columns\n     * // users can choose to show show them in configuration mode\n     * const PostEdit = () => (\n     *     <Edit>\n     *         <SimpleFormConfigurable omit={['id', 'author']}>\n     *             <TextInput source=\"id\" />\n     *             <TextInput source=\"title\" />\n     *             <TextInput source=\"author\" />\n     *             <TextInput source=\"year\" />\n     *         </SimpleFormConfigurable>\n     *     </Edit>\n     * );\n     */\n    omit?: string[];\n}\n\nexport interface SimpleFormConfigurableColumn {\n    index: string;\n    source: string;\n    label?: string;\n}\n\n/**\n * This SimpleForm filters its children depending on preferences\n */\nconst SimpleFormWithPreferences = ({ children, ...props }: SimpleFormProps) => {\n    const [availableInputs] = usePreference<SimpleFormConfigurableColumn[]>(\n        'availableInputs',\n        []\n    );\n    const [omit] = usePreference<string[]>('omit', []);\n    const [inputs] = usePreference(\n        'inputs',\n        availableInputs\n            .filter(input => !omit?.includes(input.source))\n            .map(input => input.index)\n    );\n    const childrenArray = React.Children.toArray(children);\n    return (\n        <SimpleForm {...props}>\n            {inputs === undefined\n                ? children\n                : inputs.map(index => childrenArray[index])}\n        </SimpleForm>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}