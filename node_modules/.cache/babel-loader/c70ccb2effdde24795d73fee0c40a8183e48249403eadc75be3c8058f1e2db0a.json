{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport { ReferenceInputBase } from 'ra-core';\nimport { AutocompleteInput } from './AutocompleteInput';\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then renders an `<AutocompleteInput>`,\n * to which it passes the possible choices via a `ChoicesContext`.\n *\n * You can pass a child select component to customize the way the reference\n * selector is displayed (e.g. using `<SelectInput>` or `<RadioButtonGroupInput>`\n * instead of `<AutocompleteInput>`).\n *\n * @example // default selector: AutocompleteInput\n * export const CommentEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example // using a SelectInput as selector\n * export const CommentEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput source=\"post_id\" reference=\"posts\" perPage={100}/>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}\n * />\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}\n * />\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport var ReferenceInput = function (props) {\n  var _a = props.children,\n    children = _a === void 0 ? defaultChildren : _a,\n    rest = __rest(props, [\"children\"]);\n  if (props.validate) {\n    throw new Error('<ReferenceInput> does not accept a validate prop. Set the validate prop on the child instead.');\n  }\n  return React.createElement(ReferenceInputBase, __assign({}, rest), children);\n};\nvar defaultChildren = React.createElement(AutocompleteInput, null);","map":{"version":3,"names":["React","ReferenceInputBase","AutocompleteInput","ReferenceInput","props","_a","children","defaultChildren","rest","__rest","validate","Error","createElement","__assign"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/ReferenceInput.tsx"],"sourcesContent":["import React from 'react';\nimport { ReferenceInputBase, ReferenceInputBaseProps } from 'ra-core';\n\nimport { AutocompleteInput } from './AutocompleteInput';\n\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then renders an `<AutocompleteInput>`,\n * to which it passes the possible choices via a `ChoicesContext`.\n *\n * You can pass a child select component to customize the way the reference\n * selector is displayed (e.g. using `<SelectInput>` or `<RadioButtonGroupInput>`\n * instead of `<AutocompleteInput>`).\n *\n * @example // default selector: AutocompleteInput\n * export const CommentEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example // using a SelectInput as selector\n * export const CommentEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput source=\"post_id\" reference=\"posts\" perPage={100}/>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}\n * />\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}\n * />\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport const ReferenceInput = (props: ReferenceInputProps) => {\n    const { children = defaultChildren, ...rest } = props;\n\n    if (props.validate) {\n        throw new Error(\n            '<ReferenceInput> does not accept a validate prop. Set the validate prop on the child instead.'\n        );\n    }\n\n    return <ReferenceInputBase {...rest}>{children}</ReferenceInputBase>;\n};\n\nconst defaultChildren = <AutocompleteInput />;\n\nexport interface ReferenceInputProps extends ReferenceInputBaseProps {\n    /**\n     * Call validate on the child component instead\n     */\n    validate?: never;\n    [key: string]: any;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAiC,SAAS;AAErE,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAACC,KAA0B;EAC7C,IAAAC,EAAA,GAAwCD,KAAK,CAAAE,QAAnB;IAA1BA,QAAQ,GAAAD,EAAA,cAAGE,eAAe,GAAAF,EAAA;IAAKG,IAAI,GAAAC,MAAA,CAAKL,KAAK,EAA/C,YAAuC,CAAF;EAE3C,IAAIA,KAAK,CAACM,QAAQ,EAAE;IAChB,MAAM,IAAIC,KAAK,CACX,+FAA+F,CAClG;;EAGL,OAAOX,KAAA,CAAAY,aAAA,CAACX,kBAAkB,EAAAY,QAAA,KAAKL,IAAI,GAAGF,QAAQ,CAAsB;AACxE,CAAC;AAED,IAAMC,eAAe,GAAGP,KAAA,CAAAY,aAAA,CAACV,iBAAiB,OAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}