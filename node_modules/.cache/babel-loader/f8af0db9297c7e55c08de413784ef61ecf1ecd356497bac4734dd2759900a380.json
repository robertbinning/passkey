{"ast":null,"code":"\"use strict\";\n\n/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transform = exports.ordinalize = exports.foreignKey = exports.classify = exports.tableize = exports.demodulize = exports.titleize = exports.dasherize = exports.capitalize = exports.humanize = exports.underscore = exports.camelize = exports.inflect = exports.singularize = exports.pluralize = void 0;\n/**\n * @description This is a list of nouns that use the same form for both singular and plural.\n *              This list should remain entirely in lower case to correctly match Strings.\n */\nconst uncountableWords = [\n// 'access',\n'accommodation', 'adulthood', 'advertising', 'advice', 'aggression', 'aid', 'air', 'aircraft', 'alcohol', 'anger', 'applause', 'arithmetic',\n// 'art',\n'assistance', 'athletics',\n// 'attention',\n'bacon', 'baggage',\n// 'ballet',\n// 'beauty',\n'beef',\n// 'beer',\n// 'behavior',\n'biology',\n// 'billiards',\n'blood', 'botany',\n// 'bowels',\n'bread',\n// 'business',\n'butter', 'carbon', 'cardboard', 'cash', 'chalk', 'chaos', 'chess', 'crossroads', 'countryside',\n// 'damage',\n'dancing',\n// 'danger',\n'deer',\n// 'delight',\n// 'dessert',\n'dignity', 'dirt',\n// 'distribution',\n'dust', 'economics', 'education', 'electricity',\n// 'employment',\n// 'energy',\n'engineering', 'enjoyment',\n// 'entertainment',\n'envy', 'equipment', 'ethics', 'evidence', 'evolution',\n// 'failure',\n// 'faith',\n'fame', 'fiction',\n// 'fish',\n'flour', 'flu', 'food',\n// 'freedom',\n// 'fruit',\n'fuel', 'fun',\n// 'funeral',\n'furniture', 'gallows', 'garbage', 'garlic',\n// 'gas',\n'genetics',\n// 'glass',\n'gold', 'golf', 'gossip',\n// 'grass',\n'gratitude', 'grief',\n// 'ground',\n'guilt', 'gymnastics',\n// 'hair',\n'happiness', 'hardware', 'harm', 'hate', 'hatred', 'health', 'heat',\n// 'height',\n'help', 'homework', 'honesty', 'honey', 'hospitality', 'housework', 'humour', 'hunger', 'hydrogen', 'ice', 'importance', 'inflation', 'information',\n// 'injustice',\n'innocence',\n// 'intelligence',\n'iron', 'irony', 'jam',\n// 'jealousy',\n// 'jelly',\n'jewelry',\n// 'joy',\n'judo',\n// 'juice',\n// 'justice',\n'karate',\n// 'kindness',\n'knowledge',\n// 'labour',\n'lack',\n// 'land',\n'laughter', 'lava', 'leather', 'leisure', 'lightning', 'linguine', 'linguini', 'linguistics', 'literature', 'litter', 'livestock', 'logic', 'loneliness',\n// 'love',\n'luck', 'luggage', 'macaroni', 'machinery', 'magic',\n// 'mail',\n'management', 'mankind', 'marble', 'mathematics', 'mayonnaise', 'measles',\n// 'meat',\n// 'metal',\n'methane', 'milk', 'minus', 'money',\n// 'moose',\n'mud', 'music', 'mumps', 'nature', 'news', 'nitrogen', 'nonsense', 'nurture', 'nutrition', 'obedience', 'obesity',\n// 'oil',\n'oxygen',\n// 'paper',\n// 'passion',\n'pasta', 'patience',\n// 'permission',\n'physics', 'poetry', 'pollution', 'poverty',\n// 'power',\n'pride',\n// 'production',\n// 'progress',\n// 'pronunciation',\n'psychology', 'publicity', 'punctuation',\n// 'quality',\n// 'quantity',\n'quartz', 'racism',\n// 'rain',\n// 'recreation',\n'relaxation', 'reliability', 'research', 'respect', 'revenge', 'rice', 'rubbish', 'rum', 'safety',\n// 'salad',\n// 'salt',\n// 'sand',\n// 'satire',\n'scenery', 'seafood', 'seaside', 'series', 'shame', 'sheep', 'shopping',\n// 'silence',\n'sleep',\n// 'slang'\n'smoke', 'smoking', 'snow', 'soap', 'software', 'soil',\n// 'sorrow',\n// 'soup',\n'spaghetti',\n// 'speed',\n'species',\n// 'spelling',\n// 'sport',\n'steam',\n// 'strength',\n'stuff', 'stupidity',\n// 'success',\n// 'sugar',\n'sunshine', 'symmetry',\n// 'tea',\n'tennis', 'thirst', 'thunder', 'timber',\n// 'time',\n// 'toast',\n// 'tolerance',\n// 'trade',\n'traffic', 'transportation',\n// 'travel',\n'trust',\n// 'understanding',\n'underwear', 'unemployment', 'unity',\n// 'usage',\n'validity', 'veal', 'vegetation', 'vegetarianism', 'vengeance', 'violence',\n// 'vision',\n'vitality', 'warmth',\n// 'water',\n'wealth', 'weather',\n// 'weight',\n'welfare', 'wheat',\n// 'whiskey',\n// 'width',\n'wildlife',\n// 'wine',\n'wisdom',\n// 'wood',\n// 'wool',\n// 'work',\n// 'yeast',\n'yoga', 'zinc', 'zoology'];\n/**\n * @description These rules translate from the singular form of a noun to its plural form.\n */\nconst regex = {\n  plural: {\n    men: new RegExp('^(m|wom)en$', 'gi'),\n    people: new RegExp('(pe)ople$', 'gi'),\n    children: new RegExp('(child)ren$', 'gi'),\n    tia: new RegExp('([ti])a$', 'gi'),\n    analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),\n    databases: new RegExp('(database)s$', 'gi'),\n    drives: new RegExp('(drive)s$', 'gi'),\n    hives: new RegExp('(hi|ti)ves$', 'gi'),\n    curves: new RegExp('(curve)s$', 'gi'),\n    lrves: new RegExp('([lr])ves$', 'gi'),\n    aves: new RegExp('([a])ves$', 'gi'),\n    foves: new RegExp('([^fo])ves$', 'gi'),\n    movies: new RegExp('(m)ovies$', 'gi'),\n    aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),\n    series: new RegExp('(s)eries$', 'gi'),\n    xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),\n    mice: new RegExp('([m|l])ice$', 'gi'),\n    buses: new RegExp('(bus)es$', 'gi'),\n    oes: new RegExp('(o)es$', 'gi'),\n    shoes: new RegExp('(shoe)s$', 'gi'),\n    crises: new RegExp('(cris|ax|test)es$', 'gi'),\n    octopuses: new RegExp('(octop|vir)uses$', 'gi'),\n    aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),\n    summonses: new RegExp('^(summons|bonus)es$', 'gi'),\n    oxen: new RegExp('^(ox)en', 'gi'),\n    matrices: new RegExp('(matr)ices$', 'gi'),\n    vertices: new RegExp('(vert|ind)ices$', 'gi'),\n    feet: new RegExp('^feet$', 'gi'),\n    teeth: new RegExp('^teeth$', 'gi'),\n    geese: new RegExp('^geese$', 'gi'),\n    quizzes: new RegExp('(quiz)zes$', 'gi'),\n    whereases: new RegExp('^(whereas)es$', 'gi'),\n    criteria: new RegExp('^(criteri)a$', 'gi'),\n    genera: new RegExp('^genera$', 'gi'),\n    ss: new RegExp('ss$', 'gi'),\n    s: new RegExp('s$', 'gi')\n  },\n  singular: {\n    man: new RegExp('^(m|wom)an$', 'gi'),\n    person: new RegExp('(pe)rson$', 'gi'),\n    child: new RegExp('(child)$', 'gi'),\n    drive: new RegExp('(drive)$', 'gi'),\n    ox: new RegExp('^(ox)$', 'gi'),\n    axis: new RegExp('(ax|test)is$', 'gi'),\n    octopus: new RegExp('(octop|vir)us$', 'gi'),\n    alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),\n    summons: new RegExp('^(summons|bonus)$', 'gi'),\n    bus: new RegExp('(bu)s$', 'gi'),\n    buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),\n    tium: new RegExp('([ti])um$', 'gi'),\n    sis: new RegExp('sis$', 'gi'),\n    ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),\n    hive: new RegExp('(hi|ti)ve$', 'gi'),\n    aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),\n    x: new RegExp('(x|ch|ss|sh)$', 'gi'),\n    matrix: new RegExp('(matr)ix$', 'gi'),\n    vertex: new RegExp('(vert|ind)ex$', 'gi'),\n    mouse: new RegExp('([m|l])ouse$', 'gi'),\n    foot: new RegExp('^foot$', 'gi'),\n    tooth: new RegExp('^tooth$', 'gi'),\n    goose: new RegExp('^goose$', 'gi'),\n    quiz: new RegExp('(quiz)$', 'gi'),\n    whereas: new RegExp('^(whereas)$', 'gi'),\n    criterion: new RegExp('^(criteri)on$', 'gi'),\n    genus: new RegExp('^genus$', 'gi'),\n    s: new RegExp('s$', 'gi'),\n    common: new RegExp('$', 'gi')\n  }\n};\nconst pluralRules = [\n// do not replace if its already a plural word\n[regex.plural.men], [regex.plural.people], [regex.plural.children], [regex.plural.tia], [regex.plural.analyses], [regex.plural.databases], [regex.plural.drives], [regex.plural.hives], [regex.plural.curves], [regex.plural.lrves], [regex.plural.foves], [regex.plural.aeiouyies], [regex.plural.series], [regex.plural.movies], [regex.plural.xes], [regex.plural.mice], [regex.plural.buses], [regex.plural.oes], [regex.plural.shoes], [regex.plural.crises], [regex.plural.octopuses], [regex.plural.aliases], [regex.plural.summonses], [regex.plural.oxen], [regex.plural.matrices], [regex.plural.feet], [regex.plural.teeth], [regex.plural.geese], [regex.plural.quizzes], [regex.plural.whereases], [regex.plural.criteria], [regex.plural.genera],\n// original rule\n[regex.singular.man, '$1en'], [regex.singular.person, '$1ople'], [regex.singular.child, '$1ren'], [regex.singular.drive, '$1s'], [regex.singular.ox, '$1en'], [regex.singular.axis, '$1es'], [regex.singular.octopus, '$1uses'], [regex.singular.alias, '$1es'], [regex.singular.summons, '$1es'], [regex.singular.bus, '$1ses'], [regex.singular.buffalo, '$1oes'], [regex.singular.tium, '$1a'], [regex.singular.sis, 'ses'], [regex.singular.ffe, '$1$2ves'], [regex.singular.hive, '$1ves'], [regex.singular.aeiouyy, '$1ies'], [regex.singular.matrix, '$1ices'], [regex.singular.vertex, '$1ices'], [regex.singular.x, '$1es'], [regex.singular.mouse, '$1ice'], [regex.singular.foot, 'feet'], [regex.singular.tooth, 'teeth'], [regex.singular.goose, 'geese'], [regex.singular.quiz, '$1zes'], [regex.singular.whereas, '$1es'], [regex.singular.criterion, '$1a'], [regex.singular.genus, 'genera'], [regex.singular.s, 's'], [regex.singular.common, 's']];\n/**\n * @description These rules translate from the plural form of a noun to its singular form.\n */\nconst singularRules = [\n// do not replace if its already a singular word\n[regex.singular.man], [regex.singular.person], [regex.singular.child], [regex.singular.drive], [regex.singular.ox], [regex.singular.axis], [regex.singular.octopus], [regex.singular.alias], [regex.singular.summons], [regex.singular.bus], [regex.singular.buffalo], [regex.singular.tium], [regex.singular.sis], [regex.singular.ffe], [regex.singular.hive], [regex.singular.aeiouyy], [regex.singular.x], [regex.singular.matrix], [regex.singular.mouse], [regex.singular.foot], [regex.singular.tooth], [regex.singular.goose], [regex.singular.quiz], [regex.singular.whereas], [regex.singular.criterion], [regex.singular.genus],\n// original rule\n[regex.plural.men, '$1an'], [regex.plural.people, '$1rson'], [regex.plural.children, '$1'], [regex.plural.databases, '$1'], [regex.plural.drives, '$1'], [regex.plural.genera, 'genus'], [regex.plural.criteria, '$1on'], [regex.plural.tia, '$1um'], [regex.plural.analyses, '$1$2sis'], [regex.plural.hives, '$1ve'], [regex.plural.curves, '$1'], [regex.plural.lrves, '$1f'], [regex.plural.aves, '$1ve'], [regex.plural.foves, '$1fe'], [regex.plural.movies, '$1ovie'], [regex.plural.aeiouyies, '$1y'], [regex.plural.series, '$1eries'], [regex.plural.xes, '$1'], [regex.plural.mice, '$1ouse'], [regex.plural.buses, '$1'], [regex.plural.oes, '$1'], [regex.plural.shoes, '$1'], [regex.plural.crises, '$1is'], [regex.plural.octopuses, '$1us'], [regex.plural.aliases, '$1'], [regex.plural.summonses, '$1'], [regex.plural.oxen, '$1'], [regex.plural.matrices, '$1ix'], [regex.plural.vertices, '$1ex'], [regex.plural.feet, 'foot'], [regex.plural.teeth, 'tooth'], [regex.plural.geese, 'goose'], [regex.plural.quizzes, '$1'], [regex.plural.whereases, '$1'], [regex.plural.ss, 'ss'], [regex.plural.s, '']];\n/**\n * @description This is a list of words that should not be capitalized for title case.\n */\nconst nonTitlecasedWords = ['and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'];\n/**\n * @description These are regular expressions used for converting between String formats.\n */\nconst idSuffix = new RegExp('(_ids|_id)$', 'g');\nconst underbar = new RegExp('_', 'g');\nconst spaceOrUnderbar = new RegExp('[ _]', 'g');\nconst uppercase = new RegExp('([A-Z])', 'g');\nconst underbarPrefix = new RegExp('^_');\n/**\n * A helper method that applies rules based replacement to a String.\n * @param str String to modify and return based on the passed rules.\n * @param rules Regexp to match paired with String to use for replacement\n * @param skip Strings to skip if they match\n * @param override String to return as though this method succeeded (used to conform to APIs)\n * @returns Return passed String modified by passed rules.\n * @example\n *\n *     applyRules( 'cows', singular_rules ); // === 'cow'\n */\nfunction applyRules(str, rules, skip, override) {\n  if (override) {\n    return override;\n  } else {\n    if (skip.includes(str.toLocaleLowerCase())) {\n      return str;\n    }\n    for (const rule of rules) {\n      if (str.match(rule[0])) {\n        if (rule[1] !== undefined) {\n          return str.replace(rule[0], rule[1]);\n        }\n        return str;\n      }\n    }\n  }\n  return str;\n}\n/**\n * This function adds pluralization support to every String object.\n * @param str The subject string.\n * @param plural Overrides normal output with said String.(optional)\n * @returns Singular English language nouns are returned in plural form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.pluralize( 'person' ); // === 'people'\n *     inflection.pluralize( 'octopus' ); // === 'octopuses'\n *     inflection.pluralize( 'Hat' ); // === 'Hats'\n *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n */\nfunction pluralize(str, plural) {\n  return applyRules(str, pluralRules, uncountableWords, plural);\n}\nexports.pluralize = pluralize;\n/**\n * This function adds singularization support to every String object.\n * @param str The subject string.\n * @param singular Overrides normal output with said String.(optional)\n * @returns Plural English language nouns are returned in singular form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.singularize( 'people' ); // === 'person'\n *     inflection.singularize( 'octopuses' ); // === 'octopus'\n *     inflection.singularize( 'Hats' ); // === 'Hat'\n *     inflection.singularize( 'guys', 'person' ); // === 'person'\n */\nfunction singularize(str, singular) {\n  return applyRules(str, singularRules, uncountableWords, singular);\n}\nexports.singularize = singularize;\n/**\n * This function will pluralize or singularlize a String appropriately based on a number value\n * @param str The subject string.\n * @param count The number to base pluralization off of.\n * @param singular Overrides normal output with said String.(optional)\n * @param plural Overrides normal output with said String.(optional)\n * @returns English language nouns are returned in the plural or singular form based on the count.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.inflect( 'people' 1 ); // === 'person'\n *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'\n *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n *     inflection.inflect( 'inches', 1.5 ); // === 'inches'\n *     inflection.inflect( 'person', 2 ); // === 'people'\n *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'\n *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n */\nfunction inflect(str, count, singular, plural) {\n  if (isNaN(count)) return str;\n  if (count === 1) {\n    return applyRules(str, singularRules, uncountableWords, singular);\n  } else {\n    return applyRules(str, pluralRules, uncountableWords, plural);\n  }\n}\nexports.inflect = inflect;\n/**\n * This function adds camelization support to every String object.\n * @param str The subject string.\n * @param lowFirstLetter Default is to capitalize the first letter of the results.(optional)\n *                                 Passing true will lowercase it.\n * @returns Lower case underscored words will be returned in camel case.\n *                  additionally '/' is translated to '::'\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n */\nfunction camelize(str, lowFirstLetter) {\n  const strPath = str.split('/');\n  const j = strPath.length;\n  let strArr, k, l, first;\n  for (let i = 0; i < j; i++) {\n    strArr = strPath[i].split('_');\n    k = 0;\n    l = strArr.length;\n    for (; k < l; k++) {\n      if (k !== 0) {\n        strArr[k] = strArr[k].toLowerCase();\n      }\n      first = strArr[k].charAt(0);\n      first = lowFirstLetter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();\n      strArr[k] = first + strArr[k].substring(1);\n    }\n    strPath[i] = strArr.join('');\n  }\n  return strPath.join('::');\n}\nexports.camelize = camelize;\n/**\n * This function adds underscore support to every String object.\n * @param str The subject string.\n * @param allUpperCase Default is to lowercase and add underscore prefix.(optional)\n *                  Passing true will return as entered.\n * @returns Camel cased words are returned as lower cased and underscored.\n *                  additionally '::' is translated to '/'.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n *     inflection.underscore( 'MP', true ); // === 'MP'\n */\nfunction underscore(str, allUpperCase) {\n  if (allUpperCase && str === str.toUpperCase()) return str;\n  const strPath = str.split('::');\n  const j = strPath.length;\n  for (let i = 0; i < j; i++) {\n    strPath[i] = strPath[i].replace(uppercase, '_$1');\n    strPath[i] = strPath[i].replace(underbarPrefix, '');\n  }\n  return strPath.join('/').toLowerCase();\n}\nexports.underscore = underscore;\n/**\n * This function adds humanize support to every String object.\n * @param str The subject string.\n * @param lowFirstLetter Default is to capitalize the first letter of the results.(optional)\n *                                 Passing true will lowercase it.\n * @returns Lower case underscored words will be returned in humanized form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n */\nfunction humanize(str, lowFirstLetter) {\n  str = str.toLowerCase();\n  str = str.replace(idSuffix, '');\n  str = str.replace(underbar, ' ');\n  if (!lowFirstLetter) {\n    str = capitalize(str);\n  }\n  return str;\n}\nexports.humanize = humanize;\n/**\n * This function adds capitalization support to every String object.\n * @param str The subject string.\n * @returns All characters will be lower case and the first will be upper.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n */\nfunction capitalize(str) {\n  str = str.toLowerCase();\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\nexports.capitalize = capitalize;\n/**\n * This function replaces underscores with dashes in the string.\n * @param str The subject string.\n * @returns Replaces all spaces or underscores with dashes.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n */\nfunction dasherize(str) {\n  return str.replace(spaceOrUnderbar, '-');\n}\nexports.dasherize = dasherize;\n/**\n * This function adds titleize support to every String object.\n * @param str The subject string.\n * @returns Capitalizes words as you would for a book title.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n */\nfunction titleize(str) {\n  str = str.toLowerCase().replace(underbar, ' ');\n  const strArr = str.split(' ');\n  const j = strArr.length;\n  let d, l;\n  for (let i = 0; i < j; i++) {\n    d = strArr[i].split('-');\n    l = d.length;\n    for (let k = 0; k < l; k++) {\n      if (nonTitlecasedWords.indexOf(d[k].toLowerCase()) < 0) {\n        d[k] = capitalize(d[k]);\n      }\n    }\n    strArr[i] = d.join('-');\n  }\n  str = strArr.join(' ');\n  str = str.substring(0, 1).toUpperCase() + str.substring(1);\n  return str;\n}\nexports.titleize = titleize;\n/**\n * This function adds demodulize support to every String object.\n * @param str The subject string.\n * @returns Removes module names leaving only class names.(Ruby style)\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n */\nfunction demodulize(str) {\n  const strArr = str.split('::');\n  return strArr[strArr.length - 1];\n}\nexports.demodulize = demodulize;\n/**\n * This function adds tableize support to every String object.\n * @param str The subject string.\n * @returns Return camel cased words into their underscored plural form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n */\nfunction tableize(str) {\n  str = underscore(str);\n  str = pluralize(str);\n  return str;\n}\nexports.tableize = tableize;\n/**\n * This function adds classification support to every String object.\n * @param str The subject string.\n * @returns Underscored plural nouns become the camel cased singular form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n */\nfunction classify(str) {\n  str = camelize(str);\n  str = singularize(str);\n  return str;\n}\nexports.classify = classify;\n/**\n   * This function adds foreign key support to every String object.\n   * @param str The subject string.\n   * @param dropIdUbar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     const inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\nfunction foreignKey(str, dropIdUbar) {\n  str = demodulize(str);\n  str = underscore(str) + (dropIdUbar ? '' : '_') + 'id';\n  return str;\n}\nexports.foreignKey = foreignKey;\n/**\n * This function adds ordinalize support to every String object.\n * @param str The subject string.\n * @returns Return all found numbers their sequence like '22nd'.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n */\nfunction ordinalize(str) {\n  const strArr = str.split(' ');\n  const j = strArr.length;\n  for (let i = 0; i < j; i++) {\n    const k = parseInt(strArr[i], 10);\n    if (!isNaN(k)) {\n      const ltd = strArr[i].substring(strArr[i].length - 2);\n      const ld = strArr[i].substring(strArr[i].length - 1);\n      let suf = 'th';\n      if (ltd != '11' && ltd != '12' && ltd != '13') {\n        if (ld === '1') {\n          suf = 'st';\n        } else if (ld === '2') {\n          suf = 'nd';\n        } else if (ld === '3') {\n          suf = 'rd';\n        }\n      }\n      strArr[i] += suf;\n    }\n  }\n  return strArr.join(' ');\n}\nexports.ordinalize = ordinalize;\nconst transformFunctions = {\n  pluralize,\n  singularize,\n  camelize,\n  underscore,\n  humanize,\n  capitalize,\n  dasherize,\n  titleize,\n  demodulize,\n  tableize,\n  classify,\n  foreignKey,\n  ordinalize\n};\n/**\n * This function performs multiple inflection methods on a string\n * @param str The subject string.\n * @param arr An array of inflection methods.\n * @returns\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n */\nfunction transform(str, arr) {\n  const j = arr.length;\n  for (let i = 0; i < j; i++) {\n    const method = arr[i];\n    const methodFn = transformFunctions[method];\n    if (methodFn) {\n      str = methodFn(str);\n    }\n  }\n  return str;\n}\nexports.transform = transform;","map":{"version":3,"names":["Object","defineProperty","exports","value","transform","ordinalize","foreignKey","classify","tableize","demodulize","titleize","dasherize","capitalize","humanize","underscore","camelize","inflect","singularize","pluralize","uncountableWords","regex","plural","men","RegExp","people","children","tia","analyses","databases","drives","hives","curves","lrves","aves","foves","movies","aeiouyies","series","xes","mice","buses","oes","shoes","crises","octopuses","aliases","summonses","oxen","matrices","vertices","feet","teeth","geese","quizzes","whereases","criteria","genera","ss","s","singular","man","person","child","drive","ox","axis","octopus","alias","summons","bus","buffalo","tium","sis","ffe","hive","aeiouyy","x","matrix","vertex","mouse","foot","tooth","goose","quiz","whereas","criterion","genus","common","pluralRules","singularRules","nonTitlecasedWords","idSuffix","underbar","spaceOrUnderbar","uppercase","underbarPrefix","applyRules","str","rules","skip","override","includes","toLocaleLowerCase","rule","match","undefined","replace","count","isNaN","lowFirstLetter","strPath","split","j","length","strArr","k","l","first","i","toLowerCase","charAt","toUpperCase","substring","join","allUpperCase","d","indexOf","dropIdUbar","parseInt","ltd","ld","suf","transformFunctions","arr","method","methodFn"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/inflection/lib/inflection.js"],"sourcesContent":["\"use strict\";\n/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transform = exports.ordinalize = exports.foreignKey = exports.classify = exports.tableize = exports.demodulize = exports.titleize = exports.dasherize = exports.capitalize = exports.humanize = exports.underscore = exports.camelize = exports.inflect = exports.singularize = exports.pluralize = void 0;\n/**\n * @description This is a list of nouns that use the same form for both singular and plural.\n *              This list should remain entirely in lower case to correctly match Strings.\n */\nconst uncountableWords = [\n    // 'access',\n    'accommodation',\n    'adulthood',\n    'advertising',\n    'advice',\n    'aggression',\n    'aid',\n    'air',\n    'aircraft',\n    'alcohol',\n    'anger',\n    'applause',\n    'arithmetic',\n    // 'art',\n    'assistance',\n    'athletics',\n    // 'attention',\n    'bacon',\n    'baggage',\n    // 'ballet',\n    // 'beauty',\n    'beef',\n    // 'beer',\n    // 'behavior',\n    'biology',\n    // 'billiards',\n    'blood',\n    'botany',\n    // 'bowels',\n    'bread',\n    // 'business',\n    'butter',\n    'carbon',\n    'cardboard',\n    'cash',\n    'chalk',\n    'chaos',\n    'chess',\n    'crossroads',\n    'countryside',\n    // 'damage',\n    'dancing',\n    // 'danger',\n    'deer',\n    // 'delight',\n    // 'dessert',\n    'dignity',\n    'dirt',\n    // 'distribution',\n    'dust',\n    'economics',\n    'education',\n    'electricity',\n    // 'employment',\n    // 'energy',\n    'engineering',\n    'enjoyment',\n    // 'entertainment',\n    'envy',\n    'equipment',\n    'ethics',\n    'evidence',\n    'evolution',\n    // 'failure',\n    // 'faith',\n    'fame',\n    'fiction',\n    // 'fish',\n    'flour',\n    'flu',\n    'food',\n    // 'freedom',\n    // 'fruit',\n    'fuel',\n    'fun',\n    // 'funeral',\n    'furniture',\n    'gallows',\n    'garbage',\n    'garlic',\n    // 'gas',\n    'genetics',\n    // 'glass',\n    'gold',\n    'golf',\n    'gossip',\n    // 'grass',\n    'gratitude',\n    'grief',\n    // 'ground',\n    'guilt',\n    'gymnastics',\n    // 'hair',\n    'happiness',\n    'hardware',\n    'harm',\n    'hate',\n    'hatred',\n    'health',\n    'heat',\n    // 'height',\n    'help',\n    'homework',\n    'honesty',\n    'honey',\n    'hospitality',\n    'housework',\n    'humour',\n    'hunger',\n    'hydrogen',\n    'ice',\n    'importance',\n    'inflation',\n    'information',\n    // 'injustice',\n    'innocence',\n    // 'intelligence',\n    'iron',\n    'irony',\n    'jam',\n    // 'jealousy',\n    // 'jelly',\n    'jewelry',\n    // 'joy',\n    'judo',\n    // 'juice',\n    // 'justice',\n    'karate',\n    // 'kindness',\n    'knowledge',\n    // 'labour',\n    'lack',\n    // 'land',\n    'laughter',\n    'lava',\n    'leather',\n    'leisure',\n    'lightning',\n    'linguine',\n    'linguini',\n    'linguistics',\n    'literature',\n    'litter',\n    'livestock',\n    'logic',\n    'loneliness',\n    // 'love',\n    'luck',\n    'luggage',\n    'macaroni',\n    'machinery',\n    'magic',\n    // 'mail',\n    'management',\n    'mankind',\n    'marble',\n    'mathematics',\n    'mayonnaise',\n    'measles',\n    // 'meat',\n    // 'metal',\n    'methane',\n    'milk',\n    'minus',\n    'money',\n    // 'moose',\n    'mud',\n    'music',\n    'mumps',\n    'nature',\n    'news',\n    'nitrogen',\n    'nonsense',\n    'nurture',\n    'nutrition',\n    'obedience',\n    'obesity',\n    // 'oil',\n    'oxygen',\n    // 'paper',\n    // 'passion',\n    'pasta',\n    'patience',\n    // 'permission',\n    'physics',\n    'poetry',\n    'pollution',\n    'poverty',\n    // 'power',\n    'pride',\n    // 'production',\n    // 'progress',\n    // 'pronunciation',\n    'psychology',\n    'publicity',\n    'punctuation',\n    // 'quality',\n    // 'quantity',\n    'quartz',\n    'racism',\n    // 'rain',\n    // 'recreation',\n    'relaxation',\n    'reliability',\n    'research',\n    'respect',\n    'revenge',\n    'rice',\n    'rubbish',\n    'rum',\n    'safety',\n    // 'salad',\n    // 'salt',\n    // 'sand',\n    // 'satire',\n    'scenery',\n    'seafood',\n    'seaside',\n    'series',\n    'shame',\n    'sheep',\n    'shopping',\n    // 'silence',\n    'sleep',\n    // 'slang'\n    'smoke',\n    'smoking',\n    'snow',\n    'soap',\n    'software',\n    'soil',\n    // 'sorrow',\n    // 'soup',\n    'spaghetti',\n    // 'speed',\n    'species',\n    // 'spelling',\n    // 'sport',\n    'steam',\n    // 'strength',\n    'stuff',\n    'stupidity',\n    // 'success',\n    // 'sugar',\n    'sunshine',\n    'symmetry',\n    // 'tea',\n    'tennis',\n    'thirst',\n    'thunder',\n    'timber',\n    // 'time',\n    // 'toast',\n    // 'tolerance',\n    // 'trade',\n    'traffic',\n    'transportation',\n    // 'travel',\n    'trust',\n    // 'understanding',\n    'underwear',\n    'unemployment',\n    'unity',\n    // 'usage',\n    'validity',\n    'veal',\n    'vegetation',\n    'vegetarianism',\n    'vengeance',\n    'violence',\n    // 'vision',\n    'vitality',\n    'warmth',\n    // 'water',\n    'wealth',\n    'weather',\n    // 'weight',\n    'welfare',\n    'wheat',\n    // 'whiskey',\n    // 'width',\n    'wildlife',\n    // 'wine',\n    'wisdom',\n    // 'wood',\n    // 'wool',\n    // 'work',\n    // 'yeast',\n    'yoga',\n    'zinc',\n    'zoology',\n];\n/**\n * @description These rules translate from the singular form of a noun to its plural form.\n */\nconst regex = {\n    plural: {\n        men: new RegExp('^(m|wom)en$', 'gi'),\n        people: new RegExp('(pe)ople$', 'gi'),\n        children: new RegExp('(child)ren$', 'gi'),\n        tia: new RegExp('([ti])a$', 'gi'),\n        analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),\n        databases: new RegExp('(database)s$', 'gi'),\n        drives: new RegExp('(drive)s$', 'gi'),\n        hives: new RegExp('(hi|ti)ves$', 'gi'),\n        curves: new RegExp('(curve)s$', 'gi'),\n        lrves: new RegExp('([lr])ves$', 'gi'),\n        aves: new RegExp('([a])ves$', 'gi'),\n        foves: new RegExp('([^fo])ves$', 'gi'),\n        movies: new RegExp('(m)ovies$', 'gi'),\n        aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),\n        series: new RegExp('(s)eries$', 'gi'),\n        xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),\n        mice: new RegExp('([m|l])ice$', 'gi'),\n        buses: new RegExp('(bus)es$', 'gi'),\n        oes: new RegExp('(o)es$', 'gi'),\n        shoes: new RegExp('(shoe)s$', 'gi'),\n        crises: new RegExp('(cris|ax|test)es$', 'gi'),\n        octopuses: new RegExp('(octop|vir)uses$', 'gi'),\n        aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),\n        summonses: new RegExp('^(summons|bonus)es$', 'gi'),\n        oxen: new RegExp('^(ox)en', 'gi'),\n        matrices: new RegExp('(matr)ices$', 'gi'),\n        vertices: new RegExp('(vert|ind)ices$', 'gi'),\n        feet: new RegExp('^feet$', 'gi'),\n        teeth: new RegExp('^teeth$', 'gi'),\n        geese: new RegExp('^geese$', 'gi'),\n        quizzes: new RegExp('(quiz)zes$', 'gi'),\n        whereases: new RegExp('^(whereas)es$', 'gi'),\n        criteria: new RegExp('^(criteri)a$', 'gi'),\n        genera: new RegExp('^genera$', 'gi'),\n        ss: new RegExp('ss$', 'gi'),\n        s: new RegExp('s$', 'gi'),\n    },\n    singular: {\n        man: new RegExp('^(m|wom)an$', 'gi'),\n        person: new RegExp('(pe)rson$', 'gi'),\n        child: new RegExp('(child)$', 'gi'),\n        drive: new RegExp('(drive)$', 'gi'),\n        ox: new RegExp('^(ox)$', 'gi'),\n        axis: new RegExp('(ax|test)is$', 'gi'),\n        octopus: new RegExp('(octop|vir)us$', 'gi'),\n        alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),\n        summons: new RegExp('^(summons|bonus)$', 'gi'),\n        bus: new RegExp('(bu)s$', 'gi'),\n        buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),\n        tium: new RegExp('([ti])um$', 'gi'),\n        sis: new RegExp('sis$', 'gi'),\n        ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),\n        hive: new RegExp('(hi|ti)ve$', 'gi'),\n        aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),\n        x: new RegExp('(x|ch|ss|sh)$', 'gi'),\n        matrix: new RegExp('(matr)ix$', 'gi'),\n        vertex: new RegExp('(vert|ind)ex$', 'gi'),\n        mouse: new RegExp('([m|l])ouse$', 'gi'),\n        foot: new RegExp('^foot$', 'gi'),\n        tooth: new RegExp('^tooth$', 'gi'),\n        goose: new RegExp('^goose$', 'gi'),\n        quiz: new RegExp('(quiz)$', 'gi'),\n        whereas: new RegExp('^(whereas)$', 'gi'),\n        criterion: new RegExp('^(criteri)on$', 'gi'),\n        genus: new RegExp('^genus$', 'gi'),\n        s: new RegExp('s$', 'gi'),\n        common: new RegExp('$', 'gi'),\n    },\n};\nconst pluralRules = [\n    // do not replace if its already a plural word\n    [regex.plural.men],\n    [regex.plural.people],\n    [regex.plural.children],\n    [regex.plural.tia],\n    [regex.plural.analyses],\n    [regex.plural.databases],\n    [regex.plural.drives],\n    [regex.plural.hives],\n    [regex.plural.curves],\n    [regex.plural.lrves],\n    [regex.plural.foves],\n    [regex.plural.aeiouyies],\n    [regex.plural.series],\n    [regex.plural.movies],\n    [regex.plural.xes],\n    [regex.plural.mice],\n    [regex.plural.buses],\n    [regex.plural.oes],\n    [regex.plural.shoes],\n    [regex.plural.crises],\n    [regex.plural.octopuses],\n    [regex.plural.aliases],\n    [regex.plural.summonses],\n    [regex.plural.oxen],\n    [regex.plural.matrices],\n    [regex.plural.feet],\n    [regex.plural.teeth],\n    [regex.plural.geese],\n    [regex.plural.quizzes],\n    [regex.plural.whereases],\n    [regex.plural.criteria],\n    [regex.plural.genera],\n    // original rule\n    [regex.singular.man, '$1en'],\n    [regex.singular.person, '$1ople'],\n    [regex.singular.child, '$1ren'],\n    [regex.singular.drive, '$1s'],\n    [regex.singular.ox, '$1en'],\n    [regex.singular.axis, '$1es'],\n    [regex.singular.octopus, '$1uses'],\n    [regex.singular.alias, '$1es'],\n    [regex.singular.summons, '$1es'],\n    [regex.singular.bus, '$1ses'],\n    [regex.singular.buffalo, '$1oes'],\n    [regex.singular.tium, '$1a'],\n    [regex.singular.sis, 'ses'],\n    [regex.singular.ffe, '$1$2ves'],\n    [regex.singular.hive, '$1ves'],\n    [regex.singular.aeiouyy, '$1ies'],\n    [regex.singular.matrix, '$1ices'],\n    [regex.singular.vertex, '$1ices'],\n    [regex.singular.x, '$1es'],\n    [regex.singular.mouse, '$1ice'],\n    [regex.singular.foot, 'feet'],\n    [regex.singular.tooth, 'teeth'],\n    [regex.singular.goose, 'geese'],\n    [regex.singular.quiz, '$1zes'],\n    [regex.singular.whereas, '$1es'],\n    [regex.singular.criterion, '$1a'],\n    [regex.singular.genus, 'genera'],\n    [regex.singular.s, 's'],\n    [regex.singular.common, 's'],\n];\n/**\n * @description These rules translate from the plural form of a noun to its singular form.\n */\nconst singularRules = [\n    // do not replace if its already a singular word\n    [regex.singular.man],\n    [regex.singular.person],\n    [regex.singular.child],\n    [regex.singular.drive],\n    [regex.singular.ox],\n    [regex.singular.axis],\n    [regex.singular.octopus],\n    [regex.singular.alias],\n    [regex.singular.summons],\n    [regex.singular.bus],\n    [regex.singular.buffalo],\n    [regex.singular.tium],\n    [regex.singular.sis],\n    [regex.singular.ffe],\n    [regex.singular.hive],\n    [regex.singular.aeiouyy],\n    [regex.singular.x],\n    [regex.singular.matrix],\n    [regex.singular.mouse],\n    [regex.singular.foot],\n    [regex.singular.tooth],\n    [regex.singular.goose],\n    [regex.singular.quiz],\n    [regex.singular.whereas],\n    [regex.singular.criterion],\n    [regex.singular.genus],\n    // original rule\n    [regex.plural.men, '$1an'],\n    [regex.plural.people, '$1rson'],\n    [regex.plural.children, '$1'],\n    [regex.plural.databases, '$1'],\n    [regex.plural.drives, '$1'],\n    [regex.plural.genera, 'genus'],\n    [regex.plural.criteria, '$1on'],\n    [regex.plural.tia, '$1um'],\n    [regex.plural.analyses, '$1$2sis'],\n    [regex.plural.hives, '$1ve'],\n    [regex.plural.curves, '$1'],\n    [regex.plural.lrves, '$1f'],\n    [regex.plural.aves, '$1ve'],\n    [regex.plural.foves, '$1fe'],\n    [regex.plural.movies, '$1ovie'],\n    [regex.plural.aeiouyies, '$1y'],\n    [regex.plural.series, '$1eries'],\n    [regex.plural.xes, '$1'],\n    [regex.plural.mice, '$1ouse'],\n    [regex.plural.buses, '$1'],\n    [regex.plural.oes, '$1'],\n    [regex.plural.shoes, '$1'],\n    [regex.plural.crises, '$1is'],\n    [regex.plural.octopuses, '$1us'],\n    [regex.plural.aliases, '$1'],\n    [regex.plural.summonses, '$1'],\n    [regex.plural.oxen, '$1'],\n    [regex.plural.matrices, '$1ix'],\n    [regex.plural.vertices, '$1ex'],\n    [regex.plural.feet, 'foot'],\n    [regex.plural.teeth, 'tooth'],\n    [regex.plural.geese, 'goose'],\n    [regex.plural.quizzes, '$1'],\n    [regex.plural.whereases, '$1'],\n    [regex.plural.ss, 'ss'],\n    [regex.plural.s, ''],\n];\n/**\n * @description This is a list of words that should not be capitalized for title case.\n */\nconst nonTitlecasedWords = [\n    'and',\n    'or',\n    'nor',\n    'a',\n    'an',\n    'the',\n    'so',\n    'but',\n    'to',\n    'of',\n    'at',\n    'by',\n    'from',\n    'into',\n    'on',\n    'onto',\n    'off',\n    'out',\n    'in',\n    'over',\n    'with',\n    'for',\n];\n/**\n * @description These are regular expressions used for converting between String formats.\n */\nconst idSuffix = new RegExp('(_ids|_id)$', 'g');\nconst underbar = new RegExp('_', 'g');\nconst spaceOrUnderbar = new RegExp('[ _]', 'g');\nconst uppercase = new RegExp('([A-Z])', 'g');\nconst underbarPrefix = new RegExp('^_');\n/**\n * A helper method that applies rules based replacement to a String.\n * @param str String to modify and return based on the passed rules.\n * @param rules Regexp to match paired with String to use for replacement\n * @param skip Strings to skip if they match\n * @param override String to return as though this method succeeded (used to conform to APIs)\n * @returns Return passed String modified by passed rules.\n * @example\n *\n *     applyRules( 'cows', singular_rules ); // === 'cow'\n */\nfunction applyRules(str, rules, skip, override) {\n    if (override) {\n        return override;\n    }\n    else {\n        if (skip.includes(str.toLocaleLowerCase())) {\n            return str;\n        }\n        for (const rule of rules) {\n            if (str.match(rule[0])) {\n                if (rule[1] !== undefined) {\n                    return str.replace(rule[0], rule[1]);\n                }\n                return str;\n            }\n        }\n    }\n    return str;\n}\n/**\n * This function adds pluralization support to every String object.\n * @param str The subject string.\n * @param plural Overrides normal output with said String.(optional)\n * @returns Singular English language nouns are returned in plural form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.pluralize( 'person' ); // === 'people'\n *     inflection.pluralize( 'octopus' ); // === 'octopuses'\n *     inflection.pluralize( 'Hat' ); // === 'Hats'\n *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n */\nfunction pluralize(str, plural) {\n    return applyRules(str, pluralRules, uncountableWords, plural);\n}\nexports.pluralize = pluralize;\n/**\n * This function adds singularization support to every String object.\n * @param str The subject string.\n * @param singular Overrides normal output with said String.(optional)\n * @returns Plural English language nouns are returned in singular form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.singularize( 'people' ); // === 'person'\n *     inflection.singularize( 'octopuses' ); // === 'octopus'\n *     inflection.singularize( 'Hats' ); // === 'Hat'\n *     inflection.singularize( 'guys', 'person' ); // === 'person'\n */\nfunction singularize(str, singular) {\n    return applyRules(str, singularRules, uncountableWords, singular);\n}\nexports.singularize = singularize;\n/**\n * This function will pluralize or singularlize a String appropriately based on a number value\n * @param str The subject string.\n * @param count The number to base pluralization off of.\n * @param singular Overrides normal output with said String.(optional)\n * @param plural Overrides normal output with said String.(optional)\n * @returns English language nouns are returned in the plural or singular form based on the count.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.inflect( 'people' 1 ); // === 'person'\n *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'\n *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n *     inflection.inflect( 'inches', 1.5 ); // === 'inches'\n *     inflection.inflect( 'person', 2 ); // === 'people'\n *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'\n *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n */\nfunction inflect(str, count, singular, plural) {\n    if (isNaN(count))\n        return str;\n    if (count === 1) {\n        return applyRules(str, singularRules, uncountableWords, singular);\n    }\n    else {\n        return applyRules(str, pluralRules, uncountableWords, plural);\n    }\n}\nexports.inflect = inflect;\n/**\n * This function adds camelization support to every String object.\n * @param str The subject string.\n * @param lowFirstLetter Default is to capitalize the first letter of the results.(optional)\n *                                 Passing true will lowercase it.\n * @returns Lower case underscored words will be returned in camel case.\n *                  additionally '/' is translated to '::'\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n */\nfunction camelize(str, lowFirstLetter) {\n    const strPath = str.split('/');\n    const j = strPath.length;\n    let strArr, k, l, first;\n    for (let i = 0; i < j; i++) {\n        strArr = strPath[i].split('_');\n        k = 0;\n        l = strArr.length;\n        for (; k < l; k++) {\n            if (k !== 0) {\n                strArr[k] = strArr[k].toLowerCase();\n            }\n            first = strArr[k].charAt(0);\n            first =\n                lowFirstLetter && i === 0 && k === 0\n                    ? first.toLowerCase()\n                    : first.toUpperCase();\n            strArr[k] = first + strArr[k].substring(1);\n        }\n        strPath[i] = strArr.join('');\n    }\n    return strPath.join('::');\n}\nexports.camelize = camelize;\n/**\n * This function adds underscore support to every String object.\n * @param str The subject string.\n * @param allUpperCase Default is to lowercase and add underscore prefix.(optional)\n *                  Passing true will return as entered.\n * @returns Camel cased words are returned as lower cased and underscored.\n *                  additionally '::' is translated to '/'.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n *     inflection.underscore( 'MP', true ); // === 'MP'\n */\nfunction underscore(str, allUpperCase) {\n    if (allUpperCase && str === str.toUpperCase())\n        return str;\n    const strPath = str.split('::');\n    const j = strPath.length;\n    for (let i = 0; i < j; i++) {\n        strPath[i] = strPath[i].replace(uppercase, '_$1');\n        strPath[i] = strPath[i].replace(underbarPrefix, '');\n    }\n    return strPath.join('/').toLowerCase();\n}\nexports.underscore = underscore;\n/**\n * This function adds humanize support to every String object.\n * @param str The subject string.\n * @param lowFirstLetter Default is to capitalize the first letter of the results.(optional)\n *                                 Passing true will lowercase it.\n * @returns Lower case underscored words will be returned in humanized form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n */\nfunction humanize(str, lowFirstLetter) {\n    str = str.toLowerCase();\n    str = str.replace(idSuffix, '');\n    str = str.replace(underbar, ' ');\n    if (!lowFirstLetter) {\n        str = capitalize(str);\n    }\n    return str;\n}\nexports.humanize = humanize;\n/**\n * This function adds capitalization support to every String object.\n * @param str The subject string.\n * @returns All characters will be lower case and the first will be upper.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n */\nfunction capitalize(str) {\n    str = str.toLowerCase();\n    return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\nexports.capitalize = capitalize;\n/**\n * This function replaces underscores with dashes in the string.\n * @param str The subject string.\n * @returns Replaces all spaces or underscores with dashes.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n */\nfunction dasherize(str) {\n    return str.replace(spaceOrUnderbar, '-');\n}\nexports.dasherize = dasherize;\n/**\n * This function adds titleize support to every String object.\n * @param str The subject string.\n * @returns Capitalizes words as you would for a book title.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n */\nfunction titleize(str) {\n    str = str.toLowerCase().replace(underbar, ' ');\n    const strArr = str.split(' ');\n    const j = strArr.length;\n    let d, l;\n    for (let i = 0; i < j; i++) {\n        d = strArr[i].split('-');\n        l = d.length;\n        for (let k = 0; k < l; k++) {\n            if (nonTitlecasedWords.indexOf(d[k].toLowerCase()) < 0) {\n                d[k] = capitalize(d[k]);\n            }\n        }\n        strArr[i] = d.join('-');\n    }\n    str = strArr.join(' ');\n    str = str.substring(0, 1).toUpperCase() + str.substring(1);\n    return str;\n}\nexports.titleize = titleize;\n/**\n * This function adds demodulize support to every String object.\n * @param str The subject string.\n * @returns Removes module names leaving only class names.(Ruby style)\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n */\nfunction demodulize(str) {\n    const strArr = str.split('::');\n    return strArr[strArr.length - 1];\n}\nexports.demodulize = demodulize;\n/**\n * This function adds tableize support to every String object.\n * @param str The subject string.\n * @returns Return camel cased words into their underscored plural form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n */\nfunction tableize(str) {\n    str = underscore(str);\n    str = pluralize(str);\n    return str;\n}\nexports.tableize = tableize;\n/**\n * This function adds classification support to every String object.\n * @param str The subject string.\n * @returns Underscored plural nouns become the camel cased singular form.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n */\nfunction classify(str) {\n    str = camelize(str);\n    str = singularize(str);\n    return str;\n}\nexports.classify = classify;\n/**\n   * This function adds foreign key support to every String object.\n   * @param str The subject string.\n   * @param dropIdUbar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     const inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\nfunction foreignKey(str, dropIdUbar) {\n    str = demodulize(str);\n    str = underscore(str) + (dropIdUbar ? '' : '_') + 'id';\n    return str;\n}\nexports.foreignKey = foreignKey;\n/**\n * This function adds ordinalize support to every String object.\n * @param str The subject string.\n * @returns Return all found numbers their sequence like '22nd'.\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n */\nfunction ordinalize(str) {\n    const strArr = str.split(' ');\n    const j = strArr.length;\n    for (let i = 0; i < j; i++) {\n        const k = parseInt(strArr[i], 10);\n        if (!isNaN(k)) {\n            const ltd = strArr[i].substring(strArr[i].length - 2);\n            const ld = strArr[i].substring(strArr[i].length - 1);\n            let suf = 'th';\n            if (ltd != '11' && ltd != '12' && ltd != '13') {\n                if (ld === '1') {\n                    suf = 'st';\n                }\n                else if (ld === '2') {\n                    suf = 'nd';\n                }\n                else if (ld === '3') {\n                    suf = 'rd';\n                }\n            }\n            strArr[i] += suf;\n        }\n    }\n    return strArr.join(' ');\n}\nexports.ordinalize = ordinalize;\nconst transformFunctions = {\n    pluralize,\n    singularize,\n    camelize,\n    underscore,\n    humanize,\n    capitalize,\n    dasherize,\n    titleize,\n    demodulize,\n    tableize,\n    classify,\n    foreignKey,\n    ordinalize,\n};\n/**\n * This function performs multiple inflection methods on a string\n * @param str The subject string.\n * @param arr An array of inflection methods.\n * @returns\n * @example\n *\n *     const inflection = require( 'inflection' );\n *\n *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n */\nfunction transform(str, arr) {\n    const j = arr.length;\n    for (let i = 0; i < j; i++) {\n        const method = arr[i];\n        const methodFn = transformFunctions[method];\n        if (methodFn) {\n            str = methodFn(str);\n        }\n    }\n    return str;\n}\nexports.transform = transform;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACG,UAAU,GAAGH,OAAO,CAACI,UAAU,GAAGJ,OAAO,CAACK,QAAQ,GAAGL,OAAO,CAACM,QAAQ,GAAGN,OAAO,CAACO,UAAU,GAAGP,OAAO,CAACQ,QAAQ,GAAGR,OAAO,CAACS,SAAS,GAAGT,OAAO,CAACU,UAAU,GAAGV,OAAO,CAACW,QAAQ,GAAGX,OAAO,CAACY,UAAU,GAAGZ,OAAO,CAACa,QAAQ,GAAGb,OAAO,CAACc,OAAO,GAAGd,OAAO,CAACe,WAAW,GAAGf,OAAO,CAACgB,SAAS,GAAG,KAAK,CAAC;AAClT;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG;AACrB;AACA,eAAe,EACf,WAAW,EACX,aAAa,EACb,QAAQ,EACR,YAAY,EACZ,KAAK,EACL,KAAK,EACL,UAAU,EACV,SAAS,EACT,OAAO,EACP,UAAU,EACV,YAAY;AACZ;AACA,YAAY,EACZ,WAAW;AACX;AACA,OAAO,EACP,SAAS;AACT;AACA;AACA,MAAM;AACN;AACA;AACA,SAAS;AACT;AACA,OAAO,EACP,QAAQ;AACR;AACA,OAAO;AACP;AACA,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,MAAM,EACN,OAAO,EACP,OAAO,EACP,OAAO,EACP,YAAY,EACZ,aAAa;AACb;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA;AACA,SAAS,EACT,MAAM;AACN;AACA,MAAM,EACN,WAAW,EACX,WAAW,EACX,aAAa;AACb;AACA;AACA,aAAa,EACb,WAAW;AACX;AACA,MAAM,EACN,WAAW,EACX,QAAQ,EACR,UAAU,EACV,WAAW;AACX;AACA;AACA,MAAM,EACN,SAAS;AACT;AACA,OAAO,EACP,KAAK,EACL,MAAM;AACN;AACA;AACA,MAAM,EACN,KAAK;AACL;AACA,WAAW,EACX,SAAS,EACT,SAAS,EACT,QAAQ;AACR;AACA,UAAU;AACV;AACA,MAAM,EACN,MAAM,EACN,QAAQ;AACR;AACA,WAAW,EACX,OAAO;AACP;AACA,OAAO,EACP,YAAY;AACZ;AACA,WAAW,EACX,UAAU,EACV,MAAM,EACN,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,MAAM;AACN;AACA,MAAM,EACN,UAAU,EACV,SAAS,EACT,OAAO,EACP,aAAa,EACb,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,KAAK,EACL,YAAY,EACZ,WAAW,EACX,aAAa;AACb;AACA,WAAW;AACX;AACA,MAAM,EACN,OAAO,EACP,KAAK;AACL;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA,WAAW;AACX;AACA,MAAM;AACN;AACA,UAAU,EACV,MAAM,EACN,SAAS,EACT,SAAS,EACT,WAAW,EACX,UAAU,EACV,UAAU,EACV,aAAa,EACb,YAAY,EACZ,QAAQ,EACR,WAAW,EACX,OAAO,EACP,YAAY;AACZ;AACA,MAAM,EACN,SAAS,EACT,UAAU,EACV,WAAW,EACX,OAAO;AACP;AACA,YAAY,EACZ,SAAS,EACT,QAAQ,EACR,aAAa,EACb,YAAY,EACZ,SAAS;AACT;AACA;AACA,SAAS,EACT,MAAM,EACN,OAAO,EACP,OAAO;AACP;AACA,KAAK,EACL,OAAO,EACP,OAAO,EACP,QAAQ,EACR,MAAM,EACN,UAAU,EACV,UAAU,EACV,SAAS,EACT,WAAW,EACX,WAAW,EACX,SAAS;AACT;AACA,QAAQ;AACR;AACA;AACA,OAAO,EACP,UAAU;AACV;AACA,SAAS,EACT,QAAQ,EACR,WAAW,EACX,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY,EACZ,WAAW,EACX,aAAa;AACb;AACA;AACA,QAAQ,EACR,QAAQ;AACR;AACA;AACA,YAAY,EACZ,aAAa,EACb,UAAU,EACV,SAAS,EACT,SAAS,EACT,MAAM,EACN,SAAS,EACT,KAAK,EACL,QAAQ;AACR;AACA;AACA;AACA;AACA,SAAS,EACT,SAAS,EACT,SAAS,EAC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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}