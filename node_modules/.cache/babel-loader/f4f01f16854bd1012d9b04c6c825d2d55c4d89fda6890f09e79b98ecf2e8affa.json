{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store the result of the useCreateController() hook.\n *\n * Use the useCreateContext() hook to read the context. That's what the Create components do in react-admin.\n *\n * @example\n *\n * import { useCreateController, CreateContextProvider } from 'ra-core';\n *\n * const Create = props => {\n *     const controllerProps = useCreateController(props);\n *     return (\n *         <CreateContextProvider value={controllerProps}>\n *             ...\n *         </CreateContextProvider>\n *     );\n * };\n */\nexport var CreateContext = createContext(null);\nCreateContext.displayName = 'CreateContext';","map":{"version":3,"names":["createContext","CreateContext","displayName"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/create/CreateContext.tsx"],"sourcesContent":["import { createContext } from 'react';\nimport { CreateControllerResult } from './useCreateController';\n\n/**\n * Context to store the result of the useCreateController() hook.\n *\n * Use the useCreateContext() hook to read the context. That's what the Create components do in react-admin.\n *\n * @example\n *\n * import { useCreateController, CreateContextProvider } from 'ra-core';\n *\n * const Create = props => {\n *     const controllerProps = useCreateController(props);\n *     return (\n *         <CreateContextProvider value={controllerProps}>\n *             ...\n *         </CreateContextProvider>\n *     );\n * };\n */\nexport const CreateContext = createContext<CreateControllerResult | null>(null);\n\nCreateContext.displayName = 'CreateContext';\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAGrC;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAMC,aAAa,GAAGD,aAAa,CAAgC,IAAI,CAAC;AAE/EC,aAAa,CAACC,WAAW,GAAG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}