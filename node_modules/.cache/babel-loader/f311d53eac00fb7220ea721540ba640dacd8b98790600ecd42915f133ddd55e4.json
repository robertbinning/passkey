{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { genericMemo } from './genericMemo';\nvar TextFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"className\", \"emptyText\"]);\n  var translate = useTranslate();\n  var value = useFieldValue(props);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), value != null && typeof value !== 'string' ? value.toString() : value || (emptyText ? translate(emptyText, {\n    _: emptyText\n  }) : null));\n};\n// what? TypeScript loses the displayName if we don't set it explicitly\nTextFieldImpl.displayName = 'TextFieldImpl';\nexport var TextField = genericMemo(TextFieldImpl);","map":{"version":3,"names":["React","Typography","useFieldValue","useTranslate","sanitizeFieldRestProps","genericMemo","TextFieldImpl","props","className","emptyText","rest","__rest","translate","value","createElement","__assign","component","variant","toString","_","displayName","TextField"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/TextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ElementType } from 'react';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useFieldValue, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps } from './types';\nimport { genericMemo } from './genericMemo';\n\nconst TextFieldImpl = <\n    RecordType extends Record<string, any> = Record<string, any>,\n>(\n    props: TextFieldProps<RecordType>\n) => {\n    const { className, emptyText, ...rest } = props;\n    const translate = useTranslate();\n    const value = useFieldValue(props);\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {value != null && typeof value !== 'string'\n                ? value.toString()\n                : value ||\n                  (emptyText ? translate(emptyText, { _: emptyText }) : null)}\n        </Typography>\n    );\n};\n\n// what? TypeScript loses the displayName if we don't set it explicitly\nTextFieldImpl.displayName = 'TextFieldImpl';\n\nexport const TextField = genericMemo(TextFieldImpl);\n\nexport interface TextFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    // TypographyProps do not expose the component props, see https://github.com/mui/material-ui/issues/19512\n    component?: ElementType<any>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,UAA+B,MAAM,0BAA0B;AACtE,SAASC,aAAa,EAAEC,YAAY,QAAQ,SAAS;AAErD,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE,SAASC,WAAW,QAAQ,eAAe;AAE3C,IAAMC,aAAa,GAAG,SAAAA,CAGlBC,KAAiC;EAEzB,IAAAC,SAAS,GAAyBD,KAAK,CAAAC,SAA9B;IAAEC,SAAS,GAAcF,KAAK,CAAAE,SAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKJ,KAAK,EAAzC,0BAAiC,CAAF;EACrC,IAAMK,SAAS,GAAGT,YAAY,EAAE;EAChC,IAAMU,KAAK,GAAGX,aAAa,CAACK,KAAK,CAAC;EAElC,OACIP,KAAA,CAAAc,aAAA,CAACb,UAAU,EAAAc,QAAA;IACPC,SAAS,EAAC,MAAM;IAChBC,OAAO,EAAC,OAAO;IACfT,SAAS,EAAEA;EAAS,GAChBJ,sBAAsB,CAACM,IAAI,CAAC,GAE/BG,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,GACrCA,KAAK,CAACK,QAAQ,EAAE,GAChBL,KAAK,KACJJ,SAAS,GAAGG,SAAS,CAACH,SAAS,EAAE;IAAEU,CAAC,EAAEV;EAAS,CAAE,CAAC,GAAG,IAAI,CAAC,CACxD;AAErB,CAAC;AAED;AACAH,aAAa,CAACc,WAAW,GAAG,eAAe;AAE3C,OAAO,IAAMC,SAAS,GAAGhB,WAAW,CAACC,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}