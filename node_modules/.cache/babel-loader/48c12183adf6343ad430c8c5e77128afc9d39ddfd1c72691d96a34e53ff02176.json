{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { useReferenceArrayInputController, ResourceContextProvider, ChoicesContextProvider } from 'ra-core';\nimport { AutocompleteArrayInput } from './AutocompleteArrayInput';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()`) in the reference endpoint. It then\n * delegates rendering to its child component, to which it makes the possible\n * choices available through the ChoicesContext.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport var ReferenceArrayInput = function (props) {\n  var _a = props.children,\n    children = _a === void 0 ? defaultChildren : _a,\n    reference = props.reference,\n    sort = props.sort,\n    _b = props.filter,\n    filter = _b === void 0 ? defaultFilter : _b;\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayInput> only accepts a single child (like <Datagrid>)');\n  }\n  var controllerProps = useReferenceArrayInputController(__assign(__assign({}, props), {\n    sort: sort,\n    filter: filter\n  }));\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ChoicesContextProvider, {\n    value: controllerProps\n  }, children));\n};\nvar defaultChildren = React.createElement(AutocompleteArrayInput, null);\nvar defaultFilter = {};","map":{"version":3,"names":["React","useReferenceArrayInputController","ResourceContextProvider","ChoicesContextProvider","AutocompleteArrayInput","ReferenceArrayInput","props","_a","children","defaultChildren","reference","sort","_b","filter","defaultFilter","Children","count","Error","controllerProps","__assign","createElement","value"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/ReferenceArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport {\n    InputProps,\n    useReferenceArrayInputController,\n    ResourceContextProvider,\n    ChoicesContextProvider,\n    UseReferenceArrayInputParams,\n} from 'ra-core';\nimport { AutocompleteArrayInput } from './AutocompleteArrayInput';\n\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()`) in the reference endpoint. It then\n * delegates rendering to its child component, to which it makes the possible\n * choices available through the ChoicesContext.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport const ReferenceArrayInput = (props: ReferenceArrayInputProps) => {\n    const {\n        children = defaultChildren,\n        reference,\n        sort,\n        filter = defaultFilter,\n    } = props;\n    if (React.Children.count(children) !== 1) {\n        throw new Error(\n            '<ReferenceArrayInput> only accepts a single child (like <Datagrid>)'\n        );\n    }\n\n    const controllerProps = useReferenceArrayInputController({\n        ...props,\n        sort,\n        filter,\n    });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ChoicesContextProvider value={controllerProps}>\n                {children}\n            </ChoicesContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nconst defaultChildren = <AutocompleteArrayInput />;\nconst defaultFilter = {};\n\nexport interface ReferenceArrayInputProps\n    extends InputProps,\n        UseReferenceArrayInputParams {\n    children?: ReactElement;\n    label?: string;\n    [key: string]: any;\n}\n"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAEIC,gCAAgC,EAChCC,uBAAuB,EACvBC,sBAAsB,QAEnB,SAAS;AAChB,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CAACC,KAA+B;EAE3D,IAAAC,EAAA,GAIAD,KAAK,CAAAE,QAJqB;IAA1BA,QAAQ,GAAAD,EAAA,cAAGE,eAAe,GAAAF,EAAA;IAC1BG,SAAS,GAGTJ,KAAK,CAAAI,SAHI;IACTC,IAAI,GAEJL,KAAK,CAAAK,IAFD;IACJC,EAAA,GACAN,KAAK,CAAAO,MADiB;IAAtBA,MAAM,GAAAD,EAAA,cAAGE,aAAa,GAAAF,EAAA;EAE1B,IAAIZ,KAAK,CAACe,QAAQ,CAACC,KAAK,CAACR,QAAQ,CAAC,KAAK,CAAC,EAAE;IACtC,MAAM,IAAIS,KAAK,CACX,qEAAqE,CACxE;;EAGL,IAAMC,eAAe,GAAGjB,gCAAgC,CAAAkB,QAAA,CAAAA,QAAA,KACjDb,KAAK;IACRK,IAAI,EAAAA,IAAA;IACJE,MAAM,EAAAA;EAAA,GACR;EAEF,OACIb,KAAA,CAAAoB,aAAA,CAAClB,uBAAuB;IAACmB,KAAK,EAAEX;EAAS,GACrCV,KAAA,CAAAoB,aAAA,CAACjB,sBAAsB;IAACkB,KAAK,EAAEH;EAAe,GACzCV,QAAQ,CACY,CACH;AAElC,CAAC;AAED,IAAMC,eAAe,GAAGT,KAAA,CAAAoB,aAAA,CAAChB,sBAAsB,OAAG;AAClD,IAAMU,aAAa,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}