{"ast":null,"code":"import { useSourceContext } from './SourceContext';\n/**\n * Get the source prop for a field or input by checking if a source context is available.\n * @param {string} source The original source prop\n * @returns {string} The source prop, either the original one or the one modified by the SourceContext.\n * @example\n * const MyInput = ({ source, ...props }) => {\n *   const finalSource = useWrappedSource(source);\n *   return <input name={finalSource} {...props} />;\n * };\n */\nexport var useWrappedSource = function (source) {\n  var sourceContext = useSourceContext();\n  return sourceContext.getSource(source);\n};","map":{"version":3,"names":["useSourceContext","useWrappedSource","source","sourceContext","getSource"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/core/useWrappedSource.ts"],"sourcesContent":["import { useSourceContext } from './SourceContext';\n\n/**\n * Get the source prop for a field or input by checking if a source context is available.\n * @param {string} source The original source prop\n * @returns {string} The source prop, either the original one or the one modified by the SourceContext.\n * @example\n * const MyInput = ({ source, ...props }) => {\n *   const finalSource = useWrappedSource(source);\n *   return <input name={finalSource} {...props} />;\n * };\n */\nexport const useWrappedSource = (source: string) => {\n    const sourceContext = useSourceContext();\n    return sourceContext.getSource(source);\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,iBAAiB;AAElD;;;;;;;;;;AAUA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,MAAc;EAC3C,IAAMC,aAAa,GAAGH,gBAAgB,EAAE;EACxC,OAAOG,aAAa,CAACC,SAAS,CAACF,MAAM,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}