{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useFormState } from 'react-hook-form';\nimport { useBlocker } from 'react-router-dom';\nimport { useTranslate } from '../i18n';\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\nexport var useWarnWhenUnsavedChanges = function (enable, formRootPathname, control) {\n  var translate = useTranslate();\n  var _a = useFormState(control ? {\n      control: control\n    } : undefined),\n    isSubmitSuccessful = _a.isSubmitSuccessful,\n    dirtyFields = _a.dirtyFields;\n  var isDirty = Object.keys(dirtyFields).length > 0;\n  var _b = useState(false),\n    shouldNotify = _b[0],\n    setShouldNotify = _b[1];\n  var shouldNotBlock = !enable || !isDirty || isSubmitSuccessful;\n  var blocker = useBlocker(function (_a) {\n    var currentLocation = _a.currentLocation,\n      nextLocation = _a.nextLocation;\n    if (shouldNotBlock) return false;\n    // Also check if the new location is inside the form\n    var initialLocation = formRootPathname || currentLocation.pathname;\n    var newLocationIsInsideCurrentLocation = nextLocation.pathname.startsWith(initialLocation);\n    var newLocationIsShowView = nextLocation.pathname.startsWith(\"\".concat(initialLocation, \"/show\"));\n    var newLocationIsInsideForm = newLocationIsInsideCurrentLocation && !newLocationIsShowView;\n    if (newLocationIsInsideForm) return false;\n    return true;\n  });\n  useEffect(function () {\n    if (blocker.state === 'blocked') {\n      // Corner case: the blocker might be triggered by a redirect in the onSuccess side effect,\n      // happening during the same tick the form is reset after a successful save.\n      // In that case, the blocker will block but shouldNotBlock will be true one tick after.\n      // If we are in that case, we can proceed immediately.\n      if (shouldNotBlock) {\n        blocker.proceed();\n        return;\n      }\n      setShouldNotify(true);\n    }\n    // This effect should only run when the blocker state changes, not when shouldNotBlock changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [blocker.state]);\n  useEffect(function () {\n    if (shouldNotify) {\n      var shouldProceed = window.confirm(translate('ra.message.unsaved_changes'));\n      if (shouldProceed) {\n        blocker.proceed && blocker.proceed();\n      } else {\n        blocker.reset && blocker.reset();\n      }\n    }\n    setShouldNotify(false);\n    // Can't use blocker in the dependency array because it is not stable across rerenders\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shouldNotify, translate]);\n  // This effect handles document navigation, e.g. closing the tab\n  useEffect(function () {\n    var beforeunload = function (e) {\n      // Invoking event.preventDefault() will trigger a warning dialog when the user closes or navigates the tab\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#examples\n      e.preventDefault();\n      // Included for legacy support, e.g. Chrome/Edge < 119\n      e.returnValue = true;\n    };\n    if (shouldNotBlock) {\n      return;\n    }\n    window.addEventListener('beforeunload', beforeunload);\n    return function () {\n      window.removeEventListener('beforeunload', beforeunload);\n    };\n  }, [shouldNotBlock]);\n};","map":{"version":3,"names":["useEffect","useState","useFormState","useBlocker","useTranslate","useWarnWhenUnsavedChanges","enable","formRootPathname","control","translate","_a","undefined","isSubmitSuccessful","dirtyFields","isDirty","Object","keys","length","_b","shouldNotify","setShouldNotify","shouldNotBlock","blocker","currentLocation","nextLocation","initialLocation","pathname","newLocationIsInsideCurrentLocation","startsWith","newLocationIsShowView","concat","newLocationIsInsideForm","state","proceed","shouldProceed","window","confirm","reset","beforeunload","e","preventDefault","returnValue","addEventListener","removeEventListener"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/form/useWarnWhenUnsavedChanges.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Control, useFormState } from 'react-hook-form';\nimport { useBlocker } from 'react-router-dom';\nimport { useTranslate } from '../i18n';\n\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\nexport const useWarnWhenUnsavedChanges = (\n    enable: boolean,\n    formRootPathname?: string,\n    control?: Control\n) => {\n    const translate = useTranslate();\n    const { isSubmitSuccessful, dirtyFields } = useFormState(\n        control ? { control } : undefined\n    );\n    const isDirty = Object.keys(dirtyFields).length > 0;\n    const [shouldNotify, setShouldNotify] = useState(false);\n\n    const shouldNotBlock = !enable || !isDirty || isSubmitSuccessful;\n\n    const blocker = useBlocker(({ currentLocation, nextLocation }) => {\n        if (shouldNotBlock) return false;\n\n        // Also check if the new location is inside the form\n        const initialLocation = formRootPathname || currentLocation.pathname;\n        const newLocationIsInsideCurrentLocation =\n            nextLocation.pathname.startsWith(initialLocation);\n        const newLocationIsShowView = nextLocation.pathname.startsWith(\n            `${initialLocation}/show`\n        );\n        const newLocationIsInsideForm =\n            newLocationIsInsideCurrentLocation && !newLocationIsShowView;\n        if (newLocationIsInsideForm) return false;\n\n        return true;\n    });\n\n    useEffect(() => {\n        if (blocker.state === 'blocked') {\n            // Corner case: the blocker might be triggered by a redirect in the onSuccess side effect,\n            // happening during the same tick the form is reset after a successful save.\n            // In that case, the blocker will block but shouldNotBlock will be true one tick after.\n            // If we are in that case, we can proceed immediately.\n            if (shouldNotBlock) {\n                blocker.proceed();\n                return;\n            }\n\n            setShouldNotify(true);\n        }\n        // This effect should only run when the blocker state changes, not when shouldNotBlock changes.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [blocker.state]);\n\n    useEffect(() => {\n        if (shouldNotify) {\n            const shouldProceed = window.confirm(\n                translate('ra.message.unsaved_changes')\n            );\n            if (shouldProceed) {\n                blocker.proceed && blocker.proceed();\n            } else {\n                blocker.reset && blocker.reset();\n            }\n        }\n        setShouldNotify(false);\n        // Can't use blocker in the dependency array because it is not stable across rerenders\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [shouldNotify, translate]);\n\n    // This effect handles document navigation, e.g. closing the tab\n    useEffect(() => {\n        const beforeunload = (e: BeforeUnloadEvent) => {\n            // Invoking event.preventDefault() will trigger a warning dialog when the user closes or navigates the tab\n            // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#examples\n            e.preventDefault();\n            // Included for legacy support, e.g. Chrome/Edge < 119\n            e.returnValue = true;\n        };\n\n        if (shouldNotBlock) {\n            return;\n        }\n\n        window.addEventListener('beforeunload', beforeunload);\n\n        return () => {\n            window.removeEventListener('beforeunload', beforeunload);\n        };\n    }, [shouldNotBlock]);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}