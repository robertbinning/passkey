{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { genericMemo } from './genericMemo';\nvar ChipFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"className\", \"emptyText\"]);\n  var value = useFieldValue(props);\n  var translate = useTranslate();\n  if (value == null && emptyText) {\n    return React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    }));\n  }\n  return React.createElement(StyledChip, __assign({\n    className: clsx(ChipFieldClasses.chip, className),\n    label: value\n  }, sanitizeFieldRestProps(rest)));\n};\nChipFieldImpl.displayName = 'ChipFieldImpl';\nexport var ChipField = genericMemo(ChipFieldImpl);\nvar PREFIX = 'RaChipField';\nvar ChipFieldClasses = {\n  chip: \"\".concat(PREFIX, \"-chip\")\n};\nvar StyledChip = styled(Chip, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"&.\".concat(ChipFieldClasses.chip)] = {\n  cursor: 'inherit'\n}, _a));","map":{"version":3,"names":["React","styled","Chip","Typography","clsx","useFieldValue","useTranslate","sanitizeFieldRestProps","genericMemo","ChipFieldImpl","props","className","emptyText","rest","__rest","value","translate","createElement","__assign","component","variant","_","StyledChip","ChipFieldClasses","chip","label","displayName","ChipField","PREFIX","concat","name","overridesResolver","styles","root","_a","cursor"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/ChipField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Chip, { ChipProps } from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useFieldValue, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps } from './types';\nimport { genericMemo } from './genericMemo';\n\nconst ChipFieldImpl = <\n    RecordType extends Record<string, any> = Record<string, any>,\n>(\n    props: ChipFieldProps<RecordType>\n) => {\n    const { className, emptyText, ...rest } = props;\n    const value = useFieldValue(props);\n    const translate = useTranslate();\n\n    if (value == null && emptyText) {\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        );\n    }\n\n    return (\n        <StyledChip\n            className={clsx(ChipFieldClasses.chip, className)}\n            label={value}\n            {...sanitizeFieldRestProps(rest)}\n        />\n    );\n};\nChipFieldImpl.displayName = 'ChipFieldImpl';\n\nexport const ChipField = genericMemo(ChipFieldImpl);\n\nexport interface ChipFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType>,\n        Omit<ChipProps, 'label' | 'children'> {\n    /**\n     * @internal do not use (prop required for TS to be able to cast ChipField as FunctionComponent)\n     */\n    children?: React.ReactNode;\n}\n\nconst PREFIX = 'RaChipField';\n\nconst ChipFieldClasses = {\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledChip = styled(Chip, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`&.${ChipFieldClasses.chip}`]: { cursor: 'inherit' },\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,IAAmB,MAAM,oBAAoB;AACpD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,aAAa,EAAEC,YAAY,QAAQ,SAAS;AAErD,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE,SAASC,WAAW,QAAQ,eAAe;AAE3C,IAAMC,aAAa,GAAG,SAAAA,CAGlBC,KAAiC;EAEzB,IAAAC,SAAS,GAAyBD,KAAK,CAAAC,SAA9B;IAAEC,SAAS,GAAcF,KAAK,CAAAE,SAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKJ,KAAK,EAAzC,0BAAiC,CAAF;EACrC,IAAMK,KAAK,GAAGV,aAAa,CAACK,KAAK,CAAC;EAClC,IAAMM,SAAS,GAAGV,YAAY,EAAE;EAEhC,IAAIS,KAAK,IAAI,IAAI,IAAIH,SAAS,EAAE;IAC5B,OACIZ,KAAA,CAAAiB,aAAA,CAACd,UAAU,EAAAe,QAAA;MACPC,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfT,SAAS,EAAEA;IAAS,GAChBJ,sBAAsB,CAACM,IAAI,CAAC,GAE/BD,SAAS,IAAII,SAAS,CAACJ,SAAS,EAAE;MAAES,CAAC,EAAET;IAAS,CAAE,CAAC,CAC3C;;EAIrB,OACIZ,KAAA,CAAAiB,aAAA,CAACK,UAAU,EAAAJ,QAAA;IACPP,SAAS,EAAEP,IAAI,CAACmB,gBAAgB,CAACC,IAAI,EAAEb,SAAS,CAAC;IACjDc,KAAK,EAAEV;EAAK,GACRR,sBAAsB,CAACM,IAAI,CAAC,EAClC;AAEV,CAAC;AACDJ,aAAa,CAACiB,WAAW,GAAG,eAAe;AAE3C,OAAO,IAAMC,SAAS,GAAGnB,WAAW,CAACC,aAAa,CAAC;AAYnD,IAAMmB,MAAM,GAAG,aAAa;AAE5B,IAAML,gBAAgB,GAAG;EACrBC,IAAI,EAAE,GAAAK,MAAA,CAAGD,MAAM;CAClB;AAED,IAAMN,UAAU,GAAGrB,MAAM,CAACC,IAAI,EAAE;EAC5B4B,IAAI,EAAEF,MAAM;EACZG,iBAAiB,EAAE,SAAAA,CAACrB,KAAK,EAAEsB,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,EAAAC,EAAA,OACEA,EAAA,CAAC,KAAAL,MAAA,CAAKN,gBAAgB,CAACC,IAAI,CAAE,IAAG;EAAEW,MAAM,EAAE;AAAS,CAAE,E,IACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}