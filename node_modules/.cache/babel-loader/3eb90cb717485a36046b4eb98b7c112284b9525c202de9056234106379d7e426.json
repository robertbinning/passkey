{"ast":null,"code":"import * as React from 'react';\nimport { ListContextProvider, useList, useFieldValue } from 'ra-core';\nimport { genericMemo } from './genericMemo';\n/**\n * Renders an embedded array of objects.\n *\n * ArrayField creates a ListContext with the field value, and renders its children components -\n * usually iterator components like Datagrid, SingleFieldList, or SimpleList.\n *\n * @example // Display all the tags of the current post as `<Chip>` components\n * // const post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // };\n * const PostShow = () => (\n *    <Show>\n *       <SimpleShowLayout>\n *           <ArrayField source=\"tags\">\n *               <SingleFieldList>\n *                   <ChipField source=\"name\" />\n *               </SingleFieldList>\n *           </ArrayField>\n *      </SimpleShowLayout>\n *   </Show>\n * );\n *\n * @example // Display all the backlinks of the current post as a `<Datagrid>`\n * // const post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // };\n * <ArrayField source=\"backlinks\">\n *     <Datagrid>\n *         <DateField source=\"date\" />\n *         <UrlField source=\"url\" />\n *     </Datagrid>\n * </ArrayField>\n *\n * @example // If you need to render a collection of strings, it's often simpler to write your own component\n * const TagsField = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ul>\n *             {record.tags.map(item => (\n *                 <li key={item.name}>{item.name}</li>\n *             ))}\n *         </ul>\n *     );\n * };\n *\n * @see useListContext\n */\nvar ArrayFieldImpl = function (props) {\n  var children = props.children,\n    resource = props.resource,\n    perPage = props.perPage,\n    sort = props.sort,\n    filter = props.filter;\n  var data = useFieldValue(props) || emptyArray;\n  var listContext = useList({\n    data: data,\n    resource: resource,\n    perPage: perPage,\n    sort: sort,\n    filter: filter\n  });\n  return React.createElement(ListContextProvider, {\n    value: listContext\n  }, children);\n};\nArrayFieldImpl.displayName = 'ArrayFieldImpl';\nexport var ArrayField = genericMemo(ArrayFieldImpl);\nvar emptyArray = [];","map":{"version":3,"names":["React","ListContextProvider","useList","useFieldValue","genericMemo","ArrayFieldImpl","props","children","resource","perPage","sort","filter","data","emptyArray","listContext","createElement","value","displayName","ArrayField"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/ArrayField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport {\n    ListContextProvider,\n    useList,\n    SortPayload,\n    FilterPayload,\n    useFieldValue,\n} from 'ra-core';\n\nimport { FieldProps } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Renders an embedded array of objects.\n *\n * ArrayField creates a ListContext with the field value, and renders its children components -\n * usually iterator components like Datagrid, SingleFieldList, or SimpleList.\n *\n * @example // Display all the tags of the current post as `<Chip>` components\n * // const post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // };\n * const PostShow = () => (\n *    <Show>\n *       <SimpleShowLayout>\n *           <ArrayField source=\"tags\">\n *               <SingleFieldList>\n *                   <ChipField source=\"name\" />\n *               </SingleFieldList>\n *           </ArrayField>\n *      </SimpleShowLayout>\n *   </Show>\n * );\n *\n * @example // Display all the backlinks of the current post as a `<Datagrid>`\n * // const post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // };\n * <ArrayField source=\"backlinks\">\n *     <Datagrid>\n *         <DateField source=\"date\" />\n *         <UrlField source=\"url\" />\n *     </Datagrid>\n * </ArrayField>\n *\n * @example // If you need to render a collection of strings, it's often simpler to write your own component\n * const TagsField = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ul>\n *             {record.tags.map(item => (\n *                 <li key={item.name}>{item.name}</li>\n *             ))}\n *         </ul>\n *     );\n * };\n *\n * @see useListContext\n */\nconst ArrayFieldImpl = <\n    RecordType extends Record<string, any> = Record<string, any>,\n>(\n    props: ArrayFieldProps<RecordType>\n) => {\n    const { children, resource, perPage, sort, filter } = props;\n    const data = useFieldValue(props) || emptyArray;\n    const listContext = useList({ data, resource, perPage, sort, filter });\n    return (\n        <ListContextProvider value={listContext}>\n            {children}\n        </ListContextProvider>\n    );\n};\nArrayFieldImpl.displayName = 'ArrayFieldImpl';\n\nexport const ArrayField = genericMemo(ArrayFieldImpl);\n\nexport interface ArrayFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType> {\n    children?: ReactNode;\n    perPage?: number;\n    sort?: SortPayload;\n    filter?: FilterPayload;\n}\n\nconst emptyArray = [];\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SACIC,mBAAmB,EACnBC,OAAO,EAGPC,aAAa,QACV,SAAS;AAGhB,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA,IAAMC,cAAc,GAAG,SAAAA,CAGnBC,KAAkC;EAE1B,IAAAC,QAAQ,GAAsCD,KAAK,CAAAC,QAA3C;IAAEC,QAAQ,GAA4BF,KAAK,CAAAE,QAAjC;IAAEC,OAAO,GAAmBH,KAAK,CAAAG,OAAxB;IAAEC,IAAI,GAAaJ,KAAK,CAAAI,IAAlB;IAAEC,MAAM,GAAKL,KAAK,CAAAK,MAAV;EACjD,IAAMC,IAAI,GAAGT,aAAa,CAACG,KAAK,CAAC,IAAIO,UAAU;EAC/C,IAAMC,WAAW,GAAGZ,OAAO,CAAC;IAAEU,IAAI,EAAAA,IAAA;IAAEJ,QAAQ,EAAAA,QAAA;IAAEC,OAAO,EAAAA,OAAA;IAAEC,IAAI,EAAAA,IAAA;IAAEC,MAAM,EAAAA;EAAA,CAAE,CAAC;EACtE,OACIX,KAAA,CAAAe,aAAA,CAACd,mBAAmB;IAACe,KAAK,EAAEF;EAAW,GAClCP,QAAQ,CACS;AAE9B,CAAC;AACDF,cAAc,CAACY,WAAW,GAAG,gBAAgB;AAE7C,OAAO,IAAMC,UAAU,GAAGd,WAAW,CAACC,cAAc,CAAC;AAWrD,IAAMQ,UAAU,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}