{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useThemeProps } from '@mui/material';\nimport { TranslatableContextProvider, useTranslatable } from 'ra-core';\nimport clsx from 'clsx';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </TranslatableInputs>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </TranslatableInputs>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to Material UI tabs.\n */\nexport var TranslatableInputs = function (inProps) {\n  var _a;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'RaTranslatableInputs'\n  });\n  var className = props.className,\n    defaultLocale = props.defaultLocale,\n    fullWidth = props.fullWidth,\n    locales = props.locales,\n    _b = props.groupKey,\n    groupKey = _b === void 0 ? '' : _b,\n    _c = props.selector,\n    selector = _c === void 0 ? React.createElement(TranslatableInputsTabs, {\n      groupKey: groupKey\n    }) : _c,\n    children = props.children,\n    margin = props.margin,\n    sx = props.sx,\n    _d = props.StackProps,\n    StackProps = _d === void 0 ? {} : _d;\n  var context = useTranslatable({\n    defaultLocale: defaultLocale,\n    locales: locales\n  });\n  return React.createElement(Root, {\n    className: clsx(className, TranslatableInputsClasses.root, (_a = {}, _a[TranslatableInputsClasses.fullWidth] = fullWidth, _a)),\n    sx: sx\n  }, React.createElement(TranslatableContextProvider, {\n    value: context\n  }, selector, locales.map(function (locale) {\n    return React.createElement(TranslatableInputsTabContent, __assign({\n      key: locale,\n      locale: locale,\n      groupKey: groupKey,\n      margin: margin\n    }, StackProps), children);\n  })));\n};\nvar PREFIX = 'RaTranslatableInputs';\nexport var TranslatableInputsClasses = {\n  root: \"\".concat(PREFIX, \"-root\"),\n  fullWidth: \"\".concat(PREFIX, \"-fullWidth\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5)\n  }, _b[\"&.\".concat(TranslatableInputsClasses.fullWidth)] = {\n    width: '100%'\n  }, _b;\n});","map":{"version":3,"names":["React","styled","useThemeProps","TranslatableContextProvider","useTranslatable","clsx","TranslatableInputsTabs","TranslatableInputsTabContent","TranslatableInputs","inProps","props","name","className","defaultLocale","fullWidth","locales","_b","groupKey","_c","selector","createElement","children","margin","sx","_d","StackProps","context","Root","TranslatableInputsClasses","root","_a","value","map","locale","__assign","key","PREFIX","concat","overridesResolver","styles","theme","flexGrow","marginTop","spacing","marginBottom","width"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/TranslatableInputs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { SxProps, styled } from '@mui/material/styles';\nimport { StackProps, useThemeProps } from '@mui/material';\nimport { ReactElement, ReactNode } from 'react';\nimport {\n    TranslatableContextProvider,\n    useTranslatable,\n    UseTranslatableOptions,\n} from 'ra-core';\nimport clsx from 'clsx';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </TranslatableInputs>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </TranslatableInputs>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to Material UI tabs.\n */\nexport const TranslatableInputs = (\n    inProps: TranslatableInputsProps\n): ReactElement => {\n    const props = useThemeProps({\n        props: inProps,\n        name: 'RaTranslatableInputs',\n    });\n    const {\n        className,\n        defaultLocale,\n        fullWidth,\n        locales,\n        groupKey = '',\n        selector = <TranslatableInputsTabs groupKey={groupKey} />,\n        children,\n        margin,\n        sx,\n        StackProps = {},\n    } = props;\n    const context = useTranslatable({ defaultLocale, locales });\n\n    return (\n        <Root\n            className={clsx(className, TranslatableInputsClasses.root, {\n                [TranslatableInputsClasses.fullWidth]: fullWidth,\n            })}\n            sx={sx}\n        >\n            <TranslatableContextProvider value={context}>\n                {selector}\n                {locales.map(locale => (\n                    <TranslatableInputsTabContent\n                        key={locale}\n                        locale={locale}\n                        groupKey={groupKey}\n                        margin={margin}\n                        {...StackProps}\n                    >\n                        {children}\n                    </TranslatableInputsTabContent>\n                ))}\n            </TranslatableContextProvider>\n        </Root>\n    );\n};\n\nexport interface TranslatableInputsProps extends UseTranslatableOptions {\n    className?: string;\n    selector?: ReactElement;\n    children: ReactNode;\n    fullWidth?: boolean;\n    groupKey?: string;\n    margin?: 'none' | 'normal' | 'dense';\n    sx?: SxProps;\n    StackProps?: StackProps;\n}\n\nconst PREFIX = 'RaTranslatableInputs';\n\nexport const TranslatableInputsClasses = {\n    root: `${PREFIX}-root`,\n    fullWidth: `${PREFIX}-fullWidth`,\n};\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5),\n\n    [`&.${TranslatableInputsClasses.fullWidth}`]: {\n        width: '100%',\n    },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}