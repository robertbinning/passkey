{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport purify from 'dompurify';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { genericMemo } from './genericMemo';\n/**\n * Render an HTML string as rich text\n *\n * Note: This component leverages the `dangerouslySetInnerHTML` attribute,\n * but uses the DomPurify library to sanitize the HTML before rendering it.\n *\n * It means it is safe from Cross-Site Scripting (XSS) attacks - but it's still\n * a good practice to sanitize the value server-side.\n *\n * @example\n * <RichTextField source=\"description\" />\n *\n * @example // remove all tags and output text only\n * <RichTextField source=\"description\" stripTags />\n */\nvar RichTextFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    _a = props.stripTags,\n    stripTags = _a === void 0 ? false : _a,\n    purifyOptions = props.purifyOptions,\n    rest = __rest(props, [\"className\", \"emptyText\", \"stripTags\", \"purifyOptions\"]);\n  var value = useFieldValue(props);\n  var translate = useTranslate();\n  return React.createElement(Typography, __assign({\n    className: className,\n    variant: \"body2\",\n    component: \"span\"\n  }, sanitizeFieldRestProps(rest)), value == null && emptyText ? translate(emptyText, {\n    _: emptyText\n  }) : stripTags ? removeTags(value) : React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: purify.sanitize(value, purifyOptions || {})\n    }\n  }));\n};\nRichTextFieldImpl.displayName = 'RichTextFieldImpl';\nexport var RichTextField = genericMemo(RichTextFieldImpl);\nexport var removeTags = function (input) {\n  return input ? input.replace(/<[^>]+>/gm, '') : '';\n};","map":{"version":3,"names":["React","Typography","useFieldValue","useTranslate","purify","sanitizeFieldRestProps","genericMemo","RichTextFieldImpl","props","className","emptyText","_a","stripTags","purifyOptions","rest","__rest","value","translate","createElement","__assign","variant","component","_","removeTags","dangerouslySetInnerHTML","__html","sanitize","displayName","RichTextField","input","replace"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/RichTextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport purify from 'dompurify';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Render an HTML string as rich text\n *\n * Note: This component leverages the `dangerouslySetInnerHTML` attribute,\n * but uses the DomPurify library to sanitize the HTML before rendering it.\n *\n * It means it is safe from Cross-Site Scripting (XSS) attacks - but it's still\n * a good practice to sanitize the value server-side.\n *\n * @example\n * <RichTextField source=\"description\" />\n *\n * @example // remove all tags and output text only\n * <RichTextField source=\"description\" stripTags />\n */\nconst RichTextFieldImpl = <\n    RecordType extends Record<string, any> = Record<string, any>,\n>(\n    props: RichTextFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        stripTags = false,\n        purifyOptions,\n        ...rest\n    } = props;\n    const value = useFieldValue(props);\n    const translate = useTranslate();\n\n    return (\n        <Typography\n            className={className}\n            variant=\"body2\"\n            component=\"span\"\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {value == null && emptyText ? (\n                translate(emptyText, { _: emptyText })\n            ) : stripTags ? (\n                removeTags(value)\n            ) : (\n                <span\n                    dangerouslySetInnerHTML={{\n                        __html: purify.sanitize(value, purifyOptions || {}),\n                    }}\n                />\n            )}\n        </Typography>\n    );\n};\nRichTextFieldImpl.displayName = 'RichTextFieldImpl';\n\nexport const RichTextField = genericMemo(RichTextFieldImpl);\n\n// We only support the case when sanitize() returns a string\n// hence we need to force the RETURN_DOM_FRAGMENT and RETURN_DOM\n// options to false\nexport type PurifyOptions = purify.Config & {\n    RETURN_DOM_FRAGMENT?: false | undefined;\n    RETURN_DOM?: false | undefined;\n};\n\nexport interface RichTextFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    stripTags?: boolean;\n    purifyOptions?: PurifyOptions;\n}\n\nexport const removeTags = (input: string) =>\n    input ? input.replace(/<[^>]+>/gm, '') : '';\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAA+B,MAAM,0BAA0B;AACtE,SAASC,aAAa,EAAEC,YAAY,QAAQ,SAAS;AACrD,OAAOC,MAAM,MAAM,WAAW;AAE9B,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;;;;;;;;AAeA,IAAMC,iBAAiB,GAAG,SAAAA,CAGtBC,KAAqC;EAGjC,IAAAC,SAAS,GAKTD,KAAK,CAAAC,SALI;IACTC,SAAS,GAITF,KAAK,CAAAE,SAJI;IACTC,EAAA,GAGAH,KAAK,CAAAI,SAHY;IAAjBA,SAAS,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IACjBE,aAAa,GAEbL,KAAK,CAAAK,aAFQ;IACVC,IAAI,GAAAC,MAAA,CACPP,KAAK,EANH,wDAML,CADU;EAEX,IAAMQ,KAAK,GAAGd,aAAa,CAACM,KAAK,CAAC;EAClC,IAAMS,SAAS,GAAGd,YAAY,EAAE;EAEhC,OACIH,KAAA,CAAAkB,aAAA,CAACjB,UAAU,EAAAkB,QAAA;IACPV,SAAS,EAAEA,SAAS;IACpBW,OAAO,EAAC,OAAO;IACfC,SAAS,EAAC;EAAM,GACZhB,sBAAsB,CAACS,IAAI,CAAC,GAE/BE,KAAK,IAAI,IAAI,IAAIN,SAAS,GACvBO,SAAS,CAACP,SAAS,EAAE;IAAEY,CAAC,EAAEZ;EAAS,CAAE,CAAC,GACtCE,SAAS,GACTW,UAAU,CAACP,KAAK,CAAC,GAEjBhB,KAAA,CAAAkB,aAAA;IACIM,uBAAuB,EAAE;MACrBC,MAAM,EAAErB,MAAM,CAACsB,QAAQ,CAACV,KAAK,EAAEH,aAAa,IAAI,EAAE;;EACrD,EAER,CACQ;AAErB,CAAC;AACDN,iBAAiB,CAACoB,WAAW,GAAG,mBAAmB;AAEnD,OAAO,IAAMC,aAAa,GAAGtB,WAAW,CAACC,iBAAiB,CAAC;AAkB3D,OAAO,IAAMgB,UAAU,GAAG,SAAAA,CAACM,KAAa;EACpC,OAAAA,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,EAAE;AAA3C,CAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}