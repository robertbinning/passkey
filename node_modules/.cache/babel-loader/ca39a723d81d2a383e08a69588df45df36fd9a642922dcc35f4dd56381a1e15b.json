{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useMemo, useRef } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The update parameters { id, data, previousData, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.previousData The record before the update is applied\n * @prop params.meta Optional meta data\n *\n * @returns The current mutation state. Destructure as [update, { data, error, isPending }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { isPending: false, isIdle: true }]\n * - start:   [update, { isPending: true }]\n * - success: [update, { data: [data from response], isPending: false, isSuccess: true }]\n * - error:   [update, { error: [error from response], isPending: false, isError: true }]\n *\n * The update() function must be called with a resource and a parameter object: update(resource, { id, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isPending, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', { id: record.id, data: diff, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isPending, error }] = useUpdate('likes', { id: record.id, data: diff, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={() => update()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', { id, data: diff, previousData: product });\n *                    \\-- data is Product\n */\nexport var useUpdate = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var id = params.id,\n    data = params.data,\n    meta = params.meta;\n  var _a = options.mutationMode,\n    mutationMode = _a === void 0 ? 'pessimistic' : _a,\n    getMutateWithMiddlewares = options.getMutateWithMiddlewares,\n    mutationOptions = __rest(options, [\"mutationMode\", \"getMutateWithMiddlewares\"]);\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n  // Ref that stores the mutation with middlewares to avoid losing them if the calling component is unmounted\n  var mutateWithMiddlewares = useRef(dataProvider.update);\n  // We need to store the call-time onError and onSettled in refs to be able to call them in the useMutation hook even\n  // when the calling component is unmounted\n  var callTimeOnError = useRef();\n  var callTimeOnSettled = useRef();\n  // We don't need to keep a ref on the onSuccess callback as we call it ourselves for optimistic and\n  // undoable mutations. There is a limitation though: if one of the side effects applied by the onSuccess callback\n  // unmounts the component that called the useUpdate hook (redirect for instance), it must be the last one applied,\n  // otherwise the other side effects may not applied.\n  var hasCallTimeOnSuccess = useRef(false);\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n      id = _a.id,\n      data = _a.data;\n    // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n    // because setQueryData doesn't accept a stale time option\n    var now = Date.now();\n    var updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n    var updateColl = function (old) {\n      if (!old) return old;\n      var index = old.findIndex(\n      // eslint-disable-next-line eqeqeq\n      function (record) {\n        return record.id == id;\n      });\n      if (index === -1) {\n        return old;\n      }\n      return __spreadArray(__spreadArray(__spreadArray([], old.slice(0, index), true), [__assign(__assign({}, old[index]), data)], false), old.slice(index + 1), true);\n    };\n    queryClient.setQueryData([resource, 'getOne', {\n      id: String(id),\n      meta: meta\n    }], function (record) {\n      return __assign(__assign({}, record), data);\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData({\n      queryKey: [resource, 'getList']\n    }, function (res) {\n      return res && res.data ? __assign(__assign({}, res), {\n        data: updateColl(res.data)\n      }) : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData({\n      queryKey: [resource, 'getInfiniteList']\n    }, function (res) {\n      return res && res.pages ? __assign(__assign({}, res), {\n        pages: res.pages.map(function (page) {\n          return __assign(__assign({}, page), {\n            data: updateColl(page.data)\n          });\n        })\n      }) : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData({\n      queryKey: [resource, 'getMany']\n    }, function (coll) {\n      return coll && coll.length > 0 ? updateColl(coll) : coll;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData({\n      queryKey: [resource, 'getManyReference']\n    }, function (res) {\n      return res && res.data ? {\n        data: updateColl(res.data),\n        total: res.total\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n  };\n  var mutation = useMutation(__assign(__assign({\n    mutationFn: function (_a) {\n      var _b = _a === void 0 ? {} : _a,\n        _c = _b.resource,\n        callTimeResource = _c === void 0 ? resource : _c,\n        _d = _b.id,\n        callTimeId = _d === void 0 ? paramsRef.current.id : _d,\n        _e = _b.data,\n        callTimeData = _e === void 0 ? paramsRef.current.data : _e,\n        _f = _b.meta,\n        callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f,\n        _g = _b.previousData,\n        callTimePreviousData = _g === void 0 ? paramsRef.current.previousData : _g;\n      if (!callTimeResource) {\n        throw new Error('useUpdate mutation requires a non-empty resource');\n      }\n      if (!callTimeId) {\n        throw new Error('useUpdate mutation requires a non-empty id');\n      }\n      if (!callTimeData) {\n        throw new Error('useUpdate mutation requires a non-empty data object');\n      }\n      return mutateWithMiddlewares.current(callTimeResource, {\n        id: callTimeId,\n        data: callTimeData,\n        previousData: callTimePreviousData,\n        meta: callTimeMeta\n      }).then(function (_a) {\n        var data = _a.data;\n        return data;\n      });\n    }\n  }, mutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!mutationOptions.onMutate) return [3 /*break*/, 2];\n              return [4 /*yield*/, mutationOptions.onMutate(variables)];\n            case 1:\n              userContext = _a.sent() || {};\n              return [2 /*return*/, __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n            case 2:\n              // Return a context object with the snapshot value\n              return [2 /*return*/, {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n            value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n      if (callTimeOnError.current) {\n        return callTimeOnError.current(error, variables, context);\n      }\n      if (mutationOptions.onError) {\n        return mutationOptions.onError(error, variables, context);\n      }\n      // call-time error callback is executed by react-query\n    },\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n          callTimeResource = _a === void 0 ? resource : _a,\n          _b = variables.id,\n          callTimeId = _b === void 0 ? id : _b;\n        updateCache({\n          resource: callTimeResource,\n          id: callTimeId,\n          data: data\n        });\n        if (mutationOptions.onSuccess && !hasCallTimeOnSuccess.current) {\n          mutationOptions.onSuccess(data, variables, context);\n        }\n      }\n    },\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var queryKey = _a[0];\n          queryClient.invalidateQueries({\n            queryKey: queryKey\n          });\n        });\n      }\n      if (callTimeOnSettled.current) {\n        return callTimeOnSettled.current(data, error, variables, context);\n      }\n      if (mutationOptions.onSettled) {\n        return mutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n  var update = function (callTimeResource, callTimeParams, callTimeOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (callTimeOptions === void 0) {\n      callTimeOptions = {};\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, _a, returnPromise, onError, onSettled, onSuccess, otherCallTimeOptions, _b, callTimeId, _c, callTimeData, _d, callTimeMeta, previousRecord, queryKeys;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            mutationMode = callTimeOptions.mutationMode, _a = callTimeOptions.returnPromise, returnPromise = _a === void 0 ? mutationOptions.returnPromise : _a, onError = callTimeOptions.onError, onSettled = callTimeOptions.onSettled, onSuccess = callTimeOptions.onSuccess, otherCallTimeOptions = __rest(callTimeOptions, [\"mutationMode\", \"returnPromise\", \"onError\", \"onSettled\", \"onSuccess\"]);\n            // Store the mutation with middlewares to avoid losing them if the calling component is unmounted\n            if (getMutateWithMiddlewares) {\n              mutateWithMiddlewares.current = getMutateWithMiddlewares(dataProvider.update.bind(dataProvider));\n            } else {\n              mutateWithMiddlewares.current = dataProvider.update;\n            }\n            // We need to keep the onSuccess callback here and not in the useMutation for undoable mutations\n            hasCallTimeOnSuccess.current = !!onSuccess;\n            // We need to store the onError and onSettled callbacks here to be able to call them in the useMutation hook\n            // so that they are called even when the calling component is unmounted\n            callTimeOnError.current = onError;\n            callTimeOnSettled.current = onSettled;\n            // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n            paramsRef.current = params;\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n            if (returnPromise && mode.current !== 'pessimistic') {\n              console.warn('The returnPromise parameter can only be used if the mutationMode is set to pessimistic');\n            }\n            if (mode.current === 'pessimistic') {\n              if (returnPromise) {\n                return [2 /*return*/, mutation.mutateAsync(__assign({\n                  resource: callTimeResource\n                }, callTimeParams), __assign({\n                  onSuccess: onSuccess\n                }, otherCallTimeOptions))];\n              }\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), __assign({\n                onSuccess: onSuccess\n              }, otherCallTimeOptions))];\n            }\n            _b = callTimeParams.id, callTimeId = _b === void 0 ? id : _b, _c = callTimeParams.data, callTimeData = _c === void 0 ? data : _c, _d = callTimeParams.meta, callTimeMeta = _d === void 0 ? meta : _d;\n            previousRecord = queryClient.getQueryData([callTimeResource, 'getOne', {\n              id: String(callTimeId),\n              meta: callTimeMeta\n            }]);\n            queryKeys = [[callTimeResource, 'getOne', {\n              id: String(callTimeId),\n              meta: callTimeMeta\n            }], [callTimeResource, 'getList'], [callTimeResource, 'getInfiniteList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n             */\n            snapshot.current = queryKeys.reduce(function (prev, queryKey) {\n              return prev.concat(queryClient.getQueriesData({\n                queryKey: queryKey\n              }));\n            }, []);\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            return [4 /*yield*/, Promise.all(snapshot.current.map(function (_a) {\n              var queryKey = _a[0];\n              return queryClient.cancelQueries({\n                queryKey: queryKey\n              });\n            }))];\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _e.sent();\n            // Optimistically update to the new value\n            updateCache({\n              resource: callTimeResource,\n              id: callTimeId,\n              data: callTimeData\n            });\n            // run the success callbacks during the next tick\n            setTimeout(function () {\n              if (onSuccess) {\n                onSuccess(__assign(__assign({}, previousRecord), callTimeData), __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              } else if (mutationOptions.onSuccess && !hasCallTimeOnSuccess.current) {\n                mutationOptions.onSuccess(__assign(__assign({}, previousRecord), callTimeData), __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }\n            }, 0);\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams))];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                      value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams));\n                }\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  var mutationResult = useMemo(function () {\n    return __assign({\n      isLoading: mutation.isPending\n    }, mutation);\n  }, [mutation]);\n  return [useEvent(update), mutationResult];\n};","map":{"version":3,"names":["useMemo","useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useEvent","useUpdate","resource","params","options","dataProvider","queryClient","id","data","meta","_a","mutationMode","getMutateWithMiddlewares","mutationOptions","__rest","mode","paramsRef","snapshot","mutateWithMiddlewares","update","callTimeOnError","callTimeOnSettled","hasCallTimeOnSuccess","updateCache","now","Date","updatedAt","current","updateColl","old","index","findIndex","record","__spreadArray","slice","__assign","setQueryData","String","setQueriesData","queryKey","res","pages","map","page","coll","length","total","mutation","mutationFn","_b","_c","callTimeResource","_d","callTimeId","_e","callTimeData","_f","callTimeMeta","_g","previousData","callTimePreviousData","Error","then","onMutate","variables","__awaiter","userContext","sent","onError","error","context","forEach","key","value","onSuccess","onSettled","invalidateQueries","callTimeParams","callTimeOptions","returnPromise","otherCallTimeOptions","bind","console","warn","mutateAsync","mutate","previousRecord","getQueryData","queryKeys","reduce","prev","concat","getQueriesData","Promise","all","cancelQueries","setTimeout","once","isUndo","mutationResult","isLoading","isPending"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/dataProvider/useUpdate.ts"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n    UseInfiniteQueryResult,\n    InfiniteData,\n} from '@tanstack/react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport {\n    RaRecord,\n    UpdateParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n    GetInfiniteListResult,\n    DataProvider,\n} from '../types';\nimport { useEvent } from '../util';\n\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The update parameters { id, data, previousData, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.previousData The record before the update is applied\n * @prop params.meta Optional meta data\n *\n * @returns The current mutation state. Destructure as [update, { data, error, isPending }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { isPending: false, isIdle: true }]\n * - start:   [update, { isPending: true }]\n * - success: [update, { data: [data from response], isPending: false, isSuccess: true }]\n * - error:   [update, { error: [error from response], isPending: false, isError: true }]\n *\n * The update() function must be called with a resource and a parameter object: update(resource, { id, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isPending, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', { id: record.id, data: diff, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isPending, error }] = useUpdate('likes', { id: record.id, data: diff, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={() => update()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', { id, data: diff, previousData: product });\n *                    \\-- data is Product\n */\nexport const useUpdate = <RecordType extends RaRecord = any, ErrorType = Error>(\n    resource?: string,\n    params: Partial<UpdateParams<RecordType>> = {},\n    options: UseUpdateOptions<RecordType, ErrorType> = {}\n): UseUpdateResult<RecordType, boolean, ErrorType> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const { id, data, meta } = params;\n    const {\n        mutationMode = 'pessimistic',\n        getMutateWithMiddlewares,\n        ...mutationOptions\n    } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef = useRef<Partial<UpdateParams<RecordType>>>(params);\n    const snapshot = useRef<Snapshot>([]);\n    // Ref that stores the mutation with middlewares to avoid losing them if the calling component is unmounted\n    const mutateWithMiddlewares = useRef(dataProvider.update);\n    // We need to store the call-time onError and onSettled in refs to be able to call them in the useMutation hook even\n    // when the calling component is unmounted\n    const callTimeOnError =\n        useRef<UseUpdateOptions<RecordType, ErrorType>['onError']>();\n    const callTimeOnSettled =\n        useRef<UseUpdateOptions<RecordType, ErrorType>['onSettled']>();\n\n    // We don't need to keep a ref on the onSuccess callback as we call it ourselves for optimistic and\n    // undoable mutations. There is a limitation though: if one of the side effects applied by the onSuccess callback\n    // unmounts the component that called the useUpdate hook (redirect for instance), it must be the last one applied,\n    // otherwise the other side effects may not applied.\n    const hasCallTimeOnSuccess = useRef(false);\n\n    const updateCache = ({ resource, id, data }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const now = Date.now();\n        const updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return old;\n            const index = old.findIndex(\n                // eslint-disable-next-line eqeqeq\n                record => record.id == id\n            );\n            if (index === -1) {\n                return old;\n            }\n            return [\n                ...old.slice(0, index),\n                { ...old[index], ...data } as RecordType,\n                ...old.slice(index + 1),\n            ];\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        queryClient.setQueryData(\n            [resource, 'getOne', { id: String(id), meta }],\n            (record: RecordType) => ({ ...record, ...data }),\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getList'] },\n            (res: GetListResult) =>\n                res && res.data ? { ...res, data: updateColl(res.data) } : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getInfiniteList'] },\n            (\n                res: UseInfiniteQueryResult<\n                    InfiniteData<GetInfiniteListResult>\n                >['data']\n            ) =>\n                res && res.pages\n                    ? {\n                          ...res,\n                          pages: res.pages.map(page => ({\n                              ...page,\n                              data: updateColl(page.data),\n                          })),\n                      }\n                    : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getMany'] },\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getManyReference'] },\n            (res: GetListResult) =>\n                res && res.data\n                    ? { data: updateColl(res.data), total: res.total }\n                    : res,\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        RecordType,\n        ErrorType,\n        Partial<UseUpdateMutateParams<RecordType>>\n    >({\n        mutationFn: ({\n            resource: callTimeResource = resource,\n            id: callTimeId = paramsRef.current.id,\n            data: callTimeData = paramsRef.current.data,\n            meta: callTimeMeta = paramsRef.current.meta,\n            previousData: callTimePreviousData = paramsRef.current.previousData,\n        } = {}) => {\n            if (!callTimeResource) {\n                throw new Error(\n                    'useUpdate mutation requires a non-empty resource'\n                );\n            }\n            if (!callTimeId) {\n                throw new Error('useUpdate mutation requires a non-empty id');\n            }\n            if (!callTimeData) {\n                throw new Error(\n                    'useUpdate mutation requires a non-empty data object'\n                );\n            }\n\n            return mutateWithMiddlewares\n                .current(callTimeResource, {\n                    id: callTimeId,\n                    data: callTimeData,\n                    previousData: callTimePreviousData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data);\n        },\n        ...mutationOptions,\n        onMutate: async (\n            variables: Partial<UseUpdateMutateParams<RecordType>>\n        ) => {\n            if (mutationOptions.onMutate) {\n                const userContext =\n                    (await mutationOptions.onMutate(variables)) || {};\n                return {\n                    snapshot: snapshot.current,\n                    // @ts-ignore\n                    ...userContext,\n                };\n            } else {\n                // Return a context object with the snapshot value\n                return { snapshot: snapshot.current };\n            }\n        },\n        onError: (error, variables = {}, context: { snapshot: Snapshot }) => {\n            if (mode.current === 'optimistic' || mode.current === 'undoable') {\n                // If the mutation fails, use the context returned from onMutate to rollback\n                context.snapshot.forEach(([key, value]) => {\n                    queryClient.setQueryData(key, value);\n                });\n            }\n\n            if (callTimeOnError.current) {\n                return callTimeOnError.current(error, variables, context);\n            }\n            if (mutationOptions.onError) {\n                return mutationOptions.onError(error, variables, context);\n            }\n            // call-time error callback is executed by react-query\n        },\n        onSuccess: (\n            data: RecordType,\n            variables: Partial<UseUpdateMutateParams<RecordType>> = {},\n            context: unknown\n        ) => {\n            if (mode.current === 'pessimistic') {\n                // update the getOne and getList query cache with the new result\n                const {\n                    resource: callTimeResource = resource,\n                    id: callTimeId = id,\n                } = variables;\n                updateCache({\n                    resource: callTimeResource,\n                    id: callTimeId,\n                    data,\n                });\n\n                if (\n                    mutationOptions.onSuccess &&\n                    !hasCallTimeOnSuccess.current\n                ) {\n                    mutationOptions.onSuccess(data, variables, context);\n                }\n            }\n        },\n        onSettled: (\n            data,\n            error,\n            variables = {},\n            context: { snapshot: Snapshot }\n        ) => {\n            if (mode.current === 'optimistic' || mode.current === 'undoable') {\n                // Always refetch after error or success:\n                context.snapshot.forEach(([queryKey]) => {\n                    queryClient.invalidateQueries({ queryKey });\n                });\n            }\n\n            if (callTimeOnSettled.current) {\n                return callTimeOnSettled.current(\n                    data,\n                    error,\n                    variables,\n                    context\n                );\n            }\n            if (mutationOptions.onSettled) {\n                return mutationOptions.onSettled(\n                    data,\n                    error,\n                    variables,\n                    context\n                );\n            }\n        },\n    });\n\n    const update = async (\n        callTimeResource: string | undefined = resource,\n        callTimeParams: Partial<UpdateParams<RecordType>> = {},\n        callTimeOptions: MutateOptions<\n            RecordType,\n            ErrorType,\n            Partial<UseUpdateMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: boolean } = {}\n    ) => {\n        const {\n            mutationMode,\n            returnPromise = mutationOptions.returnPromise,\n            onError,\n            onSettled,\n            onSuccess,\n            ...otherCallTimeOptions\n        } = callTimeOptions;\n\n        // Store the mutation with middlewares to avoid losing them if the calling component is unmounted\n        if (getMutateWithMiddlewares) {\n            mutateWithMiddlewares.current = getMutateWithMiddlewares(\n                dataProvider.update.bind(dataProvider)\n            );\n        } else {\n            mutateWithMiddlewares.current = dataProvider.update;\n        }\n\n        // We need to keep the onSuccess callback here and not in the useMutation for undoable mutations\n        hasCallTimeOnSuccess.current = !!onSuccess;\n        // We need to store the onError and onSettled callbacks here to be able to call them in the useMutation hook\n        // so that they are called even when the calling component is unmounted\n        callTimeOnError.current = onError;\n        callTimeOnSettled.current = onSettled;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (returnPromise && mode.current !== 'pessimistic') {\n            console.warn(\n                'The returnPromise parameter can only be used if the mutationMode is set to pessimistic'\n            );\n        }\n\n        if (mode.current === 'pessimistic') {\n            if (returnPromise) {\n                return mutation.mutateAsync(\n                    { resource: callTimeResource, ...callTimeParams },\n                    // We don't pass onError and onSettled here as we will call them in the useMutation hook side effects\n                    { onSuccess, ...otherCallTimeOptions }\n                );\n            }\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                // We don't pass onError and onSettled here as we will call them in the useMutation hook side effects\n                { onSuccess, ...otherCallTimeOptions }\n            );\n        }\n\n        const {\n            id: callTimeId = id,\n            data: callTimeData = data,\n            meta: callTimeMeta = meta,\n        } = callTimeParams;\n\n        // optimistic update as documented in https://react-query-v3.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const previousRecord = queryClient.getQueryData<RecordType>([\n            callTimeResource,\n            'getOne',\n            { id: String(callTimeId), meta: callTimeMeta },\n        ]);\n\n        const queryKeys = [\n            [\n                callTimeResource,\n                'getOne',\n                { id: String(callTimeId), meta: callTimeMeta },\n            ],\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getInfiniteList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, queryKey) =>\n                prev.concat(queryClient.getQueriesData({ queryKey })),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([queryKey]) =>\n                queryClient.cancelQueries({ queryKey })\n            )\n        );\n\n        // Optimistically update to the new value\n        updateCache({\n            resource: callTimeResource,\n            id: callTimeId,\n            data: callTimeData,\n        });\n\n        // run the success callbacks during the next tick\n        setTimeout(() => {\n            if (onSuccess) {\n                onSuccess(\n                    { ...previousRecord, ...callTimeData } as RecordType,\n                    { resource: callTimeResource, ...callTimeParams },\n                    { snapshot: snapshot.current }\n                );\n            } else if (\n                mutationOptions.onSuccess &&\n                !hasCallTimeOnSuccess.current\n            ) {\n                mutationOptions.onSuccess(\n                    { ...previousRecord, ...callTimeData } as RecordType,\n                    { resource: callTimeResource, ...callTimeParams },\n                    { snapshot: snapshot.current }\n                );\n            }\n        }, 0);\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate({\n                resource: callTimeResource,\n                // We don't pass onError and onSettled here as we will call them in the useMutation hook side effects\n                ...callTimeParams,\n            });\n        } else {\n            // undoable mutation: register the mutation for later\n            undoableEventEmitter.once('end', ({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate({\n                        resource: callTimeResource,\n                        ...callTimeParams,\n                    });\n                }\n            });\n        }\n    };\n\n    const mutationResult = useMemo(\n        () => ({\n            isLoading: mutation.isPending,\n            ...mutation,\n        }),\n        [mutation]\n    );\n\n    return [useEvent(update), mutationResult];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseUpdateMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    id?: RecordType['id'];\n    data?: Partial<RecordType>;\n    previousData?: any;\n    meta?: any;\n}\n\nexport type UseUpdateOptions<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> = UseMutationOptions<\n    RecordType,\n    ErrorType,\n    Partial<Omit<UseUpdateMutateParams<RecordType>, 'mutationFn'>>\n> & {\n    mutationMode?: MutationMode;\n    returnPromise?: boolean;\n    getMutateWithMiddlewares?: <\n        UpdateFunctionType extends\n            DataProvider['update'] = DataProvider['update'],\n    >(\n        mutate: UpdateFunctionType\n    ) => (\n        ...Params: Parameters<UpdateFunctionType>\n    ) => ReturnType<UpdateFunctionType>;\n};\n\nexport type UpdateMutationFunction<\n    RecordType extends RaRecord = any,\n    TReturnPromise extends boolean = boolean,\n    ErrorType = Error,\n> = (\n    resource?: string,\n    params?: Partial<UpdateParams<RecordType>>,\n    options?: MutateOptions<\n        RecordType,\n        ErrorType,\n        Partial<UseUpdateMutateParams<RecordType>>,\n        unknown\n    > & { mutationMode?: MutationMode; returnPromise?: TReturnPromise }\n) => Promise<TReturnPromise extends true ? RecordType : void>;\n\nexport type UseUpdateResult<\n    RecordType extends RaRecord = any,\n    TReturnPromise extends boolean = boolean,\n    ErrorType = Error,\n> = [\n    UpdateMutationFunction<RecordType, TReturnPromise, ErrorType>,\n    UseMutationResult<\n        RecordType,\n        ErrorType,\n        Partial<UpdateParams<RecordType> & { resource?: string }>,\n        unknown\n    >,\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}