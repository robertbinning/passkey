{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Children, useCallback, useMemo, useRef, useState } from 'react';\nimport { styled, useThemeProps } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport { FormDataConsumer, useRecordContext, useTranslate, useWrappedSource } from 'ra-core';\nimport { useFormContext } from 'react-hook-form';\nimport { useArrayInput } from './useArrayInput';\nimport { SimpleFormIteratorClasses, SimpleFormIteratorPrefix } from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport { SimpleFormIteratorItem } from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { ClearArrayButton } from './ClearArrayButton';\nimport { Confirm } from '../../layout';\nexport var SimpleFormIterator = function (inProps) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'RaSimpleFormIterator'\n  });\n  var _a = props.addButton,\n    addButton = _a === void 0 ? React.createElement(DefaultAddItemButton, null) : _a,\n    removeButton = props.removeButton,\n    reOrderButtons = props.reOrderButtons,\n    children = props.children,\n    className = props.className,\n    resource = props.resource,\n    disabled = props.disabled,\n    _b = props.disableAdd,\n    disableAdd = _b === void 0 ? false : _b,\n    disableClear = props.disableClear,\n    _c = props.disableRemove,\n    disableRemove = _c === void 0 ? false : _c,\n    disableReordering = props.disableReordering,\n    inline = props.inline,\n    _d = props.getItemLabel,\n    getItemLabel = _d === void 0 ? false : _d,\n    fullWidth = props.fullWidth,\n    sx = props.sx;\n  var finalSource = useWrappedSource('');\n  if (!finalSource) {\n    throw new Error('SimpleFormIterator can only be called within an iterator input like ArrayInput');\n  }\n  var _e = useState(false),\n    confirmIsOpen = _e[0],\n    setConfirmIsOpen = _e[1];\n  var _f = useArrayInput(props),\n    append = _f.append,\n    fields = _f.fields,\n    move = _f.move,\n    remove = _f.remove,\n    replace = _f.replace;\n  var _g = useFormContext(),\n    resetField = _g.resetField,\n    trigger = _g.trigger,\n    getValues = _g.getValues;\n  var translate = useTranslate();\n  var record = useRecordContext(props);\n  var initialDefaultValue = useRef({});\n  var removeField = useCallback(function (index) {\n    remove(index);\n    var isScalarArray = getValues(finalSource).every(function (value) {\n      return typeof value !== 'object';\n    });\n    if (isScalarArray) {\n      // Trigger validation on the Array to avoid ghost errors.\n      // Otherwise, validation errors on removed fields might still be displayed\n      trigger(finalSource);\n    }\n  }, [remove, trigger, finalSource, getValues]);\n  if (fields.length > 0) {\n    var _h = fields[0],\n      id = _h.id,\n      rest = __rest(_h, [\"id\"]);\n    initialDefaultValue.current = rest;\n    for (var k in initialDefaultValue.current) initialDefaultValue.current[k] = null;\n  }\n  var addField = useCallback(function (item) {\n    if (item === void 0) {\n      item = undefined;\n    }\n    var defaultValue = item;\n    if (item == null) {\n      defaultValue = initialDefaultValue.current;\n      if (Children.count(children) === 1 && React.isValidElement(Children.only(children)) &&\n      // @ts-ignore\n      !Children.only(children).props.source &&\n      // Make sure it's not a FormDataConsumer\n      // @ts-ignore\n      !Children.only(children).type !== FormDataConsumer) {\n        // ArrayInput used for an array of scalar values\n        // (e.g. tags: ['foo', 'bar'])\n        defaultValue = '';\n      } else {\n        // ArrayInput used for an array of objects\n        // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n        defaultValue = defaultValue || {};\n        Children.forEach(children, function (input) {\n          var _a;\n          if (React.isValidElement(input) && input.type !== FormDataConsumer && input.props.source) {\n            defaultValue[input.props.source] = (_a = input.props.defaultValue) !== null && _a !== void 0 ? _a : null;\n          }\n        });\n      }\n    }\n    append(defaultValue);\n    // Make sure the newly added inputs are not considered dirty by react-hook-form\n    resetField(\"\".concat(finalSource, \".\").concat(fields.length), {\n      defaultValue: defaultValue\n    });\n  }, [append, children, resetField, finalSource, fields.length]);\n  var handleReorder = useCallback(function (origin, destination) {\n    move(origin, destination);\n  }, [move]);\n  var handleArrayClear = useCallback(function () {\n    replace([]);\n    setConfirmIsOpen(false);\n  }, [replace]);\n  var records = get(record, finalSource);\n  var context = useMemo(function () {\n    return {\n      total: fields.length,\n      add: addField,\n      remove: removeField,\n      reOrder: handleReorder,\n      source: finalSource\n    };\n  }, [addField, fields.length, handleReorder, removeField, finalSource]);\n  return fields ? React.createElement(SimpleFormIteratorContext.Provider, {\n    value: context\n  }, React.createElement(Root, {\n    className: clsx(className, fullWidth && 'fullwidth', disabled && 'disabled'),\n    sx: sx\n  }, React.createElement(\"ul\", {\n    className: SimpleFormIteratorClasses.list\n  }, fields.map(function (member, index) {\n    return React.createElement(SimpleFormIteratorItem, {\n      key: member.id,\n      disabled: disabled,\n      disableRemove: disableRemove,\n      disableReordering: disableReordering,\n      fields: fields,\n      getItemLabel: getItemLabel,\n      index: index,\n      onRemoveField: removeField,\n      onReorder: handleReorder,\n      record: records && records[index] || {},\n      removeButton: removeButton,\n      reOrderButtons: reOrderButtons,\n      resource: resource,\n      inline: inline\n    }, children);\n  })), !disabled && !(disableAdd && (disableClear || disableRemove)) && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.buttons\n  }, !disableAdd && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.add\n  }, addButton), fields.length > 0 && !disableClear && !disableRemove && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.clear\n  }, React.createElement(Confirm, {\n    isOpen: confirmIsOpen,\n    title: translate('ra.action.clear_array_input'),\n    content: translate('ra.message.clear_array_input'),\n    onConfirm: handleArrayClear,\n    onClose: function () {\n      return setConfirmIsOpen(false);\n    }\n  }), React.createElement(ClearArrayButton, {\n    onClick: function () {\n      return setConfirmIsOpen(true);\n    }\n  }))))) : null;\n};\nvar Root = styled('div', {\n  name: SimpleFormIteratorPrefix,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b, _c, _d;\n  var theme = _a.theme;\n  return _b = {\n    '& > ul': {\n      padding: 0,\n      marginTop: 0,\n      marginBottom: 0\n    },\n    '& > ul > li:last-child': {\n      // hide the last separator\n      borderBottom: 'none'\n    }\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.line)] = (_c = {\n    display: 'flex',\n    listStyleType: 'none',\n    borderBottom: \"solid 1px \".concat(theme.palette.divider)\n  }, _c[theme.breakpoints.down('sm')] = {\n    display: 'block'\n  }, _c), _b[\"& .\".concat(SimpleFormIteratorClasses.index)] = (_d = {\n    display: 'flex',\n    alignItems: 'top',\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  }, _d[theme.breakpoints.down('md')] = {\n    display: 'none'\n  }, _d), _b[\"& .\".concat(SimpleFormIteratorClasses.form)] = {}, _b[\"&.fullwidth > ul > li > .\".concat(SimpleFormIteratorClasses.form)] = {\n    flex: 2\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.inline)] = {\n    flexDirection: 'row',\n    columnGap: '1em'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.action)] = {\n    marginTop: theme.spacing(0.5),\n    visibility: 'hidden',\n    '@media(hover:none)': {\n      visibility: 'visible'\n    }\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.buttons)] = {\n    display: 'flex'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.add)] = {\n    borderBottom: 'none'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.clear)] = {\n    borderBottom: 'none'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.line, \":hover > .\").concat(SimpleFormIteratorClasses.action)] = {\n    visibility: 'visible'\n  }, _b;\n});","map":{"version":3,"names":["React","Children","useCallback","useMemo","useRef","useState","styled","useThemeProps","clsx","get","FormDataConsumer","useRecordContext","useTranslate","useWrappedSource","useFormContext","useArrayInput","SimpleFormIteratorClasses","SimpleFormIteratorPrefix","SimpleFormIteratorContext","SimpleFormIteratorItem","AddItemButton","DefaultAddItemButton","ClearArrayButton","Confirm","SimpleFormIterator","inProps","props","name","_a","addButton","createElement","removeButton","reOrderButtons","children","className","resource","disabled","_b","disableAdd","disableClear","_c","disableRemove","disableReordering","inline","_d","getItemLabel","fullWidth","sx","finalSource","Error","_e","confirmIsOpen","setConfirmIsOpen","_f","append","fields","move","remove","replace","_g","resetField","trigger","getValues","translate","record","initialDefaultValue","removeField","index","isScalarArray","every","value","length","_h","id","rest","__rest","current","k","addField","item","undefined","defaultValue","count","isValidElement","only","source","type","forEach","input","concat","handleReorder","origin","destination","handleArrayClear","records","context","total","add","reOrder","Provider","Root","list","map","member","key","onRemoveField","onReorder","buttons","clear","isOpen","title","content","onConfirm","onClose","onClick","overridesResolver","styles","root","theme","padding","marginTop","marginBottom","borderBottom","line","display","listStyleType","palette","divider","breakpoints","down","alignItems","marginRight","spacing","form","flex","flexDirection","columnGap","action","visibility"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/ArrayInput/SimpleFormIterator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    ReactElement,\n    ReactNode,\n    useCallback,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { styled, SxProps, useThemeProps } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport {\n    FormDataConsumer,\n    RaRecord,\n    useRecordContext,\n    useTranslate,\n    useWrappedSource,\n} from 'ra-core';\nimport { UseFieldArrayReturn, useFormContext } from 'react-hook-form';\n\nimport { useArrayInput } from './useArrayInput';\nimport {\n    SimpleFormIteratorClasses,\n    SimpleFormIteratorPrefix,\n} from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport {\n    DisableRemoveFunction,\n    SimpleFormIteratorItem,\n} from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { ClearArrayButton } from './ClearArrayButton';\nimport { Confirm } from '../../layout';\n\nexport const SimpleFormIterator = (inProps: SimpleFormIteratorProps) => {\n    const props = useThemeProps({\n        props: inProps,\n        name: 'RaSimpleFormIterator',\n    });\n    const {\n        addButton = <DefaultAddItemButton />,\n        removeButton,\n        reOrderButtons,\n        children,\n        className,\n        resource,\n        disabled,\n        disableAdd = false,\n        disableClear,\n        disableRemove = false,\n        disableReordering,\n        inline,\n        getItemLabel = false,\n        fullWidth,\n        sx,\n    } = props;\n\n    const finalSource = useWrappedSource('');\n    if (!finalSource) {\n        throw new Error(\n            'SimpleFormIterator can only be called within an iterator input like ArrayInput'\n        );\n    }\n\n    const [confirmIsOpen, setConfirmIsOpen] = useState<boolean>(false);\n    const { append, fields, move, remove, replace } = useArrayInput(props);\n    const { resetField, trigger, getValues } = useFormContext();\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const initialDefaultValue = useRef({});\n\n    const removeField = useCallback(\n        (index: number) => {\n            remove(index);\n            const isScalarArray = getValues(finalSource).every(\n                (value: any) => typeof value !== 'object'\n            );\n            if (isScalarArray) {\n                // Trigger validation on the Array to avoid ghost errors.\n                // Otherwise, validation errors on removed fields might still be displayed\n                trigger(finalSource);\n            }\n        },\n        [remove, trigger, finalSource, getValues]\n    );\n\n    if (fields.length > 0) {\n        const { id, ...rest } = fields[0];\n        initialDefaultValue.current = rest;\n        for (const k in initialDefaultValue.current)\n            initialDefaultValue.current[k] = null;\n    }\n\n    const addField = useCallback(\n        (item: any = undefined) => {\n            let defaultValue = item;\n            if (item == null) {\n                defaultValue = initialDefaultValue.current;\n                if (\n                    Children.count(children) === 1 &&\n                    React.isValidElement(Children.only(children)) &&\n                    // @ts-ignore\n                    !Children.only(children).props.source &&\n                    // Make sure it's not a FormDataConsumer\n                    // @ts-ignore\n                    !Children.only(children).type !== FormDataConsumer\n                ) {\n                    // ArrayInput used for an array of scalar values\n                    // (e.g. tags: ['foo', 'bar'])\n                    defaultValue = '';\n                } else {\n                    // ArrayInput used for an array of objects\n                    // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n                    defaultValue =\n                        defaultValue || ({} as Record<string, unknown>);\n                    Children.forEach(children, input => {\n                        if (\n                            React.isValidElement(input) &&\n                            input.type !== FormDataConsumer &&\n                            input.props.source\n                        ) {\n                            defaultValue[input.props.source] =\n                                input.props.defaultValue ?? null;\n                        }\n                    });\n                }\n            }\n            append(defaultValue);\n            // Make sure the newly added inputs are not considered dirty by react-hook-form\n            resetField(`${finalSource}.${fields.length}`, { defaultValue });\n        },\n        [append, children, resetField, finalSource, fields.length]\n    );\n\n    const handleReorder = useCallback(\n        (origin: number, destination: number) => {\n            move(origin, destination);\n        },\n        [move]\n    );\n\n    const handleArrayClear = useCallback(() => {\n        replace([]);\n        setConfirmIsOpen(false);\n    }, [replace]);\n\n    const records = get(record, finalSource);\n\n    const context = useMemo(\n        () => ({\n            total: fields.length,\n            add: addField,\n            remove: removeField,\n            reOrder: handleReorder,\n            source: finalSource,\n        }),\n        [addField, fields.length, handleReorder, removeField, finalSource]\n    );\n    return fields ? (\n        <SimpleFormIteratorContext.Provider value={context}>\n            <Root\n                className={clsx(\n                    className,\n                    fullWidth && 'fullwidth',\n                    disabled && 'disabled'\n                )}\n                sx={sx}\n            >\n                <ul className={SimpleFormIteratorClasses.list}>\n                    {fields.map((member, index) => (\n                        <SimpleFormIteratorItem\n                            key={member.id}\n                            disabled={disabled}\n                            disableRemove={disableRemove}\n                            disableReordering={disableReordering}\n                            fields={fields}\n                            getItemLabel={getItemLabel}\n                            index={index}\n                            onRemoveField={removeField}\n                            onReorder={handleReorder}\n                            record={(records && records[index]) || {}}\n                            removeButton={removeButton}\n                            reOrderButtons={reOrderButtons}\n                            resource={resource}\n                            inline={inline}\n                        >\n                            {children}\n                        </SimpleFormIteratorItem>\n                    ))}\n                </ul>\n                {!disabled &&\n                    !(disableAdd && (disableClear || disableRemove)) && (\n                        <div className={SimpleFormIteratorClasses.buttons}>\n                            {!disableAdd && (\n                                <div className={SimpleFormIteratorClasses.add}>\n                                    {addButton}\n                                </div>\n                            )}\n                            {fields.length > 0 &&\n                                !disableClear &&\n                                !disableRemove && (\n                                    <div\n                                        className={\n                                            SimpleFormIteratorClasses.clear\n                                        }\n                                    >\n                                        <Confirm\n                                            isOpen={confirmIsOpen}\n                                            title={translate(\n                                                'ra.action.clear_array_input'\n                                            )}\n                                            content={translate(\n                                                'ra.message.clear_array_input'\n                                            )}\n                                            onConfirm={handleArrayClear}\n                                            onClose={() =>\n                                                setConfirmIsOpen(false)\n                                            }\n                                        />\n                                        <ClearArrayButton\n                                            onClick={() =>\n                                                setConfirmIsOpen(true)\n                                            }\n                                        />\n                                    </div>\n                                )}\n                        </div>\n                    )}\n            </Root>\n        </SimpleFormIteratorContext.Provider>\n    ) : null;\n};\n\ntype GetItemLabelFunc = (index: number) => string | ReactElement;\n\nexport interface SimpleFormIteratorProps extends Partial<UseFieldArrayReturn> {\n    addButton?: ReactElement;\n    children?: ReactNode;\n    className?: string;\n    disabled?: boolean;\n    disableAdd?: boolean;\n    disableClear?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    fullWidth?: boolean;\n    getItemLabel?: boolean | GetItemLabelFunc;\n    inline?: boolean;\n    meta?: {\n        // the type defined in FieldArrayRenderProps says error is boolean, which is wrong.\n        error?: any;\n        submitFailed?: boolean;\n    };\n    record?: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource?: string;\n    source?: string;\n    sx?: SxProps;\n}\n\nconst Root = styled('div', {\n    name: SimpleFormIteratorPrefix,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    '& > ul': {\n        padding: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n    '& > ul > li:last-child': {\n        // hide the last separator\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n        borderBottom: `solid 1px ${theme.palette.divider}`,\n        [theme.breakpoints.down('sm')]: { display: 'block' },\n    },\n    [`& .${SimpleFormIteratorClasses.index}`]: {\n        display: 'flex',\n        alignItems: 'top',\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        [theme.breakpoints.down('md')]: { display: 'none' },\n    },\n    [`& .${SimpleFormIteratorClasses.form}`]: {},\n    [`&.fullwidth > ul > li > .${SimpleFormIteratorClasses.form}`]: {\n        flex: 2,\n    },\n    [`& .${SimpleFormIteratorClasses.inline}`]: {\n        flexDirection: 'row',\n        columnGap: '1em',\n    },\n    [`& .${SimpleFormIteratorClasses.action}`]: {\n        marginTop: theme.spacing(0.5),\n        visibility: 'hidden',\n        '@media(hover:none)': {\n            visibility: 'visible',\n        },\n    },\n    [`& .${SimpleFormIteratorClasses.buttons}`]: {\n        display: 'flex',\n    },\n    [`& .${SimpleFormIteratorClasses.add}`]: {\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.clear}`]: {\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}:hover > .${SimpleFormIteratorClasses.action}`]:\n        {\n            visibility: 'visible',\n        },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}