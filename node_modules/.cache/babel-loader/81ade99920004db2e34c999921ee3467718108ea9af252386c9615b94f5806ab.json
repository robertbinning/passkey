{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { removeEmpty, useSafeSetState } from '../../util';\nimport { useResourceContext } from '../../core';\nimport usePaginationState from '../usePaginationState';\nimport useSortState from '../useSortState';\nimport { useRecordSelection } from './useRecordSelection';\nimport { flattenObject } from '../../dataProvider/fetch';\nvar refetch = function () {\n  throw new Error('refetch is not available for a ListContext built from useList based on local data');\n};\n/**\n * Handle filtering, sorting and pagination on local data.\n *\n * Returns the data and callbacks expected by <ListContext>.\n *\n * @example\n * const data = [\n *     { id: 1, name: 'Arnold' },\n *     { id: 2, name: 'Sylvester' },\n *     { id: 3, name: 'Jean-Claude' },\n * ]\n *\n * const MyComponent = () => {\n *     const listContext = useList({ data });\n *     return (\n *         <ListContextProvider value={listContext}>\n *             <Datagrid>\n *                 <TextField source=\"id\" />\n *                 <TextField source=\"name\" />\n *             </Datagrid>\n *         </ListContextProvider>\n *     );\n * };\n *\n * @param {UseListOptions} props\n * @param {RaRecord[]} props.data An array of records\n * @param {Boolean} props.isFetching: Optional. A boolean indicating whether the data is being loaded\n * @param {Boolean} props.isLoading: Optional. A boolean indicating whether the data has been loaded at least once\n * @param {Error | String} props.error: Optional. The error if any occurred while loading the data\n * @param {Object} props.filter: Optional. An object containing the filters applied on the data\n * @param {Number} props.page: Optional. The initial page index\n * @param {Number} props.perPage: Optional. The initial page size\n * @param {SortPayload} props.sort: Optional. The initial sort (field and order)\n * @param {filterCallback} prop.filterCallback Optional. A function that allows you to make a custom filter\n */\nexport var useList = function (props) {\n  var _a;\n  var data = props.data,\n    error = props.error,\n    _b = props.filter,\n    filter = _b === void 0 ? defaultFilter : _b,\n    _c = props.isFetching,\n    isFetching = _c === void 0 ? false : _c,\n    _d = props.isLoading,\n    isLoading = _d === void 0 ? false : _d,\n    _e = props.isPending,\n    isPending = _e === void 0 ? false : _e,\n    _f = props.page,\n    initialPage = _f === void 0 ? 1 : _f,\n    _g = props.perPage,\n    initialPerPage = _g === void 0 ? 1000 : _g,\n    initialSort = props.sort,\n    _h = props.filterCallback,\n    filterCallback = _h === void 0 ? function (record) {\n      return Boolean(record);\n    } : _h;\n  var resource = useResourceContext(props);\n  var _j = useSafeSetState(isFetching),\n    fetchingState = _j[0],\n    setFetchingState = _j[1];\n  var _k = useSafeSetState(isLoading),\n    loadingState = _k[0],\n    setLoadingState = _k[1];\n  var _l = useSafeSetState(isPending),\n    pendingState = _l[0],\n    setPendingState = _l[1];\n  var _m = useSafeSetState(function () {\n      return {\n        data: data,\n        total: data ? data.length : undefined\n      };\n    }),\n    finalItems = _m[0],\n    setFinalItems = _m[1];\n  // pagination logic\n  var _o = usePaginationState({\n      page: initialPage,\n      perPage: initialPerPage\n    }),\n    page = _o.page,\n    setPage = _o.setPage,\n    perPage = _o.perPage,\n    setPerPage = _o.setPerPage;\n  // sort logic\n  var _p = useSortState(initialSort),\n    sort = _p.sort,\n    setSortState = _p.setSort;\n  var setSort = useCallback(function (sort) {\n    setSortState(sort);\n    setPage(1);\n  }, [setPage, setSortState]);\n  // selection logic\n  var _q = useRecordSelection(resource ? {\n      resource: resource\n    } : {\n      disableSyncWithStore: true\n    }),\n    selectedIds = _q[0],\n    selectionModifiers = _q[1];\n  // filter logic\n  var filterRef = useRef(filter);\n  var _r = useSafeSetState({}),\n    displayedFilters = _r[0],\n    setDisplayedFilters = _r[1];\n  var _s = useSafeSetState(filter),\n    filterValues = _s[0],\n    setFilterValues = _s[1];\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n      return removeEmpty(__assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a)));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    if (displayedFilters === void 0) {\n      displayedFilters = undefined;\n    }\n    setFilterValues(removeEmpty(filters));\n    if (displayedFilters) {\n      setDisplayedFilters(displayedFilters);\n    }\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]);\n  // handle filter prop change\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  });\n  // We do all the data processing (filtering, sorting, paginating) client-side\n  useEffect(function () {\n    if (isLoading || !data) return;\n    var tempData = data;\n    // 1. filter\n    if (filterValues) {\n      var flattenFilterValues_1 = flattenObject(filterValues);\n      tempData = data.filter(function (record) {\n        return Object.entries(flattenFilterValues_1).every(function (_a) {\n          var filterName = _a[0],\n            filterValue = _a[1];\n          var recordValue = get(record, filterName);\n          var result = Array.isArray(recordValue) ? Array.isArray(filterValue) ? recordValue.some(function (item) {\n            return filterValue.includes(item);\n          }) : recordValue.includes(filterValue) : Array.isArray(filterValue) ? filterValue.includes(recordValue) : filterName === 'q' // special full-text filter\n          ? Object.keys(record).some(function (key) {\n            return typeof record[key] === 'string' && record[key].toLowerCase().includes(filterValue.toLowerCase());\n          }) : filterValue == recordValue; // eslint-disable-line eqeqeq\n          return result;\n        });\n      }).filter(filterCallback);\n    }\n    var filteredLength = tempData.length;\n    // 2. sort\n    if (sort.field) {\n      tempData = tempData.sort(function (a, b) {\n        if (get(a, sort.field) > get(b, sort.field)) {\n          return sort.order === 'ASC' ? 1 : -1;\n        }\n        if (get(a, sort.field) < get(b, sort.field)) {\n          return sort.order === 'ASC' ? -1 : 1;\n        }\n        return 0;\n      });\n    }\n    // 3. paginate\n    tempData = tempData.slice((page - 1) * perPage, page * perPage);\n    setFinalItems({\n      data: tempData,\n      total: filteredLength\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(data), filterValues, isLoading, page, perPage, setFinalItems, sort.field, sort.order]);\n  useEffect(function () {\n    if (isFetching !== fetchingState) {\n      setFetchingState(isFetching);\n    }\n  }, [isFetching, fetchingState, setFetchingState]);\n  useEffect(function () {\n    if (isLoading !== loadingState) {\n      setLoadingState(isLoading);\n    }\n  }, [isLoading, loadingState, setLoadingState]);\n  useEffect(function () {\n    if (isPending !== pendingState) {\n      setPendingState(isPending);\n    }\n  }, [isPending, pendingState, setPendingState]);\n  return {\n    sort: sort,\n    data: pendingState ? undefined : (_a = finalItems === null || finalItems === void 0 ? void 0 : finalItems.data) !== null && _a !== void 0 ? _a : [],\n    defaultTitle: '',\n    error: error !== null && error !== void 0 ? error : null,\n    displayedFilters: displayedFilters,\n    filterValues: filterValues,\n    hasNextPage: (finalItems === null || finalItems === void 0 ? void 0 : finalItems.total) == null ? false : page * perPage < finalItems.total,\n    hasPreviousPage: page > 1,\n    hideFilter: hideFilter,\n    isFetching: fetchingState,\n    isLoading: loadingState,\n    isPending: pendingState,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: page,\n    perPage: perPage,\n    resource: '',\n    refetch: refetch,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: finalItems === null || finalItems === void 0 ? void 0 : finalItems.total\n  };\n};\nvar defaultFilter = {};","map":{"version":3,"names":["useCallback","useEffect","useRef","get","isEqual","removeEmpty","useSafeSetState","useResourceContext","usePaginationState","useSortState","useRecordSelection","flattenObject","refetch","Error","useList","props","data","error","_b","filter","defaultFilter","_c","isFetching","_d","isLoading","_e","isPending","_f","page","initialPage","_g","perPage","initialPerPage","initialSort","sort","_h","filterCallback","record","Boolean","resource","_j","fetchingState","setFetchingState","_k","loadingState","setLoadingState","_l","pendingState","setPendingState","_m","total","length","undefined","finalItems","setFinalItems","_o","setPage","setPerPage","_p","setSortState","setSort","_q","disableSyncWithStore","selectedIds","selectionModifiers","filterRef","_r","displayedFilters","setDisplayedFilters","_s","filterValues","setFilterValues","hideFilter","filterName","previousState","_a","_","newState","__rest","showFilter","defaultValue","__assign","setFilters","filters","current","tempData","flattenFilterValues_1","Object","entries","every","filterValue","recordValue","result","Array","isArray","some","item","includes","keys","key","toLowerCase","filteredLength","field","a","b","order","slice","JSON","stringify","defaultTitle","hasNextPage","hasPreviousPage","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/list/useList.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { removeEmpty, useSafeSetState } from '../../util';\nimport { FilterPayload, RaRecord, SortPayload } from '../../types';\nimport { useResourceContext } from '../../core';\nimport usePaginationState from '../usePaginationState';\nimport useSortState from '../useSortState';\nimport { useRecordSelection } from './useRecordSelection';\nimport { ListControllerResult } from './useListController';\nimport { flattenObject } from '../../dataProvider/fetch';\n\nconst refetch = () => {\n    throw new Error(\n        'refetch is not available for a ListContext built from useList based on local data'\n    );\n};\n\n/**\n * Handle filtering, sorting and pagination on local data.\n *\n * Returns the data and callbacks expected by <ListContext>.\n *\n * @example\n * const data = [\n *     { id: 1, name: 'Arnold' },\n *     { id: 2, name: 'Sylvester' },\n *     { id: 3, name: 'Jean-Claude' },\n * ]\n *\n * const MyComponent = () => {\n *     const listContext = useList({ data });\n *     return (\n *         <ListContextProvider value={listContext}>\n *             <Datagrid>\n *                 <TextField source=\"id\" />\n *                 <TextField source=\"name\" />\n *             </Datagrid>\n *         </ListContextProvider>\n *     );\n * };\n *\n * @param {UseListOptions} props\n * @param {RaRecord[]} props.data An array of records\n * @param {Boolean} props.isFetching: Optional. A boolean indicating whether the data is being loaded\n * @param {Boolean} props.isLoading: Optional. A boolean indicating whether the data has been loaded at least once\n * @param {Error | String} props.error: Optional. The error if any occurred while loading the data\n * @param {Object} props.filter: Optional. An object containing the filters applied on the data\n * @param {Number} props.page: Optional. The initial page index\n * @param {Number} props.perPage: Optional. The initial page size\n * @param {SortPayload} props.sort: Optional. The initial sort (field and order)\n * @param {filterCallback} prop.filterCallback Optional. A function that allows you to make a custom filter\n */\nexport const useList = <RecordType extends RaRecord = any>(\n    props: UseListOptions<RecordType>\n): UseListValue<RecordType> => {\n    const {\n        data,\n        error,\n        filter = defaultFilter,\n        isFetching = false,\n        isLoading = false,\n        isPending = false,\n        page: initialPage = 1,\n        perPage: initialPerPage = 1000,\n        sort: initialSort,\n        filterCallback = (record: RecordType) => Boolean(record),\n    } = props;\n    const resource = useResourceContext(props);\n\n    const [fetchingState, setFetchingState] = useSafeSetState<boolean>(\n        isFetching\n    ) as [boolean, (isFetching: boolean) => void];\n\n    const [loadingState, setLoadingState] = useSafeSetState<boolean>(\n        isLoading\n    ) as [boolean, (isLoading: boolean) => void];\n\n    const [pendingState, setPendingState] = useSafeSetState<boolean>(\n        isPending\n    ) as [boolean, (isPending: boolean) => void];\n\n    const [finalItems, setFinalItems] = useSafeSetState<{\n        data?: RecordType[];\n        total?: number;\n    }>(() => ({\n        data,\n        total: data ? data.length : undefined,\n    }));\n\n    // pagination logic\n    const { page, setPage, perPage, setPerPage } = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    });\n\n    // sort logic\n    const { sort, setSort: setSortState } = useSortState(initialSort);\n    const setSort = useCallback(\n        (sort: SortPayload) => {\n            setSortState(sort);\n            setPage(1);\n        },\n        [setPage, setSortState]\n    );\n\n    // selection logic\n    const [selectedIds, selectionModifiers] = useRecordSelection(\n        resource\n            ? {\n                  resource,\n              }\n            : { disableSyncWithStore: true }\n    );\n\n    // filter logic\n    const filterRef = useRef(filter);\n    const [displayedFilters, setDisplayedFilters] = useSafeSetState<{\n        [key: string]: boolean;\n    }>({});\n    const [filterValues, setFilterValues] = useSafeSetState<{\n        [key: string]: any;\n    }>(filter);\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            setDisplayedFilters(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n            setFilterValues(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            setDisplayedFilters(previousState => ({\n                ...previousState,\n                [filterName]: true,\n            }));\n            setFilterValues(previousState =>\n                removeEmpty({\n                    ...previousState,\n                    [filterName]: defaultValue,\n                })\n            );\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const setFilters = useCallback(\n        (filters, displayedFilters = undefined) => {\n            setFilterValues(removeEmpty(filters));\n            if (displayedFilters) {\n                setDisplayedFilters(displayedFilters);\n            }\n            setPage(1);\n        },\n        [setDisplayedFilters, setFilterValues, setPage]\n    );\n    // handle filter prop change\n    useEffect(() => {\n        if (!isEqual(filter, filterRef.current)) {\n            filterRef.current = filter;\n            setFilterValues(filter);\n        }\n    });\n\n    // We do all the data processing (filtering, sorting, paginating) client-side\n    useEffect(\n        () => {\n            if (isLoading || !data) return;\n            let tempData = data;\n\n            // 1. filter\n            if (filterValues) {\n                const flattenFilterValues = flattenObject(filterValues);\n                tempData = data\n                    .filter(record =>\n                        Object.entries(flattenFilterValues).every(\n                            ([filterName, filterValue]) => {\n                                const recordValue = get(record, filterName);\n                                const result = Array.isArray(recordValue)\n                                    ? Array.isArray(filterValue)\n                                        ? recordValue.some(item =>\n                                              filterValue.includes(item)\n                                          )\n                                        : recordValue.includes(filterValue)\n                                    : Array.isArray(filterValue)\n                                      ? filterValue.includes(recordValue)\n                                      : filterName === 'q' // special full-text filter\n                                        ? Object.keys(record).some(\n                                              key =>\n                                                  typeof record[key] ===\n                                                      'string' &&\n                                                  record[key]\n                                                      .toLowerCase()\n                                                      .includes(\n                                                          (\n                                                              filterValue as string\n                                                          ).toLowerCase()\n                                                      )\n                                          )\n                                        : filterValue == recordValue; // eslint-disable-line eqeqeq\n                                return result;\n                            }\n                        )\n                    )\n                    .filter(filterCallback);\n            }\n            const filteredLength = tempData.length;\n\n            // 2. sort\n            if (sort.field) {\n                tempData = tempData.sort((a, b) => {\n                    if (get(a, sort.field) > get(b, sort.field)) {\n                        return sort.order === 'ASC' ? 1 : -1;\n                    }\n                    if (get(a, sort.field) < get(b, sort.field)) {\n                        return sort.order === 'ASC' ? -1 : 1;\n                    }\n                    return 0;\n                });\n            }\n\n            // 3. paginate\n            tempData = tempData.slice((page - 1) * perPage, page * perPage);\n\n            setFinalItems({\n                data: tempData,\n                total: filteredLength,\n            });\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            JSON.stringify(data),\n            filterValues,\n            isLoading,\n            page,\n            perPage,\n            setFinalItems,\n            sort.field,\n            sort.order,\n        ]\n    );\n\n    useEffect(() => {\n        if (isFetching !== fetchingState) {\n            setFetchingState(isFetching);\n        }\n    }, [isFetching, fetchingState, setFetchingState]);\n\n    useEffect(() => {\n        if (isLoading !== loadingState) {\n            setLoadingState(isLoading);\n        }\n    }, [isLoading, loadingState, setLoadingState]);\n\n    useEffect(() => {\n        if (isPending !== pendingState) {\n            setPendingState(isPending);\n        }\n    }, [isPending, pendingState, setPendingState]);\n\n    return {\n        sort,\n        data: pendingState ? undefined : finalItems?.data ?? [],\n        defaultTitle: '',\n        error: error ?? null,\n        displayedFilters,\n        filterValues,\n        hasNextPage:\n            finalItems?.total == null\n                ? false\n                : page * perPage < finalItems.total,\n        hasPreviousPage: page > 1,\n        hideFilter,\n        isFetching: fetchingState,\n        isLoading: loadingState,\n        isPending: pendingState,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page,\n        perPage,\n        resource: '',\n        refetch,\n        selectedIds,\n        setFilters,\n        setPage,\n        setPerPage,\n        setSort,\n        showFilter,\n        total: finalItems?.total,\n    } as UseListValue<RecordType>;\n};\n\nexport interface UseListOptions<RecordType extends RaRecord = any> {\n    data?: RecordType[];\n    error?: any;\n    filter?: FilterPayload;\n    isFetching?: boolean;\n    isLoading?: boolean;\n    isPending?: boolean;\n    page?: number;\n    perPage?: number;\n    sort?: SortPayload;\n    resource?: string;\n    filterCallback?: (record: RecordType) => boolean;\n}\n\nexport type UseListValue<RecordType extends RaRecord = any> =\n    ListControllerResult<RecordType>;\n\nconst defaultFilter = {};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}