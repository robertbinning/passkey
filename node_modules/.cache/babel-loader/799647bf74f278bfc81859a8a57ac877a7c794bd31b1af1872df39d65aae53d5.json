{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store the pagination callbacks from the useInfiniteListController() result.\n *\n * Use the useInfinitePaginationContext() hook to read the pagination callbacks.\n *\n * @typedef {Object} InfinitePaginationContextValue\n * @prop {Function} fetchNextPage a callback to fetch the next page\n * @prop {Function} fetchPreviousPage a callback to fetch the previous page\n\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const { fetchNextPage, fetchPreviousPage } = useInfiniteListController(props);\n *     return (\n *         <InfinitePaginationContext.Provider value={{ fetchNextPage, fetchPreviousPage }}>\n *             ...\n *         </InfinitePaginationContext.Provider>\n *     );\n * };\n */\nexport var InfinitePaginationContext = createContext({\n  hasNextPage: false,\n  fetchNextPage: function () {\n    return Promise.reject('not implemented');\n  },\n  isFetchingNextPage: false,\n  hasPreviousPage: false,\n  fetchPreviousPage: function () {\n    return Promise.reject('not implemented');\n  },\n  isFetchingPreviousPage: false\n});\nInfinitePaginationContext.displayName = 'InfinitePaginationContext';","map":{"version":3,"names":["createContext","InfinitePaginationContext","hasNextPage","fetchNextPage","Promise","reject","isFetchingNextPage","hasPreviousPage","fetchPreviousPage","isFetchingPreviousPage","displayName"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/list/InfinitePaginationContext.ts"],"sourcesContent":["import { createContext } from 'react';\nimport { InfiniteListControllerResult } from './useInfiniteListController';\n\n/**\n * Context to store the pagination callbacks from the useInfiniteListController() result.\n *\n * Use the useInfinitePaginationContext() hook to read the pagination callbacks.\n *\n * @typedef {Object} InfinitePaginationContextValue\n * @prop {Function} fetchNextPage a callback to fetch the next page\n * @prop {Function} fetchPreviousPage a callback to fetch the previous page\n\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const { fetchNextPage, fetchPreviousPage } = useInfiniteListController(props);\n *     return (\n *         <InfinitePaginationContext.Provider value={{ fetchNextPage, fetchPreviousPage }}>\n *             ...\n *         </InfinitePaginationContext.Provider>\n *     );\n * };\n */\nexport const InfinitePaginationContext =\n    createContext<InfinitePaginationContextValue>({\n        hasNextPage: false,\n        fetchNextPage: () => Promise.reject('not implemented'),\n        isFetchingNextPage: false,\n        hasPreviousPage: false,\n        fetchPreviousPage: () => Promise.reject('not implemented'),\n        isFetchingPreviousPage: false,\n    });\n\nInfinitePaginationContext.displayName = 'InfinitePaginationContext';\n\nexport type InfinitePaginationContextValue = Pick<\n    InfiniteListControllerResult,\n    | 'fetchNextPage'\n    | 'fetchPreviousPage'\n    | 'isFetchingNextPage'\n    | 'hasNextPage'\n    | 'hasPreviousPage'\n    | 'isFetchingPreviousPage'\n>;\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAGrC;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,IAAMC,yBAAyB,GAClCD,aAAa,CAAiC;EAC1CE,WAAW,EAAE,KAAK;EAClBC,aAAa,EAAE,SAAAA,CAAA;IAAM,OAAAC,OAAO,CAACC,MAAM,CAAC,iBAAiB,CAAC;EAAjC,CAAiC;EACtDC,kBAAkB,EAAE,KAAK;EACzBC,eAAe,EAAE,KAAK;EACtBC,iBAAiB,EAAE,SAAAA,CAAA;IAAM,OAAAJ,OAAO,CAACC,MAAM,CAAC,iBAAiB,CAAC;EAAjC,CAAiC;EAC1DI,sBAAsB,EAAE;CAC3B,CAAC;AAENR,yBAAyB,CAACS,WAAW,GAAG,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}