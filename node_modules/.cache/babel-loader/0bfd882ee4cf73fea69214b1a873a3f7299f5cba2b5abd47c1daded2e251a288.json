{"ast":null,"code":"import { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\nconst apiUrl = 'https://localhost:3000';\nconst httpClient = fetchUtils.fetchJson;\nconst dataProvider = {\n  getList: (resource, params) => {\n    const url = `${apiUrl}/${resource}`;\n    return httpClient(url).then(({\n      json\n    }) => ({\n      data: json.users,\n      total: json.users.length\n    }));\n  },\n  getOne: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  getMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    const url = `${apiUrl}/${resource}?${stringify(query)}`;\n    return httpClient(url).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  },\n  getManyReference: (resource, params) => {\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const {\n      field,\n      order\n    } = params.sort;\n    const query = {\n      sort: JSON.stringify([field, order]),\n      range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n      filter: JSON.stringify({\n        ...params.filter,\n        [params.target]: params.id\n      })\n    };\n    const url = `${apiUrl}/${resource}?${stringify(query)}`;\n    return httpClient(url).then(({\n      headers,\n      json\n    }) => ({\n      data: json,\n      total: parseInt(headers.get('content-range').split('/').pop(), 10)\n    }));\n  },\n  update: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`, {\n    method: 'PUT',\n    body: JSON.stringify(params.data)\n  }).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  updateMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return httpClient(`${apiUrl}/${resource}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data)\n    }).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  },\n  create: (resource, params) => httpClient(`${apiUrl}/${resource}`, {\n    method: 'POST',\n    body: JSON.stringify(params.data)\n  }).then(({\n    json\n  }) => ({\n    data: {\n      ...params.data,\n      id: json.id\n    }\n  })),\n  delete: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`, {\n    method: 'DELETE'\n  }).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  deleteMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return httpClient(`${apiUrl}/${resource}`, {\n      method: 'DELETE',\n      body: JSON.stringify(params.data)\n    }).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  }\n};\nexport default dataProvider;","map":{"version":3,"names":["fetchUtils","stringify","apiUrl","httpClient","fetchJson","dataProvider","getList","resource","params","url","then","json","data","users","total","length","getOne","id","getMany","query","filter","JSON","ids","getManyReference","page","perPage","pagination","field","order","sort","range","target","headers","parseInt","get","split","pop","update","method","body","updateMany","create","delete","deleteMany"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/dataProvider.js"],"sourcesContent":["import { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\n\nconst apiUrl = 'https://localhost:3000';\nconst httpClient = fetchUtils.fetchJson;\n\nconst dataProvider = {\n    getList: (resource, params) => {\n        const url = `${apiUrl}/${resource}`;\n        return httpClient(url).then(({ json }) => ({\n            data: json.users,\n            total: json.users.length,\n        }));\n    },\n    getOne: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\n            data: json,\n        })),\n    getMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        return httpClient(url).then(({ json }) => ({ data: json }));\n    },\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify({\n                ...params.filter,\n                [params.target]: params.id,\n            }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        return httpClient(url).then(({ headers, json }) => ({\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },\n    update: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json })),\n    updateMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        return httpClient(`${apiUrl}/${resource}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n    create: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({\n            data: { ...params.data, id: json.id },\n        })),\n    delete: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n        }).then(({ json }) => ({ data: json })),\n    deleteMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        return httpClient(`${apiUrl}/${resource}`, {\n            method: 'DELETE',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n};\n\nexport default dataProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}