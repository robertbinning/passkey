{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { defaultDataProvider } from './defaultDataProvider';\n/**\n * Combine multiple data providers into one.\n *\n * @param dataProviderMatcher A function that returns a data provider for a given resource.\n *\n * @example\n * const dataProvider = combineDataProviders(resource => {\n *    switch(resource) {\n *       case 'posts':\n *       case 'comments':\n *          return dataProvider1;\n *       case 'users':\n *          return dataProvider2;\n *       default:\n *         throw new Error('Unknown resource');\n *    }\n * });\n */\nexport var combineDataProviders = function (dataProviderMatcher) {\n  return new Proxy(defaultDataProvider, {\n    get: function (target, name) {\n      if (name === 'then') {\n        return null;\n      }\n      return function (resource) {\n        var _a;\n        var params = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n          params[_i - 1] = arguments[_i];\n        }\n        if (typeof name === 'symbol') {\n          return;\n        }\n        return (_a = dataProviderMatcher(resource))[name].apply(_a, __spreadArray([resource], params, false));\n      };\n    }\n  });\n};","map":{"version":3,"names":["defaultDataProvider","combineDataProviders","dataProviderMatcher","Proxy","get","target","name","resource","params","_i","arguments","length","_a","apply","__spreadArray"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/dataProvider/combineDataProviders.ts"],"sourcesContent":["import { DataProvider } from '../types';\nimport { defaultDataProvider } from './defaultDataProvider';\n\nexport type DataProviderMatcher = (resource: string) => DataProvider;\n\n/**\n * Combine multiple data providers into one.\n *\n * @param dataProviderMatcher A function that returns a data provider for a given resource.\n *\n * @example\n * const dataProvider = combineDataProviders(resource => {\n *    switch(resource) {\n *       case 'posts':\n *       case 'comments':\n *          return dataProvider1;\n *       case 'users':\n *          return dataProvider2;\n *       default:\n *         throw new Error('Unknown resource');\n *    }\n * });\n */\nexport const combineDataProviders = (\n    dataProviderMatcher: DataProviderMatcher\n): DataProvider =>\n    new Proxy(defaultDataProvider, {\n        get: (target, name) => {\n            if (name === 'then') {\n                return null;\n            }\n            return (resource, ...params) => {\n                if (typeof name === 'symbol') {\n                    return;\n                }\n                return dataProviderMatcher(resource)[name](resource, ...params);\n            };\n        },\n    });\n"],"mappings":";;;;;;;;;AACA,SAASA,mBAAmB,QAAQ,uBAAuB;AAI3D;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAMC,oBAAoB,GAAG,SAAAA,CAChCC,mBAAwC;EAExC,WAAIC,KAAK,CAACH,mBAAmB,EAAE;IAC3BI,GAAG,EAAE,SAAAA,CAACC,MAAM,EAAEC,IAAI;MACd,IAAIA,IAAI,KAAK,MAAM,EAAE;QACjB,OAAO,IAAI;;MAEf,OAAO,UAACC,QAAQ;;QAAE,IAAAC,MAAA;aAAA,IAAAC,EAAA,IAAS,EAATA,EAAA,GAAAC,SAAA,CAAAC,MAAS,EAATF,EAAA,EAAS;UAATD,MAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;QACd,IAAI,OAAOH,IAAI,KAAK,QAAQ,EAAE;UAC1B;;QAEJ,OAAO,CAAAM,EAAA,GAAAV,mBAAmB,CAACK,QAAQ,CAAC,EAACD,IAAI,CAAC,CAAAO,KAAA,CAAAD,EAAA,EAAAE,aAAA,EAACP,QAAQ,GAAKC,MAAM;MAClE,CAAC;IACL;GACH,CAAC;AAZF,CAYE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}