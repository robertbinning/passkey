{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useMemo, useRef } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.delete() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The delete parameters { id, previousData }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.previousData The record before the update is applied\n *\n * @returns The current mutation state. Destructure as [deleteOne, { data, error, isPending }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteOne, { isPending: false, isIdle: true }]\n * - start:   [deleteOne, { isPending: true }]\n * - success: [deleteOne, { data: [data from response], isPending: false, isSuccess: true }]\n * - error:   [deleteOne, { error: [error from response], isPending: false, isError: true }]\n *\n * The deleteOne() function must be called with a resource and a parameter object: deleteOne(resource, { id, previousData, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://tanstack.com/query/v5/docs/react/reference/useMutation\n *\n * @example // set params when calling the deleteOne callback\n *\n * import { useDelete, useRecordContext } from 'react-admin';\n *\n * const DeleteButton = () => {\n *     const record = useRecordContext();\n *     const [deleteOne, { isPending, error }] = useDelete();\n *     const handleClick = () => {\n *         deleteOne('likes', { id: record.id, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={handleClick}>Delete</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDelete, useRecordContext } from 'react-admin';\n *\n * const DeleteButton = () => {\n *     const record = useRecordContext();\n *     const [deleteOne, { isPending, error }] = useDelete('likes', { id: record.id, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={() => deleteOne()}>Delete</button>;\n * };\n *\n * @example // TypeScript\n * const [delete, { data }] = useDelete<Product>('products', { id, previousData: product });\n *                    \\-- data is Product\n */\nexport var useDelete = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var id = params.id,\n    previousData = params.previousData;\n  var _a = options.mutationMode,\n    mutationMode = _a === void 0 ? 'pessimistic' : _a,\n    mutationOptions = __rest(options, [\"mutationMode\"]);\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n  var hasCallTimeOnError = useRef(false);\n  var hasCallTimeOnSuccess = useRef(false);\n  var hasCallTimeOnSettled = useRef(false);\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n      id = _a.id;\n    // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n    // because setQueryData doesn't accept a stale time option\n    var now = Date.now();\n    var updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n    var updateColl = function (old) {\n      if (!old) return old;\n      var index = old.findIndex(\n      // eslint-disable-next-line eqeqeq\n      function (record) {\n        return record.id == id;\n      });\n      if (index === -1) {\n        return old;\n      }\n      return __spreadArray(__spreadArray([], old.slice(0, index), true), old.slice(index + 1), true);\n    };\n    queryClient.setQueriesData({\n      queryKey: [resource, 'getList']\n    }, function (res) {\n      if (!res || !res.data) return res;\n      var newCollection = updateColl(res.data);\n      var recordWasFound = newCollection.length < res.data.length;\n      return recordWasFound ? {\n        data: newCollection,\n        total: res.total ? res.total - 1 : undefined,\n        pageInfo: res.pageInfo\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData({\n      queryKey: [resource, 'getInfiniteList']\n    }, function (res) {\n      if (!res || !res.pages) return res;\n      return __assign(__assign({}, res), {\n        pages: res.pages.map(function (page) {\n          var newCollection = updateColl(page.data);\n          var recordWasFound = newCollection.length < page.data.length;\n          return recordWasFound ? __assign(__assign({}, page), {\n            data: newCollection,\n            total: page.total ? page.total - 1 : undefined,\n            pageInfo: page.pageInfo\n          }) : page;\n        })\n      });\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData({\n      queryKey: [resource, 'getMany']\n    }, function (coll) {\n      return coll && coll.length > 0 ? updateColl(coll) : coll;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData({\n      queryKey: [resource, 'getManyReference']\n    }, function (res) {\n      if (!res || !res.data) return res;\n      var newCollection = updateColl(res.data);\n      var recordWasFound = newCollection.length < res.data.length;\n      return recordWasFound ? {\n        data: newCollection,\n        total: res.total - 1\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n  };\n  var mutation = useMutation(__assign(__assign({\n    mutationFn: function (_a) {\n      var _b = _a === void 0 ? {} : _a,\n        _c = _b.resource,\n        callTimeResource = _c === void 0 ? resource : _c,\n        _d = _b.id,\n        callTimeId = _d === void 0 ? paramsRef.current.id : _d,\n        _e = _b.previousData,\n        callTimePreviousData = _e === void 0 ? paramsRef.current.previousData : _e,\n        _f = _b.meta,\n        callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f;\n      if (!callTimeResource) {\n        throw new Error('useDelete mutation requires a non-empty resource');\n      }\n      if (callTimeId == null) {\n        throw new Error('useDelete mutation requires a non-empty id');\n      }\n      return dataProvider.delete(callTimeResource, {\n        id: callTimeId,\n        previousData: callTimePreviousData,\n        meta: callTimeMeta\n      }).then(function (_a) {\n        var data = _a.data;\n        return data;\n      });\n    }\n  }, mutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!mutationOptions.onMutate) return [3 /*break*/, 2];\n              return [4 /*yield*/, mutationOptions.onMutate(variables)];\n            case 1:\n              userContext = _a.sent() || {};\n              return [2 /*return*/, __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n            case 2:\n              // Return a context object with the snapshot value\n              return [2 /*return*/, {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n            value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n      if (mutationOptions.onError && !hasCallTimeOnError.current) {\n        return mutationOptions.onError(error, variables, context);\n      }\n      // call-time error callback is executed by react-query\n    },\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n          callTimeResource = _a === void 0 ? resource : _a,\n          _b = variables.id,\n          callTimeId = _b === void 0 ? id : _b;\n        updateCache({\n          resource: callTimeResource,\n          id: callTimeId\n        });\n        if (mutationOptions.onSuccess && !hasCallTimeOnSuccess.current) {\n          mutationOptions.onSuccess(data, variables, context);\n        }\n        // call-time success callback is executed by react-query\n      }\n    },\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var queryKey = _a[0];\n          queryClient.invalidateQueries({\n            queryKey: queryKey\n          });\n        });\n      }\n      if (mutationOptions.onSettled && !hasCallTimeOnSettled.current) {\n        return mutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n  var mutate = function (callTimeResource, callTimeParams, callTimeOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (callTimeOptions === void 0) {\n      callTimeOptions = {};\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, otherCallTimeOptions, _a, callTimeId, _b, callTimePreviousData, queryKeys;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            mutationMode = callTimeOptions.mutationMode, otherCallTimeOptions = __rest(callTimeOptions, [\"mutationMode\"]);\n            hasCallTimeOnError.current = !!callTimeOptions.onError;\n            hasCallTimeOnSuccess.current = !!callTimeOptions.onSuccess;\n            hasCallTimeOnSettled.current = !!callTimeOptions.onSettled;\n            // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n            paramsRef.current = params;\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n            if (mode.current === 'pessimistic') {\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), otherCallTimeOptions)];\n            }\n            _a = callTimeParams.id, callTimeId = _a === void 0 ? id : _a, _b = callTimeParams.previousData, callTimePreviousData = _b === void 0 ? previousData : _b;\n            queryKeys = [[callTimeResource, 'getList'], [callTimeResource, 'getInfiniteList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://tanstack.com/query/v5/docs/react/reference/QueryClient#queryclientgetqueriesdata\n             */\n            snapshot.current = queryKeys.reduce(function (prev, queryKey) {\n              return prev.concat(queryClient.getQueriesData({\n                queryKey: queryKey\n              }));\n            }, []);\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            return [4 /*yield*/, Promise.all(snapshot.current.map(function (_a) {\n              var queryKey = _a[0];\n              return queryClient.cancelQueries({\n                queryKey: queryKey\n              });\n            }))];\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _c.sent();\n            // Optimistically update to the new value\n            updateCache({\n              resource: callTimeResource,\n              id: callTimeId\n            });\n            // run the success callbacks during the next tick\n            setTimeout(function () {\n              if (callTimeOptions.onSuccess) {\n                callTimeOptions.onSuccess(callTimePreviousData, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              } else if (mutationOptions.onSuccess) {\n                mutationOptions.onSuccess(callTimePreviousData, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }\n            }, 0);\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: callTimeOptions.onSettled,\n                onError: callTimeOptions.onError\n              })];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                      value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: callTimeOptions.onSettled,\n                    onError: callTimeOptions.onError\n                  });\n                }\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  var mutationResult = useMemo(function () {\n    return __assign({\n      isLoading: mutation.isPending\n    }, mutation);\n  }, [mutation]);\n  return [useEvent(mutate), mutationResult];\n};","map":{"version":3,"names":["useMemo","useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useEvent","useDelete","resource","params","options","dataProvider","queryClient","id","previousData","_a","mutationMode","mutationOptions","__rest","mode","paramsRef","snapshot","hasCallTimeOnError","hasCallTimeOnSuccess","hasCallTimeOnSettled","updateCache","now","Date","updatedAt","current","updateColl","old","index","findIndex","record","__spreadArray","slice","setQueriesData","queryKey","res","data","newCollection","recordWasFound","length","total","undefined","pageInfo","pages","__assign","map","page","coll","mutation","mutationFn","_b","_c","callTimeResource","_d","callTimeId","_e","callTimePreviousData","_f","meta","callTimeMeta","Error","delete","then","onMutate","variables","__awaiter","userContext","sent","onError","error","context","forEach","key","value","setQueryData","onSuccess","onSettled","invalidateQueries","mutate","callTimeParams","callTimeOptions","otherCallTimeOptions","queryKeys","reduce","prev","concat","getQueriesData","Promise","all","cancelQueries","setTimeout","once","isUndo","mutationResult","isLoading","isPending"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/dataProvider/useDelete.ts"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n    UseInfiniteQueryResult,\n    InfiniteData,\n} from '@tanstack/react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport {\n    RaRecord,\n    DeleteParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n    GetInfiniteListResult,\n} from '../types';\nimport { useEvent } from '../util';\n\n/**\n * Get a callback to call the dataProvider.delete() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The delete parameters { id, previousData }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.previousData The record before the update is applied\n *\n * @returns The current mutation state. Destructure as [deleteOne, { data, error, isPending }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteOne, { isPending: false, isIdle: true }]\n * - start:   [deleteOne, { isPending: true }]\n * - success: [deleteOne, { data: [data from response], isPending: false, isSuccess: true }]\n * - error:   [deleteOne, { error: [error from response], isPending: false, isError: true }]\n *\n * The deleteOne() function must be called with a resource and a parameter object: deleteOne(resource, { id, previousData, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://tanstack.com/query/v5/docs/react/reference/useMutation\n *\n * @example // set params when calling the deleteOne callback\n *\n * import { useDelete, useRecordContext } from 'react-admin';\n *\n * const DeleteButton = () => {\n *     const record = useRecordContext();\n *     const [deleteOne, { isPending, error }] = useDelete();\n *     const handleClick = () => {\n *         deleteOne('likes', { id: record.id, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={handleClick}>Delete</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDelete, useRecordContext } from 'react-admin';\n *\n * const DeleteButton = () => {\n *     const record = useRecordContext();\n *     const [deleteOne, { isPending, error }] = useDelete('likes', { id: record.id, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={() => deleteOne()}>Delete</button>;\n * };\n *\n * @example // TypeScript\n * const [delete, { data }] = useDelete<Product>('products', { id, previousData: product });\n *                    \\-- data is Product\n */\nexport const useDelete = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown,\n>(\n    resource?: string,\n    params: Partial<DeleteParams<RecordType>> = {},\n    options: UseDeleteOptions<RecordType, MutationError> = {}\n): UseDeleteResult<RecordType, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const { id, previousData } = params;\n    const { mutationMode = 'pessimistic', ...mutationOptions } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef = useRef<Partial<DeleteParams<RecordType>>>(params);\n    const snapshot = useRef<Snapshot>([]);\n    const hasCallTimeOnError = useRef(false);\n    const hasCallTimeOnSuccess = useRef(false);\n    const hasCallTimeOnSettled = useRef(false);\n\n    const updateCache = ({ resource, id }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const now = Date.now();\n        const updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return old;\n            const index = old.findIndex(\n                // eslint-disable-next-line eqeqeq\n                record => record.id == id\n            );\n            if (index === -1) {\n                return old;\n            }\n            return [...old.slice(0, index), ...old.slice(index + 1)];\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getList'] },\n            (res: GetListResult) => {\n                if (!res || !res.data) return res;\n                const newCollection = updateColl(res.data);\n                const recordWasFound = newCollection.length < res.data.length;\n                return recordWasFound\n                    ? {\n                          data: newCollection,\n                          total: res.total ? res.total - 1 : undefined,\n                          pageInfo: res.pageInfo,\n                      }\n                    : res;\n            },\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getInfiniteList'] },\n            (\n                res: UseInfiniteQueryResult<\n                    InfiniteData<GetInfiniteListResult>\n                >['data']\n            ) => {\n                if (!res || !res.pages) return res;\n                return {\n                    ...res,\n                    pages: res.pages.map(page => {\n                        const newCollection = updateColl(page.data);\n                        const recordWasFound =\n                            newCollection.length < page.data.length;\n                        return recordWasFound\n                            ? {\n                                  ...page,\n                                  data: newCollection,\n                                  total: page.total\n                                      ? page.total - 1\n                                      : undefined,\n                                  pageInfo: page.pageInfo,\n                              }\n                            : page;\n                    }),\n                };\n            },\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getMany'] },\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getManyReference'] },\n            (res: GetListResult) => {\n                if (!res || !res.data) return res;\n                const newCollection = updateColl(res.data);\n                const recordWasFound = newCollection.length < res.data.length;\n                return recordWasFound\n                    ? {\n                          data: newCollection,\n                          total: res.total! - 1,\n                      }\n                    : res;\n            },\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        RecordType,\n        MutationError,\n        Partial<UseDeleteMutateParams<RecordType>>\n    >({\n        mutationFn: ({\n            resource: callTimeResource = resource,\n            id: callTimeId = paramsRef.current.id,\n            previousData: callTimePreviousData = paramsRef.current.previousData,\n            meta: callTimeMeta = paramsRef.current.meta,\n        } = {}) => {\n            if (!callTimeResource) {\n                throw new Error(\n                    'useDelete mutation requires a non-empty resource'\n                );\n            }\n            if (callTimeId == null) {\n                throw new Error('useDelete mutation requires a non-empty id');\n            }\n            return dataProvider\n                .delete<RecordType>(callTimeResource, {\n                    id: callTimeId,\n                    previousData: callTimePreviousData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data);\n        },\n        ...mutationOptions,\n        onMutate: async (\n            variables: Partial<UseDeleteMutateParams<RecordType>>\n        ) => {\n            if (mutationOptions.onMutate) {\n                const userContext =\n                    (await mutationOptions.onMutate(variables)) || {};\n                return {\n                    snapshot: snapshot.current,\n                    // @ts-ignore\n                    ...userContext,\n                };\n            } else {\n                // Return a context object with the snapshot value\n                return { snapshot: snapshot.current };\n            }\n        },\n        onError: (\n            error: MutationError,\n            variables: Partial<UseDeleteMutateParams<RecordType>> = {},\n            context: { snapshot: Snapshot }\n        ) => {\n            if (mode.current === 'optimistic' || mode.current === 'undoable') {\n                // If the mutation fails, use the context returned from onMutate to rollback\n                context.snapshot.forEach(([key, value]) => {\n                    queryClient.setQueryData(key, value);\n                });\n            }\n\n            if (mutationOptions.onError && !hasCallTimeOnError.current) {\n                return mutationOptions.onError(error, variables, context);\n            }\n            // call-time error callback is executed by react-query\n        },\n        onSuccess: (\n            data: RecordType,\n            variables: Partial<UseDeleteMutateParams<RecordType>> = {},\n            context: unknown\n        ) => {\n            if (mode.current === 'pessimistic') {\n                // update the getOne and getList query cache with the new result\n                const {\n                    resource: callTimeResource = resource,\n                    id: callTimeId = id,\n                } = variables;\n                updateCache({\n                    resource: callTimeResource,\n                    id: callTimeId,\n                });\n\n                if (\n                    mutationOptions.onSuccess &&\n                    !hasCallTimeOnSuccess.current\n                ) {\n                    mutationOptions.onSuccess(data, variables, context);\n                }\n                // call-time success callback is executed by react-query\n            }\n        },\n        onSettled: (\n            data: RecordType,\n            error: MutationError,\n            variables: Partial<UseDeleteMutateParams<RecordType>> = {},\n            context: { snapshot: Snapshot }\n        ) => {\n            if (mode.current === 'optimistic' || mode.current === 'undoable') {\n                // Always refetch after error or success:\n                context.snapshot.forEach(([queryKey]) => {\n                    queryClient.invalidateQueries({ queryKey });\n                });\n            }\n\n            if (mutationOptions.onSettled && !hasCallTimeOnSettled.current) {\n                return mutationOptions.onSettled(\n                    data,\n                    error,\n                    variables,\n                    context\n                );\n            }\n        },\n    });\n\n    const mutate = async (\n        callTimeResource: string | undefined = resource,\n        callTimeParams: Partial<DeleteParams<RecordType>> = {},\n        callTimeOptions: MutateOptions<\n            RecordType,\n            MutationError,\n            Partial<UseDeleteMutateParams<RecordType>>,\n            unknown\n        > & {\n            mutationMode?: MutationMode;\n            onSuccess?: (\n                data: RecordType | undefined,\n                variables: Partial<UseDeleteMutateParams<RecordType>>,\n                context: unknown\n            ) => void;\n        } = {}\n    ) => {\n        const { mutationMode, ...otherCallTimeOptions } = callTimeOptions;\n        hasCallTimeOnError.current = !!callTimeOptions.onError;\n        hasCallTimeOnSuccess.current = !!callTimeOptions.onSuccess;\n        hasCallTimeOnSettled.current = !!callTimeOptions.onSettled;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (mode.current === 'pessimistic') {\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                otherCallTimeOptions\n            );\n        }\n\n        const {\n            id: callTimeId = id,\n            previousData: callTimePreviousData = previousData,\n        } = callTimeParams;\n\n        // optimistic update as documented in https://react-query-v5.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const queryKeys = [\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getInfiniteList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://tanstack.com/query/v5/docs/react/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, queryKey) =>\n                prev.concat(queryClient.getQueriesData({ queryKey })),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([queryKey]) =>\n                queryClient.cancelQueries({ queryKey })\n            )\n        );\n\n        // Optimistically update to the new value\n        updateCache({\n            resource: callTimeResource,\n            id: callTimeId,\n        });\n\n        // run the success callbacks during the next tick\n        setTimeout(() => {\n            if (callTimeOptions.onSuccess) {\n                callTimeOptions.onSuccess(\n                    callTimePreviousData,\n                    { resource: callTimeResource, ...callTimeParams },\n                    { snapshot: snapshot.current }\n                );\n            } else if (mutationOptions.onSuccess) {\n                mutationOptions.onSuccess(\n                    callTimePreviousData,\n                    { resource: callTimeResource, ...callTimeParams },\n                    { snapshot: snapshot.current }\n                );\n            }\n        }, 0);\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                {\n                    onSettled: callTimeOptions.onSettled,\n                    onError: callTimeOptions.onError,\n                }\n            );\n        } else {\n            // undoable mutation: register the mutation for later\n            undoableEventEmitter.once('end', ({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate(\n                        { resource: callTimeResource, ...callTimeParams },\n                        {\n                            onSettled: callTimeOptions.onSettled,\n                            onError: callTimeOptions.onError,\n                        }\n                    );\n                }\n            });\n        }\n    };\n\n    const mutationResult = useMemo(\n        () => ({\n            isLoading: mutation.isPending,\n            ...mutation,\n        }),\n        [mutation]\n    );\n\n    return [useEvent(mutate), mutationResult];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseDeleteMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    id?: RecordType['id'];\n    data?: Partial<RecordType>;\n    previousData?: any;\n    meta?: any;\n}\n\nexport type UseDeleteOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown,\n> = UseMutationOptions<\n    RecordType,\n    MutationError,\n    Partial<UseDeleteMutateParams<RecordType>>\n> & {\n    mutationMode?: MutationMode;\n    onSuccess?: (\n        data: RecordType | undefined,\n        variables: Partial<UseDeleteMutateParams<RecordType>>,\n        context: unknown\n    ) => void;\n};\n\nexport type UseDeleteResult<\n    RecordType extends RaRecord = any,\n    MutationError = unknown,\n> = [\n    (\n        resource?: string,\n        params?: Partial<DeleteParams<RecordType>>,\n        options?: MutateOptions<\n            RecordType,\n            MutationError,\n            Partial<UseDeleteMutateParams<RecordType>>,\n            unknown\n        > & {\n            mutationMode?: MutationMode;\n        }\n    ) => Promise<void>,\n    UseMutationResult<\n        RecordType,\n        MutationError,\n        Partial<DeleteParams<RecordType> & { resource?: string }>,\n        unknown\n    >,\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}