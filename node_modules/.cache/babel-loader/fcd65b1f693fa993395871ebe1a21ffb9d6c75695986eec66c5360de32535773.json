{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Fragment, useState } from 'react';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport { alpha, styled } from '@mui/material/styles';\nimport { useTranslate, useNotify, useResourceContext, useRecordContext, useUpdate } from 'ra-core';\nimport { Confirm } from '../layout';\nimport { Button } from './Button';\nimport { humanize, inflect } from 'inflection';\nexport var UpdateWithConfirmButton = function (props) {\n  var notify = useNotify();\n  var translate = useTranslate();\n  var resource = useResourceContext(props);\n  var _a = useState(false),\n    isOpen = _a[0],\n    setOpen = _a[1];\n  var record = useRecordContext(props);\n  var _b = props.confirmTitle,\n    confirmTitle = _b === void 0 ? 'ra.message.bulk_update_title' : _b,\n    _c = props.confirmContent,\n    confirmContent = _c === void 0 ? 'ra.message.bulk_update_content' : _c,\n    data = props.data,\n    _d = props.icon,\n    icon = _d === void 0 ? defaultIcon : _d,\n    _e = props.label,\n    label = _e === void 0 ? 'ra.action.update' : _e,\n    _f = props.mutationMode,\n    mutationMode = _f === void 0 ? 'pessimistic' : _f,\n    onClick = props.onClick,\n    _g = props.mutationOptions,\n    mutationOptions = _g === void 0 ? {} : _g,\n    rest = __rest(props, [\"confirmTitle\", \"confirmContent\", \"data\", \"icon\", \"label\", \"mutationMode\", \"onClick\", \"mutationOptions\"]);\n  var mutationMeta = mutationOptions.meta,\n    _h = mutationOptions.onSuccess,\n    onSuccess = _h === void 0 ? function () {\n      notify('ra.notification.updated', {\n        type: 'info',\n        messageArgs: {\n          smart_count: 1\n        },\n        undoable: mutationMode === 'undoable'\n      });\n    } : _h,\n    _j = mutationOptions.onError,\n    onError = _j === void 0 ? function (error) {\n      notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n    } : _j,\n    _k = mutationOptions.onSettled,\n    onSettled = _k === void 0 ? function () {\n      setOpen(false);\n    } : _k,\n    otherMutationOptions = __rest(mutationOptions, [\"meta\", \"onSuccess\", \"onError\", \"onSettled\"]);\n  var _l = useUpdate(resource, {\n      id: record === null || record === void 0 ? void 0 : record.id,\n      data: data,\n      meta: mutationMeta,\n      previousData: record\n    }, __assign({\n      onSuccess: onSuccess,\n      onError: onError,\n      onSettled: onSettled,\n      mutationMode: mutationMode\n    }, otherMutationOptions)),\n    update = _l[0],\n    isPending = _l[1].isPending;\n  var handleClick = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n  var handleDialogClose = function () {\n    setOpen(false);\n  };\n  var handleUpdate = function (e) {\n    update(resource, {\n      id: record === null || record === void 0 ? void 0 : record.id,\n      data: data,\n      meta: mutationMeta,\n      previousData: record\n    });\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n  return React.createElement(Fragment, null, React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon), React.createElement(Confirm, {\n    isOpen: isOpen,\n    loading: isPending,\n    title: confirmTitle,\n    content: confirmContent,\n    translateOptions: {\n      smart_count: 1,\n      name: translate(\"resources.\".concat(resource, \".forcedCaseName\"), {\n        smart_count: 1,\n        _: humanize(translate(\"resources.\".concat(resource, \".name\"), {\n          smart_count: 1,\n          _: resource ? inflect(resource, 1) : undefined\n        }), true)\n      })\n    },\n    onConfirm: handleUpdate,\n    onClose: handleDialogClose\n  }));\n};\nvar sanitizeRestProps = function (_a) {\n  var label = _a.label,\n    rest = __rest(_a, [\"label\"]);\n  return rest;\n};\nvar PREFIX = 'RaUpdateWithConfirmButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});\nvar defaultIcon = React.createElement(ActionUpdate, null);","map":{"version":3,"names":["React","Fragment","useState","ActionUpdate","alpha","styled","useTranslate","useNotify","useResourceContext","useRecordContext","useUpdate","Confirm","Button","humanize","inflect","UpdateWithConfirmButton","props","notify","translate","resource","_a","isOpen","setOpen","record","_b","confirmTitle","_c","confirmContent","data","_d","icon","defaultIcon","_e","label","_f","mutationMode","onClick","_g","mutationOptions","rest","__rest","mutationMeta","meta","_h","onSuccess","type","messageArgs","smart_count","undoable","_j","onError","error","message","_","undefined","_k","onSettled","otherMutationOptions","_l","id","previousData","__assign","update","isPending","handleClick","e","stopPropagation","handleDialogClose","handleUpdate","createElement","StyledButton","sanitizeRestProps","loading","title","content","translateOptions","name","concat","onConfirm","onClose","PREFIX","overridesResolver","styles","root","theme","color","palette","primary","main","backgroundColor"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/button/UpdateWithConfirmButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Fragment, useState, ReactElement } from 'react';\nimport ActionUpdate from '@mui/icons-material/Update';\n\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    useTranslate,\n    useNotify,\n    useResourceContext,\n    MutationMode,\n    RaRecord,\n    useRecordContext,\n    useUpdate,\n    UpdateParams,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport { humanize, inflect } from 'inflection';\n\nexport const UpdateWithConfirmButton = (\n    props: UpdateWithConfirmButtonProps\n) => {\n    const notify = useNotify();\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const [isOpen, setOpen] = useState(false);\n    const record = useRecordContext(props);\n\n    const {\n        confirmTitle = 'ra.message.bulk_update_title',\n        confirmContent = 'ra.message.bulk_update_content',\n        data,\n        icon = defaultIcon,\n        label = 'ra.action.update',\n        mutationMode = 'pessimistic',\n        onClick,\n        mutationOptions = {},\n        ...rest\n    } = props;\n    const {\n        meta: mutationMeta,\n        onSuccess = () => {\n            notify('ra.notification.updated', {\n                type: 'info',\n                messageArgs: { smart_count: 1 },\n                undoable: mutationMode === 'undoable',\n            });\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                  ? error.message\n                                  : undefined,\n                    },\n                }\n            );\n        },\n        onSettled = () => {\n            setOpen(false);\n        },\n        ...otherMutationOptions\n    } = mutationOptions;\n\n    const [update, { isPending }] = useUpdate(\n        resource,\n        { id: record?.id, data, meta: mutationMeta, previousData: record },\n        {\n            onSuccess,\n            onError,\n            onSettled,\n            mutationMode,\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleUpdate = e => {\n        update(resource, {\n            id: record?.id,\n            data,\n            meta: mutationMeta,\n            previousData: record,\n        });\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isPending}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: 1,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: 1,\n                        _: humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: 1,\n                                _: resource ? inflect(resource, 1) : undefined,\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleUpdate}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    label,\n    ...rest\n}: Omit<\n    UpdateWithConfirmButtonProps,\n    'resource' | 'selectedIds' | 'icon' | 'data'\n>) => rest;\n\nexport interface UpdateWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: React.ReactNode;\n    icon?: ReactElement;\n    data: any;\n    mutationMode?: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        UpdateParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaUpdateWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionUpdate />;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}