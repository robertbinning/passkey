{"ast":null,"code":"// webauthn.js\nexport const createCredential = async email => {\n  const publicKeyCredentialCreationOptions = {\n    challenge: window.crypto.getRandomValues(new Uint8Array(32)),\n    rp: {\n      name: \"Kwaai\"\n    },\n    user: {\n      id: window.crypto.getRandomValues(new Uint8Array(32)),\n      name: email,\n      displayName: email\n    },\n    pubKeyCredParams: [{\n      type: \"public-key\",\n      alg: -7 // ES256 algorithm\n    }],\n    authenticatorSelection: {\n      authenticatorAttachment: \"hybrid\",\n      // Ensure cross-platform for QR code\n      userVerification: \"preferred\"\n    },\n    timeout: 60000,\n    attestation: \"direct\"\n  };\n  console.log('PublicKeyCredentialCreationOptions:', publicKeyCredentialCreationOptions);\n  try {\n    const credential = await navigator.credentials.create({\n      publicKey: publicKeyCredentialCreationOptions\n    });\n    return credential;\n  } catch (error) {\n    console.error('Error creating credential:', error);\n    throw error;\n  }\n};\nexport const getCredential = async () => {\n  const publicKeyCredentialRequestOptions = {\n    challenge: window.crypto.getRandomValues(new Uint8Array(32)),\n    allowCredentials: [{\n      type: \"public-key\",\n      id: Uint8Array.from('credentialIdFromServer', c => c.charCodeAt(0)),\n      transports: [\"internal\", \"cross-platform\", \"hybrid\"] // Ensure cross-platform and hybrid for QR code\n    }],\n    userVerification: \"preferred\",\n    timeout: 60000\n  };\n  try {\n    const assertion = await navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions\n    });\n    return assertion;\n  } catch (error) {\n    console.error('Error getting credential:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["createCredential","email","publicKeyCredentialCreationOptions","challenge","window","crypto","getRandomValues","Uint8Array","rp","name","user","id","displayName","pubKeyCredParams","type","alg","authenticatorSelection","authenticatorAttachment","userVerification","timeout","attestation","console","log","credential","navigator","credentials","create","publicKey","error","getCredential","publicKeyCredentialRequestOptions","allowCredentials","from","c","charCodeAt","transports","assertion","get"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/webauthn.js"],"sourcesContent":["// webauthn.js\nexport const createCredential = async (email) => {\n    const publicKeyCredentialCreationOptions = {\n        challenge: window.crypto.getRandomValues(new Uint8Array(32)),\n        rp: {\n            name: \"Kwaai\"\n        },\n        user: {\n            id: window.crypto.getRandomValues(new Uint8Array(32)),\n            name: email,\n            displayName: email\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg: -7 // ES256 algorithm\n            }\n        ],\n        authenticatorSelection: {\n            authenticatorAttachment: \"hybrid\", // Ensure cross-platform for QR code\n            userVerification: \"preferred\"\n        },\n        timeout: 60000,\n        attestation: \"direct\"\n    };\n\n    console.log('PublicKeyCredentialCreationOptions:', publicKeyCredentialCreationOptions);\n\n    try {\n        const credential = await navigator.credentials.create({\n            publicKey: publicKeyCredentialCreationOptions\n        });\n        return credential;\n    } catch (error) {\n        console.error('Error creating credential:', error);\n        throw error;\n    }\n};\n\nexport const getCredential = async () => {\n    const publicKeyCredentialRequestOptions = {\n        challenge: window.crypto.getRandomValues(new Uint8Array(32)),\n        allowCredentials: [\n            {\n                type: \"public-key\",\n                id: Uint8Array.from('credentialIdFromServer', c => c.charCodeAt(0)),\n                transports: [\"internal\", \"cross-platform\", \"hybrid\"] // Ensure cross-platform and hybrid for QR code\n            }\n        ],\n        userVerification: \"preferred\",\n        timeout: 60000\n    };\n\n    try {\n        const assertion = await navigator.credentials.get({\n            publicKey: publicKeyCredentialRequestOptions\n        });\n        return assertion;\n    } catch (error) {\n        console.error('Error getting credential:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC7C,MAAMC,kCAAkC,GAAG;IACvCC,SAAS,EAAEC,MAAM,CAACC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC;IAC5DC,EAAE,EAAE;MACAC,IAAI,EAAE;IACV,CAAC;IACDC,IAAI,EAAE;MACFC,EAAE,EAAEP,MAAM,CAACC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC;MACrDE,IAAI,EAAER,KAAK;MACXW,WAAW,EAAEX;IACjB,CAAC;IACDY,gBAAgB,EAAE,CACd;MACIC,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC,CAAC,CAAC;IACZ,CAAC,CACJ;IACDC,sBAAsB,EAAE;MACpBC,uBAAuB,EAAE,QAAQ;MAAE;MACnCC,gBAAgB,EAAE;IACtB,CAAC;IACDC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE;EACjB,CAAC;EAEDC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEpB,kCAAkC,CAAC;EAEtF,IAAI;IACA,MAAMqB,UAAU,GAAG,MAAMC,SAAS,CAACC,WAAW,CAACC,MAAM,CAAC;MAClDC,SAAS,EAAEzB;IACf,CAAC,CAAC;IACF,OAAOqB,UAAU;EACrB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZP,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMC,iCAAiC,GAAG;IACtC3B,SAAS,EAAEC,MAAM,CAACC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC;IAC5DwB,gBAAgB,EAAE,CACd;MACIjB,IAAI,EAAE,YAAY;MAClBH,EAAE,EAAEJ,UAAU,CAACyB,IAAI,CAAC,wBAAwB,EAAEC,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;MACnEC,UAAU,EAAE,CAAC,UAAU,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACzD,CAAC,CACJ;IACDjB,gBAAgB,EAAE,WAAW;IAC7BC,OAAO,EAAE;EACb,CAAC;EAED,IAAI;IACA,MAAMiB,SAAS,GAAG,MAAMZ,SAAS,CAACC,WAAW,CAACY,GAAG,CAAC;MAC9CV,SAAS,EAAEG;IACf,CAAC,CAAC;IACF,OAAOM,SAAS;EACpB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZP,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}