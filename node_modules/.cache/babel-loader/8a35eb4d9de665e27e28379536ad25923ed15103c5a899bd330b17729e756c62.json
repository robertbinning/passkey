{"ast":null,"code":"import { useStore } from 'ra-core';\nimport { useMediaQuery } from '@mui/material';\nimport { useThemesContext } from './useThemesContext';\n/**\n * Read and update the theme mode (light or dark)\n *\n * @example\n * const [theme, setTheme] = useTheme('light');\n * const toggleTheme = () => {\n *    setTheme(theme === 'light' ? 'dark' : 'light');\n * };\n *\n */\nexport var useTheme = function (type) {\n  var darkTheme = useThemesContext().darkTheme;\n  var prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n    noSsr: true\n  });\n  var _a = useStore('theme', type !== null && type !== void 0 ? type : prefersDarkMode && darkTheme ? 'dark' : 'light'),\n    theme = _a[0],\n    setter = _a[1];\n  // Ensure that even though the store has its value set to 'dark', we still use the light theme when no dark theme is available\n  return [darkTheme != null ? theme : 'light', setter];\n};","map":{"version":3,"names":["useStore","useMediaQuery","useThemesContext","useTheme","type","darkTheme","prefersDarkMode","noSsr","_a","theme","setter"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/theme/useTheme.ts"],"sourcesContent":["import { useStore } from 'ra-core';\nimport { ThemeType } from './types';\nimport { useMediaQuery } from '@mui/material';\nimport { useThemesContext } from './useThemesContext';\n\nexport type ThemeSetter = (theme: ThemeType) => void;\n\n/**\n * Read and update the theme mode (light or dark)\n *\n * @example\n * const [theme, setTheme] = useTheme('light');\n * const toggleTheme = () => {\n *    setTheme(theme === 'light' ? 'dark' : 'light');\n * };\n *\n */\nexport const useTheme = (type?: ThemeType): [ThemeType, ThemeSetter] => {\n    const { darkTheme } = useThemesContext();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n        noSsr: true,\n    });\n    const [theme, setter] = useStore<ThemeType>(\n        'theme',\n        type ?? (prefersDarkMode && darkTheme ? 'dark' : 'light')\n    );\n\n    // Ensure that even though the store has its value set to 'dark', we still use the light theme when no dark theme is available\n    return [darkTheme != null ? theme : 'light', setter];\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;AAElC,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAASC,gBAAgB,QAAQ,oBAAoB;AAIrD;;;;;;;;;;AAUA,OAAO,IAAMC,QAAQ,GAAG,SAAAA,CAACC,IAAgB;EAC7B,IAAAC,SAAS,GAAKH,gBAAgB,EAAE,CAAAG,SAAvB;EACjB,IAAMC,eAAe,GAAGL,aAAa,CAAC,8BAA8B,EAAE;IAClEM,KAAK,EAAE;GACV,CAAC;EACI,IAAAC,EAAA,GAAkBR,QAAQ,CAC5B,OAAO,EACPI,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAKE,eAAe,IAAID,SAAS,GAAG,MAAM,GAAG,OAAQ,CAC5D;IAHMI,KAAK,GAAAD,EAAA;IAAEE,MAAM,GAAAF,EAAA,GAGnB;EAED;EACA,OAAO,CAACH,SAAS,IAAI,IAAI,GAAGI,KAAK,GAAG,OAAO,EAAEC,MAAM,CAAC;AACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}