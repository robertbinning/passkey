{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/**\n * Extend a dataProvider to execute callbacks before and after read and write calls.\n *\n * @param {DataProvider} dataProvider The dataProvider to wrap\n * @param {ResourceCallbacks[]} handlers An array of ResourceCallbacks\n *\n * @typedef {Object} ResourceCallbacks\n * @property {string} resource The resource name\n * @property {AfterCreate} [afterCreate] A callback (or array of callbacks) executed after create\n * @property {AfterDelete} [afterDelete] A callback (or array of callbacks) executed after delete\n * @property {AfterDeleteMany} [afterDeleteMany] A callback (or array of callbacks) executed after deleteMany\n * @property {AfterGetList} [afterGetList] A callback (or array of callbacks) executed after getList\n * @property {AfterGetMany} [afterGetMany] A callback (or array of callbacks) executed after getMany\n * @property {AfterGetManyReference} [afterGetManyReference] A callback (or array of callbacks) executed after getManyReference\n * @property {AfterGetOne} [afterGetOne] A callback (or array of callbacks) executed after getOne\n * @property {AfterRead} [afterRead] A callback (or array of callbacks) executed after read (getList, getMany, getManyReference, getOne)\n * @property {AfterSave} [afterSave] A callback (or array of callbacks) executed after save (create, update, updateMany)\n * @property {AfterUpdate} [afterUpdate] A callback (or array of callbacks) executed after update\n * @property {AfterUpdateMany} [afterUpdateMany] A callback (or array of callbacks) executed after updateMany\n * @property {BeforeCreate} [beforeCreate] A callback (or array of callbacks) executed before create\n * @property {BeforeDelete} [beforeDelete] A callback (or array of callbacks) executed before delete\n * @property {BeforeDeleteMany} [beforeDeleteMany] A callback (or array of callbacks) executed before deleteMany\n * @property {BeforeGetList} [beforeGetList] A callback (or array of callbacks) executed before getList\n * @property {BeforeGetMany} [beforeGetMany] A callback (or array of callbacks) executed before getMany\n * @property {BeforeGetManyReference} [beforeGetManyReference] A callback (or array of callbacks) executed before getManyReference\n * @property {BeforeGetOne} [beforeGetOne] A callback (or array of callbacks) executed before getOne\n * @property {BeforeSave} [beforeSave] A callback (or array of callbacks) executed before save (create, update, updateMany)\n * @property {BeforeUpdate} [beforeUpdate] A callback (or array of callbacks) executed before update\n * @property {BeforeUpdateMany} [beforeUpdateMany] A callback (or array of callbacks) executed before updateMany\n *\n * Warnings:\n * - As queries issued in the callbacks are not done through react-query,\n *   any change in the data will not be automatically reflected in the UI.\n * - The callbacks are not executed in a transaction. In case of error,\n *   the backend may be left in an inconsistent state.\n * - When calling the API directly using fetch or another client,\n *   the callbacks will not be executed, leaving the backend in a possibly inconsistent state.\n * - If a callback triggers the query it's listening to, this will lead to a infinite loop.\n *\n * @example\n *\n * const dataProvider = withLifecycleCallbacks(\n *   jsonServerProvider(\"http://localhost:3000\"),\n *   [\n *     {\n *       resource: \"posts\",\n *       afterRead: async (data, dataProvider, resource) => {\n *         // rename field to the record\n *         data.user_id = data.userId;\n *         return data;\n *       },\n *       // executed after create, update and updateMany\n *       afterSave: async (record, dataProvider, resource) => {\n *         // update the author's nb_posts\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: record.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total },\n *           previousData: user,\n *         });\n *         return record;\n *       },\n *       beforeDelete: async (params, dataProvider, resource) => {\n *         // delete all comments linked to the post\n *         const { data: comments } = await dataProvider.getManyReference(\n *           \"comments\",\n *           {\n *             target: \"post_id\",\n *             id: params.id,\n *           }\n *         );\n *         if (comments.length > 0) {\n *           await dataProvider.deleteMany(\"comments\", {\n *             ids: comments.map((comment) => comment.id),\n *           });\n *         }\n *         // update the author's nb_posts\n *         const { data: post } = await dataProvider.getOne(\"posts\", {\n *           id: params.id,\n *         });\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: post.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total - 1 },\n *           previousData: user,\n *         });\n *         return params;\n *       },\n *     },\n *   ]\n * );\n */\nexport var withLifecycleCallbacks = function (dataProvider, handlers) {\n  return __assign(__assign({}, dataProvider), {\n    getList: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, result, _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeGetList',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _b.sent();\n              return [4 /*yield*/, dataProvider.getList(resource, newParams)];\n            case 2:\n              result = _b.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterGetList',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 3:\n              result = _b.sent();\n              _a = result;\n              return [4 /*yield*/, Promise.all(result.data.map(function (record) {\n                return applyCallbacks({\n                  name: 'afterRead',\n                  params: record,\n                  dataProvider: dataProvider,\n                  handlers: handlers,\n                  resource: resource\n                });\n              }))];\n            case 4:\n              _a.data = _b.sent();\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    getOne: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, result, _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeGetOne',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _b.sent();\n              return [4 /*yield*/, dataProvider.getOne(resource, newParams)];\n            case 2:\n              result = _b.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterGetOne',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 3:\n              result = _b.sent();\n              _a = result;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterRead',\n                params: result.data,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 4:\n              _a.data = _b.sent();\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    getMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, result, _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeGetMany',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _b.sent();\n              return [4 /*yield*/, dataProvider.getMany(resource, newParams)];\n            case 2:\n              result = _b.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterGetMany',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 3:\n              result = _b.sent();\n              _a = result;\n              return [4 /*yield*/, Promise.all(result.data.map(function (record) {\n                return applyCallbacks({\n                  name: 'afterRead',\n                  params: record,\n                  dataProvider: dataProvider,\n                  handlers: handlers,\n                  resource: resource\n                });\n              }))];\n            case 4:\n              _a.data = _b.sent();\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    getManyReference: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, result, _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeGetManyReference',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _b.sent();\n              return [4 /*yield*/, dataProvider.getManyReference(resource, newParams)];\n            case 2:\n              result = _b.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterGetManyReference',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 3:\n              result = _b.sent();\n              _a = result;\n              return [4 /*yield*/, Promise.all(result.data.map(function (record) {\n                return applyCallbacks({\n                  name: 'afterRead',\n                  params: record,\n                  dataProvider: dataProvider,\n                  handlers: handlers,\n                  resource: resource\n                });\n              }))];\n            case 4:\n              _a.data = _b.sent();\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    update: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, _a, result, _b;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeUpdate',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _c.sent();\n              _a = newParams;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeSave',\n                params: newParams.data,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 2:\n              _a.data = _c.sent();\n              return [4 /*yield*/, dataProvider.update(resource, newParams)];\n            case 3:\n              result = _c.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterUpdate',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 4:\n              result = _c.sent();\n              _b = result;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterSave',\n                params: result.data,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 5:\n              _b.data = _c.sent();\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    create: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, _a, result, _b;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeCreate',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _c.sent();\n              _a = newParams;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeSave',\n                params: newParams.data,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 2:\n              _a.data = _c.sent();\n              return [4 /*yield*/, dataProvider.create(resource, newParams)];\n            case 3:\n              result = _c.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterCreate',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 4:\n              result = _c.sent();\n              _b = result;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterSave',\n                params: result.data,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 5:\n              _b.data = _c.sent();\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    delete: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeDelete',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _a.sent();\n              return [4 /*yield*/, dataProvider.delete(resource, newParams)];\n            case 2:\n              result = _a.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterDelete',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 3:\n              result = _a.sent();\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    updateMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, _a, result, afterSaveHandlers, records;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeUpdateMany',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _b.sent();\n              _a = newParams;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeSave',\n                params: newParams.data,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 2:\n              _a.data = _b.sent();\n              return [4 /*yield*/, dataProvider.updateMany(resource, newParams)];\n            case 3:\n              result = _b.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterUpdateMany',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 4:\n              result = _b.sent();\n              afterSaveHandlers = handlers.filter(function (h) {\n                return (h.resource === resource || h.resource === '*') && h.afterSave;\n              });\n              if (!(afterSaveHandlers.length > 0)) return [3 /*break*/, 7];\n              return [4 /*yield*/, dataProvider.getMany(resource, {\n                //@ts-ignore\n                ids: result.data\n              })];\n            case 5:\n              records = _b.sent().data;\n              return [4 /*yield*/, Promise.all(records.map(function (record) {\n                return applyCallbacks({\n                  name: 'afterSave',\n                  params: record,\n                  dataProvider: dataProvider,\n                  handlers: handlers,\n                  resource: resource\n                });\n              }))];\n            case 6:\n              _b.sent();\n              _b.label = 7;\n            case 7:\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    },\n    deleteMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              newParams = params;\n              return [4 /*yield*/, applyCallbacks({\n                name: 'beforeDeleteMany',\n                params: newParams,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 1:\n              newParams = _a.sent();\n              return [4 /*yield*/, dataProvider.deleteMany(resource, newParams)];\n            case 2:\n              result = _a.sent();\n              return [4 /*yield*/, applyCallbacks({\n                name: 'afterDeleteMany',\n                params: result,\n                dataProvider: dataProvider,\n                handlers: handlers,\n                resource: resource\n              })];\n            case 3:\n              result = _a.sent();\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    }\n  });\n};\n/**\n * Apply callbacks to the params for the given resource and hook\n * @param {DataProvider} dataProvider The dataProvider\n * @param {ResourceCallbacks[]} handlers An array of ResourceCallbacks\n * @param {string} resource The resource name\n * @param {string} hook The hook name (beforeGetList, afterGetOne, etc.)\n * @param {U} params The params / result to pass to the callbacks\n * @returns {Promise<U>} The params / result after the callbacks have been applied\n */\nexport var applyCallbacks = function (_a) {\n  var name = _a.name,\n    params = _a.params,\n    dataProvider = _a.dataProvider,\n    handlers = _a.handlers,\n    resource = _a.resource;\n  return __awaiter(this, void 0, void 0, function () {\n    var newParams, handlersToApply, _i, handlersToApply_1, handler, callbacksValue, _b, _c, callback;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          newParams = params;\n          handlersToApply = handlers.filter(function (h) {\n            return (h.resource === resource || h.resource === '*') && h[name];\n          });\n          _i = 0, handlersToApply_1 = handlersToApply;\n          _d.label = 1;\n        case 1:\n          if (!(_i < handlersToApply_1.length)) return [3 /*break*/, 9];\n          handler = handlersToApply_1[_i];\n          callbacksValue = handler[name];\n          if (!Array.isArray(callbacksValue)) return [3 /*break*/, 6];\n          _b = 0, _c = callbacksValue !== null && callbacksValue !== void 0 ? callbacksValue : [];\n          _d.label = 2;\n        case 2:\n          if (!(_b < _c.length)) return [3 /*break*/, 5];\n          callback = _c[_b];\n          return [4 /*yield*/, callback(newParams, dataProvider, resource)];\n        case 3:\n          newParams = _d.sent();\n          _d.label = 4;\n        case 4:\n          _b++;\n          return [3 /*break*/, 2];\n        case 5:\n          return [3 /*break*/, 8];\n        case 6:\n          return [4 /*yield*/, callbacksValue(newParams, dataProvider, resource)];\n        case 7:\n          newParams = _d.sent();\n          _d.label = 8;\n        case 8:\n          _i++;\n          return [3 /*break*/, 1];\n        case 9:\n          return [2 /*return*/, newParams];\n      }\n    });\n  });\n};","map":{"version":3,"names":["withLifecycleCallbacks","dataProvider","handlers","__assign","getList","resource","params","newParams","applyCallbacks","name","_b","sent","result","_a","Promise","all","data","map","record","getOne","getMany","getManyReference","update","_c","create","delete","updateMany","afterSaveHandlers","filter","h","afterSave","length","ids","records","deleteMany","handlersToApply","handlersToApply_1","_i","handler","callbacksValue","Array","isArray","callback","_d"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/dataProvider/withLifecycleCallbacks.ts"],"sourcesContent":["import {\n    CreateParams,\n    CreateResult,\n    DataProvider,\n    DeleteManyParams,\n    DeleteManyResult,\n    DeleteParams,\n    DeleteResult,\n    GetListParams,\n    GetListResult,\n    GetManyParams,\n    GetManyReferenceParams,\n    GetManyReferenceResult,\n    GetManyResult,\n    GetOneParams,\n    GetOneResult,\n    RaRecord,\n    UpdateManyParams,\n    UpdateManyResult,\n    UpdateParams,\n    UpdateResult,\n} from '../types';\n\n/**\n * Extend a dataProvider to execute callbacks before and after read and write calls.\n *\n * @param {DataProvider} dataProvider The dataProvider to wrap\n * @param {ResourceCallbacks[]} handlers An array of ResourceCallbacks\n *\n * @typedef {Object} ResourceCallbacks\n * @property {string} resource The resource name\n * @property {AfterCreate} [afterCreate] A callback (or array of callbacks) executed after create\n * @property {AfterDelete} [afterDelete] A callback (or array of callbacks) executed after delete\n * @property {AfterDeleteMany} [afterDeleteMany] A callback (or array of callbacks) executed after deleteMany\n * @property {AfterGetList} [afterGetList] A callback (or array of callbacks) executed after getList\n * @property {AfterGetMany} [afterGetMany] A callback (or array of callbacks) executed after getMany\n * @property {AfterGetManyReference} [afterGetManyReference] A callback (or array of callbacks) executed after getManyReference\n * @property {AfterGetOne} [afterGetOne] A callback (or array of callbacks) executed after getOne\n * @property {AfterRead} [afterRead] A callback (or array of callbacks) executed after read (getList, getMany, getManyReference, getOne)\n * @property {AfterSave} [afterSave] A callback (or array of callbacks) executed after save (create, update, updateMany)\n * @property {AfterUpdate} [afterUpdate] A callback (or array of callbacks) executed after update\n * @property {AfterUpdateMany} [afterUpdateMany] A callback (or array of callbacks) executed after updateMany\n * @property {BeforeCreate} [beforeCreate] A callback (or array of callbacks) executed before create\n * @property {BeforeDelete} [beforeDelete] A callback (or array of callbacks) executed before delete\n * @property {BeforeDeleteMany} [beforeDeleteMany] A callback (or array of callbacks) executed before deleteMany\n * @property {BeforeGetList} [beforeGetList] A callback (or array of callbacks) executed before getList\n * @property {BeforeGetMany} [beforeGetMany] A callback (or array of callbacks) executed before getMany\n * @property {BeforeGetManyReference} [beforeGetManyReference] A callback (or array of callbacks) executed before getManyReference\n * @property {BeforeGetOne} [beforeGetOne] A callback (or array of callbacks) executed before getOne\n * @property {BeforeSave} [beforeSave] A callback (or array of callbacks) executed before save (create, update, updateMany)\n * @property {BeforeUpdate} [beforeUpdate] A callback (or array of callbacks) executed before update\n * @property {BeforeUpdateMany} [beforeUpdateMany] A callback (or array of callbacks) executed before updateMany\n *\n * Warnings:\n * - As queries issued in the callbacks are not done through react-query,\n *   any change in the data will not be automatically reflected in the UI.\n * - The callbacks are not executed in a transaction. In case of error,\n *   the backend may be left in an inconsistent state.\n * - When calling the API directly using fetch or another client,\n *   the callbacks will not be executed, leaving the backend in a possibly inconsistent state.\n * - If a callback triggers the query it's listening to, this will lead to a infinite loop.\n *\n * @example\n *\n * const dataProvider = withLifecycleCallbacks(\n *   jsonServerProvider(\"http://localhost:3000\"),\n *   [\n *     {\n *       resource: \"posts\",\n *       afterRead: async (data, dataProvider, resource) => {\n *         // rename field to the record\n *         data.user_id = data.userId;\n *         return data;\n *       },\n *       // executed after create, update and updateMany\n *       afterSave: async (record, dataProvider, resource) => {\n *         // update the author's nb_posts\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: record.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total },\n *           previousData: user,\n *         });\n *         return record;\n *       },\n *       beforeDelete: async (params, dataProvider, resource) => {\n *         // delete all comments linked to the post\n *         const { data: comments } = await dataProvider.getManyReference(\n *           \"comments\",\n *           {\n *             target: \"post_id\",\n *             id: params.id,\n *           }\n *         );\n *         if (comments.length > 0) {\n *           await dataProvider.deleteMany(\"comments\", {\n *             ids: comments.map((comment) => comment.id),\n *           });\n *         }\n *         // update the author's nb_posts\n *         const { data: post } = await dataProvider.getOne(\"posts\", {\n *           id: params.id,\n *         });\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: post.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total - 1 },\n *           previousData: user,\n *         });\n *         return params;\n *       },\n *     },\n *   ]\n * );\n */\nexport const withLifecycleCallbacks = (\n    dataProvider: DataProvider,\n    handlers: ResourceCallbacks[]\n): DataProvider => {\n    return {\n        ...dataProvider,\n\n        getList: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetListParams\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeGetList',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            let result = await dataProvider.getList<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterGetList',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            result.data = await Promise.all(\n                result.data.map(record =>\n                    applyCallbacks({\n                        name: 'afterRead',\n                        params: record,\n                        dataProvider,\n                        handlers,\n                        resource,\n                    })\n                )\n            );\n\n            return result;\n        },\n\n        getOne: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetOneParams<RecordType>\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeGetOne',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            let result = await dataProvider.getOne<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterGetOne',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            result.data = await applyCallbacks({\n                name: 'afterRead',\n                params: result.data,\n                dataProvider,\n                handlers,\n                resource,\n            });\n\n            return result;\n        },\n\n        getMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetManyParams\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeGetMany',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            let result = await dataProvider.getMany<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterGetMany',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            result.data = await Promise.all(\n                result.data.map(record =>\n                    applyCallbacks({\n                        name: 'afterRead',\n                        params: record,\n                        dataProvider,\n                        handlers,\n                        resource,\n                    })\n                )\n            );\n\n            return result;\n        },\n\n        getManyReference: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetManyReferenceParams\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeGetManyReference',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            let result = await dataProvider.getManyReference<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterGetManyReference',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            result.data = await Promise.all(\n                result.data.map(record =>\n                    applyCallbacks({\n                        name: 'afterRead',\n                        params: record,\n                        dataProvider,\n                        handlers,\n                        resource,\n                    })\n                )\n            );\n            return result;\n        },\n\n        update: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: UpdateParams<RecordType>\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeUpdate',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            newParams.data = await applyCallbacks({\n                name: 'beforeSave',\n                params: newParams.data,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            let result = await dataProvider.update<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterUpdate',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            result.data = await applyCallbacks({\n                name: 'afterSave',\n                params: result.data,\n                dataProvider,\n                handlers,\n                resource,\n            });\n\n            return result;\n        },\n\n        create: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: CreateParams<RecordType>\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeCreate',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            newParams.data = await applyCallbacks({\n                name: 'beforeSave',\n                params: newParams.data,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            let result = await dataProvider.create<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterCreate',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            result.data = await applyCallbacks({\n                name: 'afterSave',\n                params: result.data,\n                dataProvider,\n                handlers,\n                resource,\n            });\n\n            return result;\n        },\n\n        delete: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: DeleteParams<RecordType>\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeDelete',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            let result = await dataProvider.delete<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterDelete',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n\n            return result;\n        },\n\n        updateMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: UpdateManyParams<RecordType>\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeUpdateMany',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n\n            newParams.data = await applyCallbacks({\n                name: 'beforeSave',\n                params: newParams.data,\n                dataProvider,\n                handlers,\n                resource,\n            });\n\n            let result = await dataProvider.updateMany<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterUpdateMany',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n\n            const afterSaveHandlers = handlers.filter(\n                h =>\n                    (h.resource === resource || h.resource === '*') &&\n                    h.afterSave\n            );\n\n            if (afterSaveHandlers.length > 0) {\n                const { data: records } = await dataProvider.getMany(resource, {\n                    //@ts-ignore\n                    ids: result.data,\n                });\n                await Promise.all(\n                    records.map(record =>\n                        applyCallbacks({\n                            name: 'afterSave',\n                            params: record,\n                            dataProvider,\n                            handlers,\n                            resource,\n                        })\n                    )\n                );\n            }\n\n            return result;\n        },\n\n        deleteMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: DeleteManyParams<RecordType>\n        ) {\n            let newParams = params;\n\n            newParams = await applyCallbacks({\n                name: 'beforeDeleteMany',\n                params: newParams,\n                dataProvider,\n                handlers,\n                resource,\n            });\n            let result = await dataProvider.deleteMany<RecordType>(\n                resource,\n                newParams\n            );\n            result = await applyCallbacks({\n                name: 'afterDeleteMany',\n                params: result,\n                dataProvider,\n                handlers,\n                resource,\n            });\n\n            return result;\n        },\n    };\n};\n\n/**\n * Apply callbacks to the params for the given resource and hook\n * @param {DataProvider} dataProvider The dataProvider\n * @param {ResourceCallbacks[]} handlers An array of ResourceCallbacks\n * @param {string} resource The resource name\n * @param {string} hook The hook name (beforeGetList, afterGetOne, etc.)\n * @param {U} params The params / result to pass to the callbacks\n * @returns {Promise<U>} The params / result after the callbacks have been applied\n */\nexport const applyCallbacks = async function <U>({\n    name,\n    params,\n    dataProvider,\n    handlers,\n    resource,\n}: {\n    name: string;\n    params: U;\n    dataProvider: DataProvider;\n    handlers: ResourceCallbacks[];\n    resource: string;\n}): Promise<U> {\n    let newParams = params;\n    const handlersToApply = handlers.filter(\n        h => (h.resource === resource || h.resource === '*') && h[name]\n    );\n    for (let handler of handlersToApply) {\n        const callbacksValue: ResourceCallbacksValue<any> = handler[name];\n        if (Array.isArray(callbacksValue)) {\n            for (let callback of callbacksValue ?? []) {\n                newParams = await callback(newParams, dataProvider, resource);\n            }\n        } else {\n            newParams = await callbacksValue(newParams, dataProvider, resource);\n        }\n    }\n    return newParams;\n};\n\nexport type ResourceCallback<U> = {\n    (params: U, dataProvider: DataProvider, resource: string): Promise<U>;\n};\n\nexport type ResourceCallbacksValue<V> =\n    | ResourceCallback<V>\n    | ResourceCallback<V>[];\n\nexport type ResourceCallbacks<T extends RaRecord = any> = {\n    resource: string;\n    afterCreate?: ResourceCallbacksValue<CreateResult<T>>;\n    afterDelete?: ResourceCallbacksValue<DeleteResult<T>>;\n    afterDeleteMany?: ResourceCallbacksValue<DeleteManyResult<T>>;\n    afterGetList?: ResourceCallbacksValue<GetListResult<T>>;\n    afterGetMany?: ResourceCallbacksValue<GetManyResult<T>>;\n    afterGetManyReference?: ResourceCallbacksValue<GetManyReferenceResult<T>>;\n    afterGetOne?: ResourceCallbacksValue<GetOneResult<T>>;\n    afterUpdate?: ResourceCallbacksValue<UpdateResult<T>>;\n    afterUpdateMany?: ResourceCallbacksValue<UpdateManyResult<T>>;\n    beforeCreate?: ResourceCallbacksValue<CreateParams<T>>;\n    beforeDelete?: ResourceCallbacksValue<DeleteParams<T>>;\n    beforeDeleteMany?: ResourceCallbacksValue<DeleteManyParams<T>>;\n    beforeGetList?: ResourceCallbacksValue<GetListParams>;\n    beforeGetMany?: ResourceCallbacksValue<GetManyParams>;\n    beforeGetManyReference?: ResourceCallbacksValue<GetManyReferenceParams>;\n    beforeGetOne?: ResourceCallbacksValue<GetOneParams<T>>;\n    beforeUpdate?: ResourceCallbacksValue<UpdateParams<T>>;\n    beforeUpdateMany?: ResourceCallbacksValue<UpdateManyParams<T>>;\n\n    // The following hooks don't match a dataProvider method\n\n    /**\n     * Modify the data before it is sent to the dataProvider.\n     *\n     * Used in create, update, and updateMany\n     *\n     * Note: This callback doesn't modify the record itself, but the data argument\n     * (which may be a diff, especially when called with updateMany).\n     */\n    beforeSave?: ResourceCallbacksValue<T>;\n    /**\n     * Update a record after it has been read from the dataProvider\n     *\n     * Used in getOne, getList, getMany, and getManyReference\n     */\n    afterRead?: ResourceCallbacksValue<T>;\n    /**\n     * Use the record after it is returned by the dataProvider.\n     *\n     * Used in create, update, and updateMany\n     */\n    afterSave?: ResourceCallbacksValue<T>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}