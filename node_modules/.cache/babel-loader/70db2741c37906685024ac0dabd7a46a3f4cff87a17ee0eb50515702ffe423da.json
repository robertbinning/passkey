{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport get from 'lodash/get';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nexport var ImageField = function (props) {\n  var _a, _b;\n  var className = props.className,\n    emptyText = props.emptyText,\n    src = props.src,\n    title = props.title,\n    rest = __rest(props, [\"className\", \"emptyText\", \"src\", \"title\"]);\n  var sourceValue = useFieldValue(props);\n  var titleValue = (_b = (_a = useFieldValue(__assign(__assign({}, props), {\n    // @ts-ignore We ignore here because title might be a custom label or undefined instead of a field name\n    source: title\n  }))) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : title;\n  var translate = useTranslate();\n  if (!sourceValue) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : React.createElement(Typography, __assign({\n      component: \"div\",\n      className: className\n    }, sanitizeFieldRestProps(rest)));\n  }\n  if (Array.isArray(sourceValue)) {\n    return React.createElement(Root, __assign({\n      className: className\n    }, sanitizeFieldRestProps(rest)), React.createElement(\"ul\", {\n      className: ImageFieldClasses.list\n    }, sourceValue.map(function (file, index) {\n      var fileTitleValue = title ? get(file, title, title) : title;\n      var srcValue = src ? get(file, src, title) : title;\n      return React.createElement(\"li\", {\n        key: index\n      }, React.createElement(\"img\", {\n        alt: fileTitleValue,\n        title: fileTitleValue,\n        src: srcValue,\n        className: ImageFieldClasses.image\n      }));\n    })));\n  }\n  return React.createElement(Root, __assign({\n    className: className\n  }, sanitizeFieldRestProps(rest)), React.createElement(\"img\", {\n    title: titleValue,\n    alt: titleValue,\n    src: sourceValue === null || sourceValue === void 0 ? void 0 : sourceValue.toString(),\n    className: ImageFieldClasses.image\n  }));\n};\n// What? TypeScript loses the displayName if we don't set it explicitly\nImageField.displayName = 'ImageField';\nvar PREFIX = 'RaImageField';\nexport var ImageFieldClasses = {\n  list: \"\".concat(PREFIX, \"-list\"),\n  image: \"\".concat(PREFIX, \"-image\")\n};\nvar Root = styled(Box, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"& .\".concat(ImageFieldClasses.list)] = {\n  display: 'flex',\n  listStyleType: 'none'\n}, _a[\"& .\".concat(ImageFieldClasses.image)] = {\n  margin: '0.25rem',\n  width: 200,\n  height: 100,\n  objectFit: 'contain'\n}, _a));","map":{"version":3,"names":["React","styled","Box","Typography","get","useFieldValue","useTranslate","sanitizeFieldRestProps","ImageField","props","className","emptyText","src","title","rest","__rest","sourceValue","titleValue","_b","_a","__assign","source","toString","translate","createElement","component","variant","_","Array","isArray","Root","ImageFieldClasses","list","map","file","index","fileTitleValue","srcValue","key","alt","image","displayName","PREFIX","concat","name","overridesResolver","styles","root","display","listStyleType","margin","width","height","objectFit"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/ImageField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport get from 'lodash/get';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport { Call, Objects } from 'hotscript';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps } from './types';\nimport { SxProps } from '@mui/system';\n\nexport const ImageField = <\n    RecordType extends Record<string, any> = Record<string, any>,\n>(\n    props: ImageFieldProps<RecordType>\n) => {\n    const { className, emptyText, src, title, ...rest } = props;\n    const sourceValue = useFieldValue(props);\n    const titleValue =\n        useFieldValue({\n            ...props,\n            // @ts-ignore We ignore here because title might be a custom label or undefined instead of a field name\n            source: title,\n        })?.toString() ?? title;\n    const translate = useTranslate();\n\n    if (!sourceValue) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : (\n            <Typography\n                component=\"div\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            />\n        );\n    }\n\n    if (Array.isArray(sourceValue)) {\n        return (\n            <Root className={className} {...sanitizeFieldRestProps(rest)}>\n                <ul className={ImageFieldClasses.list}>\n                    {sourceValue.map((file, index) => {\n                        const fileTitleValue = title\n                            ? get(file, title, title)\n                            : title;\n                        const srcValue = src ? get(file, src, title) : title;\n\n                        return (\n                            <li key={index}>\n                                <img\n                                    alt={fileTitleValue}\n                                    title={fileTitleValue}\n                                    src={srcValue}\n                                    className={ImageFieldClasses.image}\n                                />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Root>\n        );\n    }\n\n    return (\n        <Root className={className} {...sanitizeFieldRestProps(rest)}>\n            <img\n                title={titleValue}\n                alt={titleValue}\n                src={sourceValue?.toString()}\n                className={ImageFieldClasses.image}\n            />\n        </Root>\n    );\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nImageField.displayName = 'ImageField';\n\nconst PREFIX = 'RaImageField';\n\nexport const ImageFieldClasses = {\n    list: `${PREFIX}-list`,\n    image: `${PREFIX}-image`,\n};\n\nconst Root = styled(Box, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${ImageFieldClasses.list}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n    },\n    [`& .${ImageFieldClasses.image}`]: {\n        margin: '0.25rem',\n        width: 200,\n        height: 100,\n        objectFit: 'contain',\n    },\n});\n\nexport interface ImageFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType> {\n    src?: string;\n    title?: Call<Objects.AllPaths, RecordType> extends never\n        ? AnyString\n        : Call<Objects.AllPaths, RecordType> | AnyString;\n    sx?: SxProps;\n}\n\ntype AnyString = string & {};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}