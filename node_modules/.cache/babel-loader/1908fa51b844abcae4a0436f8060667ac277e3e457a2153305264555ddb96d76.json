{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAuthenticated } from '../../auth';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { useGetOne, useUpdate, useRefresh } from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport { useResourceContext, useGetResourceLabel, useGetRecordRepresentation } from '../../core';\nimport { useMutationMiddlewares } from '../saveContext';\n/**\n * Prepare data for the Edit view.\n *\n * useEditController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Edit component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Edit view\n *\n * @example\n *\n * import { useEditController } from 'react-admin';\n * import EditView from './EditView';\n *\n * const MyEdit = () => {\n *     const controllerProps = useEditController({ resource: 'posts', id: 123 });\n *     return <EditView {...controllerProps} {...props} />;\n * }\n */\nexport var useEditController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var disableAuthentication = props.disableAuthentication,\n    propsId = props.id,\n    _a = props.mutationMode,\n    mutationMode = _a === void 0 ? 'undoable' : _a,\n    _b = props.mutationOptions,\n    mutationOptions = _b === void 0 ? {} : _b,\n    _c = props.queryOptions,\n    queryOptions = _c === void 0 ? {} : _c,\n    _d = props.redirect,\n    redirectTo = _d === void 0 ? DefaultRedirect : _d,\n    transform = props.transform;\n  useAuthenticated({\n    enabled: !disableAuthentication\n  });\n  var resource = useResourceContext(props);\n  if (!resource) {\n    throw new Error('useEditController requires a non-empty resource prop or context');\n  }\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var routeId = useParams().id;\n  if (!routeId && !propsId) {\n    throw new Error('useEditController requires an id prop or a route with an /:id? parameter.');\n  }\n  var id = propsId !== null && propsId !== void 0 ? propsId : decodeURIComponent(routeId);\n  var queryMeta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  var mutationMeta = mutationOptions.meta,\n    onSuccess = mutationOptions.onSuccess,\n    onError = mutationOptions.onError,\n    otherMutationOptions = __rest(mutationOptions, [\"meta\", \"onSuccess\", \"onError\"]);\n  var _e = useMutationMiddlewares(),\n    registerMutationMiddleware = _e.registerMutationMiddleware,\n    getMutateWithMiddlewares = _e.getMutateWithMiddlewares,\n    unregisterMutationMiddleware = _e.unregisterMutationMiddleware;\n  var _f = useGetOne(resource, {\n      id: id,\n      meta: queryMeta\n    }, __assign({\n      onError: function () {\n        notify('ra.notification.item_doesnt_exist', {\n          type: 'error'\n        });\n        redirect('list', resource);\n        refresh();\n      },\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      retry: false\n    }, otherQueryOptions)),\n    record = _f.data,\n    error = _f.error,\n    isLoading = _f.isLoading,\n    isFetching = _f.isFetching,\n    isPending = _f.isPending,\n    refetch = _f.refetch;\n  // eslint-disable-next-line eqeqeq\n  if (record && record.id && record.id != id) {\n    throw new Error(\"useEditController: Fetched record's id attribute (\".concat(record.id, \") must match the requested 'id' (\").concat(id, \")\"));\n  }\n  var getResourceLabel = useGetResourceLabel();\n  var recordRepresentation = getRecordRepresentation(record);\n  var defaultTitle = translate('ra.page.edit', {\n    name: getResourceLabel(resource, 1),\n    id: id,\n    record: record,\n    recordRepresentation: typeof recordRepresentation === 'string' ? recordRepresentation : ''\n  });\n  var recordCached = {\n    id: id,\n    previousData: record\n  };\n  var _g = useUpdate(resource, recordCached, __assign(__assign({\n      onSuccess: function (data, variables, context) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            if (onSuccess) {\n              return [2 /*return*/, onSuccess(data, variables, context)];\n            }\n            notify('ra.notification.updated', {\n              type: 'info',\n              messageArgs: {\n                smart_count: 1\n              },\n              undoable: mutationMode === 'undoable'\n            });\n            redirect(redirectTo, resource, data.id, data);\n            return [2 /*return*/];\n          });\n        });\n      },\n      onError: function (error, variables, context) {\n        var _a;\n        if (onError) {\n          return onError(error, variables, context);\n        }\n        // Don't trigger a notification if this is a validation error\n        // (notification will be handled by the useNotifyIsFormInvalid hook)\n        var validationErrors = (_a = error === null || error === void 0 ? void 0 : error.body) === null || _a === void 0 ? void 0 : _a.errors;\n        var hasValidationErrors = !!validationErrors && Object.keys(validationErrors).length > 0;\n        if (!hasValidationErrors || mutationMode !== 'pessimistic') {\n          notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n            type: 'error',\n            messageArgs: {\n              _: typeof error === 'string' ? error : error instanceof Error || typeof error === 'object' && error !== null && error.hasOwnProperty('message') ?\n              // @ts-ignore\n              error.message : undefined\n            }\n          });\n        }\n      }\n    }, otherMutationOptions), {\n      mutationMode: mutationMode,\n      returnPromise: mutationMode === 'pessimistic',\n      getMutateWithMiddlewares: getMutateWithMiddlewares\n    })),\n    update = _g[0],\n    saving = _g[1].isPending;\n  var save = useCallback(function (data, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      onSuccessFromSave = _b.onSuccess,\n      onErrorFromSave = _b.onError,\n      transformFromSave = _b.transform,\n      metaFromSave = _b.meta;\n    return Promise.resolve(transformFromSave ? transformFromSave(data, {\n      previousData: recordCached.previousData\n    }) : transform ? transform(data, {\n      previousData: recordCached.previousData\n    }) : data).then(function (data) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var error_1;\n        var _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _b.trys.push([0, 2,, 3]);\n              return [4 /*yield*/, update(resource, {\n                id: id,\n                data: data,\n                meta: metaFromSave !== null && metaFromSave !== void 0 ? metaFromSave : mutationMeta\n              }, {\n                onError: onErrorFromSave,\n                onSuccess: onSuccessFromSave\n              })];\n            case 1:\n              _b.sent();\n              return [3 /*break*/, 3];\n            case 2:\n              error_1 = _b.sent();\n              if (((_a = error_1.body) === null || _a === void 0 ? void 0 : _a.errors) != null) {\n                return [2 /*return*/, error_1.body.errors];\n              }\n              return [3 /*break*/, 3];\n            case 3:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  }, [id, mutationMeta, resource, transform, update, recordCached.previousData]);\n  return {\n    defaultTitle: defaultTitle,\n    error: error,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    isPending: isPending,\n    mutationMode: mutationMode,\n    record: record,\n    redirect: redirectTo,\n    refetch: refetch,\n    registerMutationMiddleware: registerMutationMiddleware,\n    resource: resource,\n    save: save,\n    saving: saving,\n    unregisterMutationMiddleware: unregisterMutationMiddleware\n  };\n};\nvar DefaultRedirect = 'list';","map":{"version":3,"names":["useCallback","useParams","useAuthenticated","useRedirect","useNotify","useGetOne","useUpdate","useRefresh","useTranslate","useResourceContext","useGetResourceLabel","useGetRecordRepresentation","useMutationMiddlewares","useEditController","props","disableAuthentication","propsId","id","_a","mutationMode","_b","mutationOptions","_c","queryOptions","_d","redirect","redirectTo","DefaultRedirect","transform","enabled","resource","Error","getRecordRepresentation","translate","notify","refresh","routeId","decodeURIComponent","queryMeta","meta","otherQueryOptions","__rest","mutationMeta","onSuccess","onError","otherMutationOptions","_e","registerMutationMiddleware","getMutateWithMiddlewares","unregisterMutationMiddleware","_f","__assign","type","refetchOnReconnect","refetchOnWindowFocus","retry","record","data","error","isLoading","isFetching","isPending","refetch","concat","getResourceLabel","recordRepresentation","defaultTitle","name","recordCached","previousData","_g","variables","context","__awaiter","messageArgs","smart_count","undoable","validationErrors","body","errors","hasValidationErrors","Object","keys","length","message","_","hasOwnProperty","undefined","returnPromise","update","saving","save","onSuccessFromSave","onErrorFromSave","transformFromSave","metaFromSave","Promise","resolve","then","sent","error_1"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/edit/useEditController.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useAuthenticated } from '../../auth';\nimport { RaRecord, MutationMode, TransformData } from '../../types';\nimport { useRedirect, RedirectionSideEffect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport {\n    useGetOne,\n    useUpdate,\n    useRefresh,\n    UseGetOneHookValue,\n    HttpError,\n    UseGetOneOptions,\n    UseUpdateOptions,\n} from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport {\n    useResourceContext,\n    useGetResourceLabel,\n    useGetRecordRepresentation,\n} from '../../core';\nimport {\n    SaveContextValue,\n    SaveHandlerCallbacks,\n    useMutationMiddlewares,\n} from '../saveContext';\n\n/**\n * Prepare data for the Edit view.\n *\n * useEditController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Edit component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Edit view\n *\n * @example\n *\n * import { useEditController } from 'react-admin';\n * import EditView from './EditView';\n *\n * const MyEdit = () => {\n *     const controllerProps = useEditController({ resource: 'posts', id: 123 });\n *     return <EditView {...controllerProps} {...props} />;\n * }\n */\nexport const useEditController = <\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n>(\n    props: EditControllerProps<RecordType, ErrorType> = {}\n): EditControllerResult<RecordType> => {\n    const {\n        disableAuthentication,\n        id: propsId,\n        mutationMode = 'undoable',\n        mutationOptions = {},\n        queryOptions = {},\n        redirect: redirectTo = DefaultRedirect,\n        transform,\n    } = props;\n    useAuthenticated({ enabled: !disableAuthentication });\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            'useEditController requires a non-empty resource prop or context'\n        );\n    }\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n    const translate = useTranslate();\n    const notify = useNotify();\n    const redirect = useRedirect();\n    const refresh = useRefresh();\n    const { id: routeId } = useParams<'id'>();\n    if (!routeId && !propsId) {\n        throw new Error(\n            'useEditController requires an id prop or a route with an /:id? parameter.'\n        );\n    }\n    const id = propsId ?? decodeURIComponent(routeId!);\n    const { meta: queryMeta, ...otherQueryOptions } = queryOptions;\n    const {\n        meta: mutationMeta,\n        onSuccess,\n        onError,\n        ...otherMutationOptions\n    } = mutationOptions;\n    const {\n        registerMutationMiddleware,\n        getMutateWithMiddlewares,\n        unregisterMutationMiddleware,\n    } = useMutationMiddlewares();\n    const {\n        data: record,\n        error,\n        isLoading,\n        isFetching,\n        isPending,\n        refetch,\n    } = useGetOne<RecordType>(\n        resource,\n        { id, meta: queryMeta },\n        {\n            onError: () => {\n                notify('ra.notification.item_doesnt_exist', {\n                    type: 'error',\n                });\n                redirect('list', resource);\n                refresh();\n            },\n            refetchOnReconnect: false,\n            refetchOnWindowFocus: false,\n            retry: false,\n            ...otherQueryOptions,\n        }\n    );\n\n    // eslint-disable-next-line eqeqeq\n    if (record && record.id && record.id != id) {\n        throw new Error(\n            `useEditController: Fetched record's id attribute (${record.id}) must match the requested 'id' (${id})`\n        );\n    }\n\n    const getResourceLabel = useGetResourceLabel();\n    const recordRepresentation = getRecordRepresentation(record);\n    const defaultTitle = translate('ra.page.edit', {\n        name: getResourceLabel(resource, 1),\n        id,\n        record,\n        recordRepresentation:\n            typeof recordRepresentation === 'string'\n                ? recordRepresentation\n                : '',\n    });\n\n    const recordCached = { id, previousData: record };\n\n    const [update, { isPending: saving }] = useUpdate<RecordType, ErrorType>(\n        resource,\n        recordCached,\n        {\n            onSuccess: async (data, variables, context) => {\n                if (onSuccess) {\n                    return onSuccess(data, variables, context);\n                }\n                notify('ra.notification.updated', {\n                    type: 'info',\n                    messageArgs: { smart_count: 1 },\n                    undoable: mutationMode === 'undoable',\n                });\n                redirect(redirectTo, resource, data.id, data);\n            },\n            onError: (error, variables, context) => {\n                if (onError) {\n                    return onError(error, variables, context);\n                }\n                // Don't trigger a notification if this is a validation error\n                // (notification will be handled by the useNotifyIsFormInvalid hook)\n                const validationErrors = (error as HttpError)?.body?.errors;\n                const hasValidationErrors =\n                    !!validationErrors &&\n                    Object.keys(validationErrors).length > 0;\n                if (!hasValidationErrors || mutationMode !== 'pessimistic') {\n                    notify(\n                        typeof error === 'string'\n                            ? error\n                            : (error as Error).message ||\n                                  'ra.notification.http_error',\n                        {\n                            type: 'error',\n                            messageArgs: {\n                                _:\n                                    typeof error === 'string'\n                                        ? error\n                                        : error instanceof Error ||\n                                            (typeof error === 'object' &&\n                                                error !== null &&\n                                                error.hasOwnProperty('message'))\n                                          ? // @ts-ignore\n                                            error.message\n                                          : undefined,\n                            },\n                        }\n                    );\n                }\n            },\n            ...otherMutationOptions,\n            mutationMode,\n            returnPromise: mutationMode === 'pessimistic',\n            getMutateWithMiddlewares,\n        }\n    );\n\n    const save = useCallback(\n        (\n            data: Partial<RecordType>,\n            {\n                onSuccess: onSuccessFromSave,\n                onError: onErrorFromSave,\n                transform: transformFromSave,\n                meta: metaFromSave,\n            } = {} as SaveHandlerCallbacks\n        ) =>\n            Promise.resolve(\n                transformFromSave\n                    ? transformFromSave(data, {\n                          previousData: recordCached.previousData,\n                      })\n                    : transform\n                      ? transform(data, {\n                            previousData: recordCached.previousData,\n                        })\n                      : data\n            ).then(async (data: Partial<RecordType>) => {\n                try {\n                    await update(\n                        resource,\n                        {\n                            id,\n                            data,\n                            meta: metaFromSave ?? mutationMeta,\n                        },\n                        {\n                            onError: onErrorFromSave,\n                            onSuccess: onSuccessFromSave,\n                        }\n                    );\n                } catch (error) {\n                    if ((error as HttpError).body?.errors != null) {\n                        return (error as HttpError).body.errors;\n                    }\n                }\n            }),\n        [\n            id,\n            mutationMeta,\n            resource,\n            transform,\n            update,\n            recordCached.previousData,\n        ]\n    );\n\n    return {\n        defaultTitle,\n        error,\n        isFetching,\n        isLoading,\n        isPending,\n        mutationMode,\n        record,\n        redirect: redirectTo,\n        refetch,\n        registerMutationMiddleware,\n        resource,\n        save,\n        saving,\n        unregisterMutationMiddleware,\n    } as EditControllerResult<RecordType>;\n};\n\nconst DefaultRedirect = 'list';\n\nexport interface EditControllerProps<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> {\n    disableAuthentication?: boolean;\n    id?: RecordType['id'];\n    mutationMode?: MutationMode;\n    mutationOptions?: UseUpdateOptions<RecordType, ErrorType>;\n    queryOptions?: UseGetOneOptions<RecordType>;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    transform?: TransformData;\n    [key: string]: any;\n}\n\nexport interface EditControllerBaseResult<RecordType extends RaRecord = any>\n    extends SaveContextValue<RecordType> {\n    defaultTitle?: string;\n    isFetching: boolean;\n    isLoading: boolean;\n    refetch: UseGetOneHookValue<RecordType>['refetch'];\n    redirect: RedirectionSideEffect;\n    resource: string;\n}\n\nexport interface EditControllerLoadingResult<RecordType extends RaRecord = any>\n    extends EditControllerBaseResult<RecordType> {\n    record: undefined;\n    error: null;\n    isPending: true;\n}\nexport interface EditControllerLoadingErrorResult<\n    RecordType extends RaRecord = any,\n    TError = Error,\n> extends EditControllerBaseResult<RecordType> {\n    record: undefined;\n    error: TError;\n    isPending: false;\n}\nexport interface EditControllerRefetchErrorResult<\n    RecordType extends RaRecord = any,\n    TError = Error,\n> extends EditControllerBaseResult<RecordType> {\n    record: RecordType;\n    error: TError;\n    isPending: false;\n}\nexport interface EditControllerSuccessResult<RecordType extends RaRecord = any>\n    extends EditControllerBaseResult<RecordType> {\n    record: RecordType;\n    error: null;\n    isPending: false;\n}\n\nexport type EditControllerResult<RecordType extends RaRecord = any> =\n    | EditControllerLoadingResult<RecordType>\n    | EditControllerLoadingErrorResult<RecordType>\n    | EditControllerRefetchErrorResult<RecordType>\n    | EditControllerSuccessResult<RecordType>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}