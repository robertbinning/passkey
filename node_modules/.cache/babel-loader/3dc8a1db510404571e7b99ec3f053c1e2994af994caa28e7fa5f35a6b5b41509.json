{"ast":null,"code":"import React from 'react';\nimport { useReferenceManyFieldController, ListContextProvider, ResourceContextProvider, useRecordContext } from 'ra-core';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport var ReferenceManyField = function (props) {\n  var children = props.children,\n    debounce = props.debounce,\n    _a = props.filter,\n    filter = _a === void 0 ? defaultFilter : _a,\n    _b = props.page,\n    page = _b === void 0 ? 1 : _b,\n    _c = props.pagination,\n    pagination = _c === void 0 ? null : _c,\n    _d = props.perPage,\n    perPage = _d === void 0 ? 25 : _d,\n    reference = props.reference,\n    resource = props.resource,\n    _e = props.sort,\n    sort = _e === void 0 ? defaultSort : _e,\n    _f = props.source,\n    source = _f === void 0 ? 'id' : _f,\n    target = props.target,\n    queryOptions = props.queryOptions;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceManyFieldController({\n    debounce: debounce,\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source,\n    target: target,\n    queryOptions: queryOptions\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, children, pagination));\n};\nvar defaultFilter = {};\nvar defaultSort = {\n  field: 'id',\n  order: 'DESC'\n};","map":{"version":3,"names":["React","useReferenceManyFieldController","ListContextProvider","ResourceContextProvider","useRecordContext","ReferenceManyField","props","children","debounce","_a","filter","defaultFilter","_b","page","_c","pagination","_d","perPage","reference","resource","_e","sort","defaultSort","_f","source","target","queryOptions","record","controllerProps","createElement","value","field","order"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/ReferenceManyField.tsx"],"sourcesContent":["import React, { ReactElement, ReactNode } from 'react';\nimport {\n    FilterPayload,\n    SortPayload,\n    useReferenceManyFieldController,\n    ListContextProvider,\n    ResourceContextProvider,\n    useRecordContext,\n    RaRecord,\n} from 'ra-core';\nimport { UseQueryOptions } from '@tanstack/react-query';\n\nimport { FieldProps } from './types';\n\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport const ReferenceManyField = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord,\n>(\n    props: ReferenceManyFieldProps<RecordType, ReferenceRecordType>\n) => {\n    const {\n        children,\n        debounce,\n        filter = defaultFilter,\n        page = 1,\n        pagination = null,\n        perPage = 25,\n        reference,\n        resource,\n        sort = defaultSort,\n        source = 'id',\n        target,\n        queryOptions,\n    } = props;\n    const record = useRecordContext(props);\n\n    const controllerProps = useReferenceManyFieldController<\n        RecordType,\n        ReferenceRecordType\n    >({\n        debounce,\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n        queryOptions,\n    });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                {children}\n                {pagination}\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceManyFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n    ReferenceRecordType extends Record<string, any> = Record<string, any>,\n> extends Omit<FieldProps<RecordType>, 'source'> {\n    children: ReactNode;\n    debounce?: number;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    sort?: SortPayload;\n    source?: string;\n    target: string;\n    queryOptions?: UseQueryOptions<\n        { data: ReferenceRecordType[]; total: number },\n        Error\n    >;\n}\n\nconst defaultFilter = {};\nconst defaultSort = { field: 'id', order: 'DESC' as const };\n"],"mappings":"AAAA,OAAOA,KAAkC,MAAM,OAAO;AACtD,SAGIC,+BAA+B,EAC/BC,mBAAmB,EACnBC,uBAAuB,EACvBC,gBAAgB,QAEb,SAAS;AAKhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,OAAO,IAAMC,kBAAkB,GAAG,SAAAA,CAI9BC,KAA+D;EAG3D,IAAAC,QAAQ,GAYRD,KAAK,CAAAC,QAZG;IACRC,QAAQ,GAWRF,KAAK,CAAAE,QAXG;IACRC,EAAA,GAUAH,KAAK,CAAAI,MAViB;IAAtBA,MAAM,GAAAD,EAAA,cAAGE,aAAa,GAAAF,EAAA;IACtBG,EAAA,GASAN,KAAK,CAAAO,IATG;IAARA,IAAI,GAAAD,EAAA,cAAG,CAAC,GAAAA,EAAA;IACRE,EAAA,GAQAR,KAAK,CAAAS,UARY;IAAjBA,UAAU,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACjBE,EAAA,GAOAV,KAAK,CAAAW,OAPO;IAAZA,OAAO,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACZE,SAAS,GAMTZ,KAAK,CAAAY,SANI;IACTC,QAAQ,GAKRb,KAAK,CAAAa,QALG;IACRC,EAAA,GAIAd,KAAK,CAAAe,IAJa;IAAlBA,IAAI,GAAAD,EAAA,cAAGE,WAAW,GAAAF,EAAA;IAClBG,EAAA,GAGAjB,KAAK,CAAAkB,MAHQ;IAAbA,MAAM,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACbE,MAAM,GAENnB,KAAK,CAAAmB,MAFC;IACNC,YAAY,GACZpB,KAAK,CAAAoB,YADO;EAEhB,IAAMC,MAAM,GAAGvB,gBAAgB,CAACE,KAAK,CAAC;EAEtC,IAAMsB,eAAe,GAAG3B,+BAA+B,CAGrD;IACEO,QAAQ,EAAAA,QAAA;IACRE,MAAM,EAAAA,MAAA;IACNG,IAAI,EAAAA,IAAA;IACJI,OAAO,EAAAA,OAAA;IACPU,MAAM,EAAAA,MAAA;IACNT,SAAS,EAAAA,SAAA;IACTC,QAAQ,EAAAA,QAAA;IACRE,IAAI,EAAAA,IAAA;IACJG,MAAM,EAAAA,MAAA;IACNC,MAAM,EAAAA,MAAA;IACNC,YAAY,EAAAA;GACf,CAAC;EAEF,OACI1B,KAAA,CAAA6B,aAAA,CAAC1B,uBAAuB;IAAC2B,KAAK,EAAEZ;EAAS,GACrClB,KAAA,CAAA6B,aAAA,CAAC3B,mBAAmB;IAAC4B,KAAK,EAAEF;EAAe,GACtCrB,QAAQ,EACRQ,UAAU,CACO,CACA;AAElC,CAAC;AAsBD,IAAMJ,aAAa,GAAG,EAAE;AACxB,IAAMW,WAAW,GAAG;EAAES,KAAK,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAe,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}