{"ast":null,"code":"var _jsxFileName = \"/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        console.log('Checking session...');\n        const response = await axios.get('/session', {\n          withCredentials: true\n        });\n        console.log('Session response:', response.data); // Debugging statement\n        if (response.data.user) {\n          console.log('User found in session:', response.data.user);\n          setCurrentUser(response.data.user);\n          setIsAuthenticated(true);\n        } else {\n          console.log('No user found in session response');\n        }\n      } catch (error) {\n        console.error('Error checking session:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkSession();\n  }, []);\n  useEffect(() => {\n    console.log('currentUser state updated:', currentUser);\n    console.log('isAuthenticated state updated:', isAuthenticated);\n  }, [currentUser, isAuthenticated]);\n  const login = async email => {\n    try {\n      console.log('Attempting login with email:', email);\n      const response = await axios.post('/api/login', {\n        email\n      }, {\n        withCredentials: true\n      });\n      console.log('Login response:', response.data);\n      setCurrentUser(response.data.user);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Login failed', error);\n    }\n  };\n  const logout = async () => {\n    try {\n      console.log('Attempting logout...');\n      await axios.post('/logout', {}, {\n        withCredentials: true\n      });\n      console.log('Logout successful');\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n    } catch (error) {\n      console.error('Logout failed', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      currentUser,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"gNox/qLDUJUgczDcfJTchkBMEO8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","currentUser","setCurrentUser","isLoading","setIsLoading","checkSession","console","log","response","get","withCredentials","data","user","error","login","email","post","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport axios from 'axios';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  login: (email: string) => Promise<void>;\n  logout: () => void;\n  currentUser: User | null;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        console.log('Checking session...');\n        const response = await axios.get('/session', { withCredentials: true });\n        console.log('Session response:', response.data); // Debugging statement\n        if (response.data.user) {\n          console.log('User found in session:', response.data.user);\n          setCurrentUser(response.data.user);\n          setIsAuthenticated(true);\n        } else {\n          console.log('No user found in session response');\n        }\n      } catch (error) {\n        console.error('Error checking session:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkSession();\n  }, []);\n\n  useEffect(() => {\n    console.log('currentUser state updated:', currentUser);\n    console.log('isAuthenticated state updated:', isAuthenticated);\n  }, [currentUser, isAuthenticated]);\n\n  const login = async (email: string) => {\n    try {\n      console.log('Attempting login with email:', email);\n      const response = await axios.post('/api/login', { email }, { withCredentials: true });\n      console.log('Login response:', response.data);\n      setCurrentUser(response.data.user);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Login failed', error);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      console.log('Attempting logout...');\n      await axios.post('/logout', {}, { withCredentials: true });\n      console.log('Logout successful');\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n    } catch (error) {\n      console.error('Logout failed', error);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout, currentUser, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}