{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport DownloadIcon from '@mui/icons-material/GetApp';\nimport { fetchRelatedRecords, useDataProvider, useNotify, useListContext, useResourceContext } from 'ra-core';\nimport { Button } from './Button';\n/**\n * Export the selected rows\n *\n * To be used inside the <Datagrid bulkActionButtons> prop.\n *\n * @example // basic usage\n * import { BulkDeleteButton, BulkExportButton, List, Datagrid } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *        <Datagrid bulkActionButtons={<PostBulkActionButtons />}>\n *          ...\n *       </Datagrid>\n *     </List>\n * );\n */\nexport var BulkExportButton = function (props) {\n  var onClick = props.onClick,\n    _a = props.label,\n    label = _a === void 0 ? 'ra.action.export' : _a,\n    _b = props.icon,\n    icon = _b === void 0 ? defaultIcon : _b,\n    customExporter = props.exporter,\n    meta = props.meta,\n    rest = __rest(props, [\"onClick\", \"label\", \"icon\", \"exporter\", \"meta\"]);\n  var resource = useResourceContext(props);\n  var _c = useListContext(),\n    exporterFromContext = _c.exporter,\n    selectedIds = _c.selectedIds;\n  var exporter = customExporter || exporterFromContext;\n  var dataProvider = useDataProvider();\n  var notify = useNotify();\n  var handleClick = useCallback(function (event) {\n    if (exporter && resource) {\n      dataProvider.getMany(resource, {\n        ids: selectedIds,\n        meta: meta\n      }).then(function (_a) {\n        var data = _a.data;\n        return exporter(data, fetchRelatedRecords(dataProvider), dataProvider, resource);\n      }).catch(function (error) {\n        console.error(error);\n        notify('ra.notification.http_error', {\n          type: 'error'\n        });\n      });\n    }\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [dataProvider, exporter, notify, onClick, resource, selectedIds, meta]);\n  return React.createElement(Button, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon);\n};\nvar defaultIcon = React.createElement(DownloadIcon, null);\nvar sanitizeRestProps = function (_a) {\n  var resource = _a.resource,\n    rest = __rest(_a, [\"resource\"]);\n  return rest;\n};","map":{"version":3,"names":["React","useCallback","DownloadIcon","fetchRelatedRecords","useDataProvider","useNotify","useListContext","useResourceContext","Button","BulkExportButton","props","onClick","_a","label","_b","icon","defaultIcon","customExporter","exporter","meta","rest","__rest","resource","_c","exporterFromContext","selectedIds","dataProvider","notify","handleClick","event","getMany","ids","then","data","catch","error","console","type","createElement","__assign","sanitizeRestProps"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/button/BulkExportButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallback } from 'react';\nimport DownloadIcon from '@mui/icons-material/GetApp';\nimport {\n    fetchRelatedRecords,\n    useDataProvider,\n    useNotify,\n    Exporter,\n    useListContext,\n    useResourceContext,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Export the selected rows\n *\n * To be used inside the <Datagrid bulkActionButtons> prop.\n *\n * @example // basic usage\n * import { BulkDeleteButton, BulkExportButton, List, Datagrid } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *        <Datagrid bulkActionButtons={<PostBulkActionButtons />}>\n *          ...\n *       </Datagrid>\n *     </List>\n * );\n */\nexport const BulkExportButton = (props: BulkExportButtonProps) => {\n    const {\n        onClick,\n        label = 'ra.action.export',\n        icon = defaultIcon,\n        exporter: customExporter,\n        meta,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const { exporter: exporterFromContext, selectedIds } = useListContext();\n    const exporter = customExporter || exporterFromContext;\n    const dataProvider = useDataProvider();\n    const notify = useNotify();\n    const handleClick = useCallback(\n        event => {\n            if (exporter && resource) {\n                dataProvider\n                    .getMany(resource, { ids: selectedIds, meta })\n                    .then(({ data }) =>\n                        exporter(\n                            data,\n                            fetchRelatedRecords(dataProvider),\n                            dataProvider,\n                            resource\n                        )\n                    )\n                    .catch(error => {\n                        console.error(error);\n                        notify('ra.notification.http_error', {\n                            type: 'error',\n                        });\n                    });\n            }\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [dataProvider, exporter, notify, onClick, resource, selectedIds, meta]\n    );\n\n    return (\n        <Button\n            onClick={handleClick}\n            label={label}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <DownloadIcon />;\n\nconst sanitizeRestProps = ({\n    resource,\n    ...rest\n}: Omit<BulkExportButtonProps, 'exporter' | 'label' | 'meta'>) => rest;\n\ninterface Props {\n    exporter?: Exporter;\n    icon?: JSX.Element;\n    label?: string;\n    onClick?: (e: Event) => void;\n    resource?: string;\n    meta?: any;\n}\n\nexport type BulkExportButtonProps = Props & ButtonProps;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SACIC,mBAAmB,EACnBC,eAAe,EACfC,SAAS,EAETC,cAAc,EACdC,kBAAkB,QACf,SAAS;AAEhB,SAASC,MAAM,QAAqB,UAAU;AAE9C;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,KAA4B;EAErD,IAAAC,OAAO,GAMPD,KAAK,CAAAC,OANE;IACPC,EAAA,GAKAF,KAAK,CAAAG,KALqB;IAA1BA,KAAK,GAAAD,EAAA,cAAG,kBAAkB,GAAAA,EAAA;IAC1BE,EAAA,GAIAJ,KAAK,CAAAK,IAJa;IAAlBA,IAAI,GAAAD,EAAA,cAAGE,WAAW,GAAAF,EAAA;IACRG,cAAc,GAGxBP,KAAK,CAAAQ,QAHmB;IACxBC,IAAI,GAEJT,KAAK,CAAAS,IAFD;IACDC,IAAI,GAAAC,MAAA,CACPX,KAAK,EAPH,gDAOL,CADU;EAEX,IAAMY,QAAQ,GAAGf,kBAAkB,CAACG,KAAK,CAAC;EACpC,IAAAa,EAAA,GAAiDjB,cAAc,EAAE;IAArDkB,mBAAmB,GAAAD,EAAA,CAAAL,QAAA;IAAEO,WAAW,GAAAF,EAAA,CAAAE,WAAqB;EACvE,IAAMP,QAAQ,GAAGD,cAAc,IAAIO,mBAAmB;EACtD,IAAME,YAAY,GAAGtB,eAAe,EAAE;EACtC,IAAMuB,MAAM,GAAGtB,SAAS,EAAE;EAC1B,IAAMuB,WAAW,GAAG3B,WAAW,CAC3B,UAAA4B,KAAK;IACD,IAAIX,QAAQ,IAAII,QAAQ,EAAE;MACtBI,YAAY,CACPI,OAAO,CAACR,QAAQ,EAAE;QAAES,GAAG,EAAEN,WAAW;QAAEN,IAAI,EAAAA;MAAA,CAAE,CAAC,CAC7Ca,IAAI,CAAC,UAACpB,EAAQ;YAANqB,IAAI,GAAArB,EAAA,CAAAqB,IAAA;QACT,OAAAf,QAAQ,CACJe,IAAI,EACJ9B,mBAAmB,CAACuB,YAAY,CAAC,EACjCA,YAAY,EACZJ,QAAQ,CACX;MALD,CAKC,CACJ,CACAY,KAAK,CAAC,UAAAC,KAAK;QACRC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBR,MAAM,CAAC,4BAA4B,EAAE;UACjCU,IAAI,EAAE;SACT,CAAC;MACN,CAAC,CAAC;;IAEV,IAAI,OAAO1B,OAAO,KAAK,UAAU,EAAE;MAC/BA,OAAO,CAACkB,KAAK,CAAC;;EAEtB,CAAC,EACD,CAACH,YAAY,EAAER,QAAQ,EAAES,MAAM,EAAEhB,OAAO,EAAEW,QAAQ,EAAEG,WAAW,EAAEN,IAAI,CAAC,CACzE;EAED,OACInB,KAAA,CAAAsC,aAAA,CAAC9B,MAAM,EAAA+B,QAAA;IACH5B,OAAO,EAAEiB,WAAW;IACpBf,KAAK,EAAEA;EAAK,GACR2B,iBAAiB,CAACpB,IAAI,CAAC,GAE1BL,IAAI,CACA;AAEjB,CAAC;AAED,IAAMC,WAAW,GAAGhB,KAAA,CAAAsC,aAAA,CAACpC,YAAY,OAAG;AAEpC,IAAMsC,iBAAiB,GAAG,SAAAA,CAAC5B,EAGkC;EAFzD,IAAAU,QAAQ,GAAAV,EAAA,CAAAU,QAAA;IACLF,IAAI,GAAAC,MAAA,CAAAT,EAAA,EAFgB,YAG1B,CADU;EACuD,OAAAQ,IAAI;CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}