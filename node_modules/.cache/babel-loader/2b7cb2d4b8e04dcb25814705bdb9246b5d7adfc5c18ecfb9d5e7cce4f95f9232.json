{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { UpdateWithConfirmButton } from './UpdateWithConfirmButton';\nimport { UpdateWithUndoButton } from './UpdateWithUndoButton';\n/**\n * Updates the current record.\n *\n * To be used inside the <Edit actions> prop or <Show actions> prop.\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Edit, TopToolbar, UpdateButton } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <UpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = () => (\n *     <Edit actions={<PostEditActions />}>\n *         ...\n *     </Edit>\n * );\n */\nexport var UpdateButton = function (props) {\n  var _a = props.mutationMode,\n    mutationMode = _a === void 0 ? 'undoable' : _a,\n    rest = __rest(props, [\"mutationMode\"]);\n  return mutationMode === 'undoable' ? React.createElement(UpdateWithUndoButton, __assign({}, rest)) : React.createElement(UpdateWithConfirmButton, __assign({\n    mutationMode: mutationMode\n  }, rest));\n};","map":{"version":3,"names":["React","UpdateWithConfirmButton","UpdateWithUndoButton","UpdateButton","props","_a","mutationMode","rest","__rest","createElement","__assign"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/button/UpdateButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    UpdateWithConfirmButton,\n    UpdateWithConfirmButtonProps,\n} from './UpdateWithConfirmButton';\nimport {\n    UpdateWithUndoButton,\n    UpdateWithUndoButtonProps,\n} from './UpdateWithUndoButton';\n\n/**\n * Updates the current record.\n *\n * To be used inside the <Edit actions> prop or <Show actions> prop.\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Edit, TopToolbar, UpdateButton } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <UpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = () => (\n *     <Edit actions={<PostEditActions />}>\n *         ...\n *     </Edit>\n * );\n */\nexport const UpdateButton = (props: UpdateButtonProps) => {\n    const { mutationMode = 'undoable', ...rest } = props;\n\n    return mutationMode === 'undoable' ? (\n        <UpdateWithUndoButton {...rest} />\n    ) : (\n        <UpdateWithConfirmButton mutationMode={mutationMode} {...rest} />\n    );\n};\n\nexport type UpdateButtonProps =\n    | ({\n          mutationMode?: 'undoable';\n      } & UpdateWithUndoButtonProps)\n    | ({\n          mutationMode?: 'pessimistic' | 'optimistic';\n      } & UpdateWithConfirmButtonProps);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACIC,uBAAuB,QAEpB,2BAA2B;AAClC,SACIC,oBAAoB,QAEjB,wBAAwB;AAE/B;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,IAAMC,YAAY,GAAG,SAAAA,CAACC,KAAwB;EACzC,IAAAC,EAAA,GAAuCD,KAAK,CAAAE,YAAnB;IAAzBA,YAAY,GAAAD,EAAA,cAAG,UAAU,GAAAA,EAAA;IAAKE,IAAI,GAAAC,MAAA,CAAKJ,KAAK,EAA9C,gBAAsC,CAAF;EAE1C,OAAOE,YAAY,KAAK,UAAU,GAC9BN,KAAA,CAAAS,aAAA,CAACP,oBAAoB,EAAAQ,QAAA,KAAKH,IAAI,EAAI,GAElCP,KAAA,CAAAS,aAAA,CAACR,uBAAuB,EAAAS,QAAA;IAACJ,YAAY,EAAEA;EAAY,GAAMC,IAAI,EAChE;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}