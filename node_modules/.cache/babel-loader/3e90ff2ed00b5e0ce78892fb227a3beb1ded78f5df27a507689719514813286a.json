{"ast":null,"code":"import { useContext } from 'react';\nimport { ListContext } from './ListContext';\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Used within a <ListContextProvider> (e.g. as a descendent of <List>).\n *\n * @returns {ListControllerResult} list controller props\n *\n * @see useListController for how it is filled\n *\n * @example // custom list view\n *\n * import { useListContext } from 'react-admin';\n *\n * const MyList = () => {\n *     const { data, isPending } = useListContext();\n *     if (isPending) {\n *         return <>Loading...</>;\n *     }\n *     return (\n *         <ul>\n *             {data.map(record => (\n *                 <li key={record.id}>{record.name}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n *\n * @example // custom pagination\n *\n * import { useListContext } from 'react-admin';\n * import { Button, Toolbar } from '@mui/material';\n * import ChevronLeft from '@mui/icons-material/ChevronLeft';\n * import ChevronRight from '@mui/icons-material/ChevronRight';\n *\n * const PrevNextPagination = () => {\n *     const { page, perPage, total, setPage } = useListContext();\n *     const nbPages = Math.ceil(total / perPage) || 1;\n *     return (\n *         nbPages > 1 &&\n *             <Toolbar>\n *                 {page > 1 &&\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\n *                         <ChevronLeft />\n *                         Prev\n *                     </Button>\n *                 }\n *                 {page !== nbPages &&\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\n *                         Next\n *                         <ChevronRight />\n *                     </Button>\n *                 }\n *             </Toolbar>\n *     );\n * }\n */\nexport var useListContext = function () {\n  var context = useContext(ListContext);\n  if (!context) {\n    throw new Error('useListContext must be used inside a ListContextProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["useContext","ListContext","useListContext","context","Error"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/list/useListContext.ts"],"sourcesContent":["import { useContext } from 'react';\n\nimport { ListContext } from './ListContext';\nimport { ListControllerResult } from './useListController';\nimport { RaRecord } from '../../types';\n\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Used within a <ListContextProvider> (e.g. as a descendent of <List>).\n *\n * @returns {ListControllerResult} list controller props\n *\n * @see useListController for how it is filled\n *\n * @example // custom list view\n *\n * import { useListContext } from 'react-admin';\n *\n * const MyList = () => {\n *     const { data, isPending } = useListContext();\n *     if (isPending) {\n *         return <>Loading...</>;\n *     }\n *     return (\n *         <ul>\n *             {data.map(record => (\n *                 <li key={record.id}>{record.name}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n *\n * @example // custom pagination\n *\n * import { useListContext } from 'react-admin';\n * import { Button, Toolbar } from '@mui/material';\n * import ChevronLeft from '@mui/icons-material/ChevronLeft';\n * import ChevronRight from '@mui/icons-material/ChevronRight';\n *\n * const PrevNextPagination = () => {\n *     const { page, perPage, total, setPage } = useListContext();\n *     const nbPages = Math.ceil(total / perPage) || 1;\n *     return (\n *         nbPages > 1 &&\n *             <Toolbar>\n *                 {page > 1 &&\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\n *                         <ChevronLeft />\n *                         Prev\n *                     </Button>\n *                 }\n *                 {page !== nbPages &&\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\n *                         Next\n *                         <ChevronRight />\n *                     </Button>\n *                 }\n *             </Toolbar>\n *     );\n * }\n */\nexport const useListContext = <\n    RecordType extends RaRecord = any,\n>(): ListControllerResult<RecordType> => {\n    const context = useContext(ListContext);\n    if (!context) {\n        throw new Error(\n            'useListContext must be used inside a ListContextProvider'\n        );\n    }\n    return context;\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,WAAW,QAAQ,eAAe;AAI3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAAA;EAG1B,IAAMC,OAAO,GAAGH,UAAU,CAACC,WAAW,CAAC;EACvC,IAAI,CAACE,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CACX,0DAA0D,CAC7D;;EAEL,OAAOD,OAAO;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}