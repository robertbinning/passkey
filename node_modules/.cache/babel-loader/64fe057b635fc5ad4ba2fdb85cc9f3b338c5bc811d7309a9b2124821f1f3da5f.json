{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useResourceDefinition } from 'ra-core';\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport var CreateActions = function (props) {\n  var hasList = useResourceDefinition(props).hasList;\n  return React.createElement(TopToolbar, __assign({}, sanitizeRestProps(props)), hasList && React.createElement(ListButton, null));\n};\nvar sanitizeRestProps = function (_a) {\n  var hasCreate = _a.hasCreate,\n    hasEdit = _a.hasEdit,\n    hasList = _a.hasList,\n    hasShow = _a.hasShow,\n    resource = _a.resource,\n    rest = __rest(_a, [\"hasCreate\", \"hasEdit\", \"hasList\", \"hasShow\", \"resource\"]);\n  return rest;\n};","map":{"version":3,"names":["React","useResourceDefinition","TopToolbar","ListButton","CreateActions","props","hasList","createElement","__assign","sanitizeRestProps","_a","hasCreate","hasEdit","hasShow","resource","rest","__rest"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/detail/CreateActions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ToolbarProps } from '@mui/material';\nimport { useResourceDefinition } from 'ra-core';\n\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\n\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport const CreateActions = (props: CreateActionsProps) => {\n    const { hasList } = useResourceDefinition(props);\n    return (\n        <TopToolbar {...sanitizeRestProps(props)}>\n            {hasList && <ListButton />}\n        </TopToolbar>\n    );\n};\n\nconst sanitizeRestProps = ({\n    hasCreate,\n    hasEdit,\n    hasList,\n    hasShow,\n    resource,\n    ...rest\n}: CreateActionsProps) => rest;\n\nexport interface CreateActionsProps extends ToolbarProps {\n    hasCreate?: boolean;\n    hasEdit?: boolean;\n    hasList?: boolean;\n    hasShow?: boolean;\n    resource?: string;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,qBAAqB,QAAQ,SAAS;AAE/C,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,SAASC,UAAU,QAAQ,WAAW;AAEtC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,aAAa,GAAG,SAAAA,CAACC,KAAyB;EAC3C,IAAAC,OAAO,GAAKL,qBAAqB,CAACI,KAAK,CAAC,CAAAC,OAAjC;EACf,OACIN,KAAA,CAAAO,aAAA,CAACL,UAAU,EAAAM,QAAA,KAAKC,iBAAiB,CAACJ,KAAK,CAAC,GACnCC,OAAO,IAAIN,KAAA,CAAAO,aAAA,CAACJ,UAAU,OAAG,CACjB;AAErB,CAAC;AAED,IAAMM,iBAAiB,GAAG,SAAAA,CAACC,EAON;EANjB,IAAAC,SAAS,GAAAD,EAAA,CAAAC,SAAA;IACTC,OAAO,GAAAF,EAAA,CAAAE,OAAA;IACPN,OAAO,GAAAI,EAAA,CAAAJ,OAAA;IACPO,OAAO,GAAAH,EAAA,CAAAG,OAAA;IACPC,QAAQ,GAAAJ,EAAA,CAAAI,QAAA;IACLC,IAAI,GAAAC,MAAA,CAAAN,EAAA,EANgB,0DAO1B,CADU;EACe,OAAAK,IAAI;CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}