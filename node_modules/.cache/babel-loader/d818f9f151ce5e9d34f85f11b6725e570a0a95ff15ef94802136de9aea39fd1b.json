{"ast":null,"code":"import * as React from 'react';\nimport { Children, isValidElement, useCallback } from 'react';\nimport { useListContextWithProps, useTranslate } from 'ra-core';\nimport { Checkbox, TableCell, TableHead, TableRow } from '@mui/material';\nimport clsx from 'clsx';\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport { DatagridClasses } from './useDatagridStyles';\nimport ExpandAllButton from './ExpandAllButton';\nimport { useDatagridContext } from './useDatagridContext';\n/**\n * The default Datagrid Header component.\n *\n * Renders select all checkbox as well as column header buttons used for sorting.\n */\nexport var DatagridHeader = function (props) {\n  var children = props.children,\n    className = props.className,\n    _a = props.hasExpand,\n    hasExpand = _a === void 0 ? false : _a,\n    _b = props.hasBulkActions,\n    hasBulkActions = _b === void 0 ? false : _b,\n    isRowSelectable = props.isRowSelectable;\n  var translate = useTranslate();\n  var _c = useListContextWithProps(props),\n    sort = _c.sort,\n    data = _c.data,\n    onSelect = _c.onSelect,\n    selectedIds = _c.selectedIds,\n    setSort = _c.setSort;\n  var expandSingle = useDatagridContext().expandSingle;\n  var updateSortCallback = useCallback(function (event) {\n    event.stopPropagation();\n    if (!setSort) return;\n    var newField = event.currentTarget.dataset.field;\n    var newOrder = (sort === null || sort === void 0 ? void 0 : sort.field) === newField ? (sort === null || sort === void 0 ? void 0 : sort.order) === 'ASC' ? 'DESC' : 'ASC' : event.currentTarget.dataset.order;\n    setSort({\n      field: newField,\n      order: newOrder\n    });\n  }, [sort === null || sort === void 0 ? void 0 : sort.field, sort === null || sort === void 0 ? void 0 : sort.order, setSort]);\n  var updateSort = setSort ? updateSortCallback : null;\n  var handleSelectAll = useCallback(function (event) {\n    if (!onSelect || !selectedIds || !data) return;\n    onSelect(event.target.checked ? selectedIds.concat(data.filter(function (record) {\n      return !selectedIds.includes(record.id);\n    }).filter(function (record) {\n      return isRowSelectable ? isRowSelectable(record) : true;\n    }).map(function (record) {\n      return record.id;\n    })) : []);\n  }, [data, onSelect, isRowSelectable, selectedIds]);\n  var selectableIds = Array.isArray(data) ? isRowSelectable ? data.filter(function (record) {\n    return isRowSelectable(record);\n  }).map(function (record) {\n    return record.id;\n  }) : data.map(function (record) {\n    return record.id;\n  }) : [];\n  return React.createElement(TableHead, {\n    className: clsx(className, DatagridClasses.thead)\n  }, React.createElement(TableRow, {\n    className: clsx(DatagridClasses.row, DatagridClasses.headerRow)\n  }, hasExpand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: clsx(DatagridClasses.headerCell, DatagridClasses.expandHeader)\n  }, !expandSingle && data ? React.createElement(ExpandAllButton, {\n    ids: data.map(function (record) {\n      return record.id;\n    })\n  }) : null), hasBulkActions && selectedIds && React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: DatagridClasses.headerCell\n  }, React.createElement(Checkbox, {\n    inputProps: {\n      'aria-label': translate('ra.action.select_all', {\n        _: 'Select all'\n      })\n    },\n    className: \"select-all\",\n    color: \"primary\",\n    checked: selectedIds.length > 0 && selectableIds.length > 0 && selectableIds.every(function (id) {\n      return selectedIds.includes(id);\n    }),\n    onChange: handleSelectAll,\n    onClick: function (e) {\n      return e.stopPropagation();\n    }\n  })), Children.map(children, function (field, index) {\n    return isValidElement(field) ? React.createElement(DatagridHeaderCell, {\n      className: clsx(DatagridClasses.headerCell, \"column-\".concat(field.props.source)),\n      sort: sort,\n      field: field,\n      isSorting: (sort === null || sort === void 0 ? void 0 : sort.field) === (field.props.sortBy || field.props.source),\n      key: field.props.source || index,\n      updateSort: updateSort || undefined\n    }) : null;\n  })));\n};\nDatagridHeader.displayName = 'DatagridHeader';","map":{"version":3,"names":["React","Children","isValidElement","useCallback","useListContextWithProps","useTranslate","Checkbox","TableCell","TableHead","TableRow","clsx","DatagridHeaderCell","DatagridClasses","ExpandAllButton","useDatagridContext","DatagridHeader","props","children","className","_a","hasExpand","_b","hasBulkActions","isRowSelectable","translate","_c","sort","data","onSelect","selectedIds","setSort","expandSingle","updateSortCallback","event","stopPropagation","newField","currentTarget","dataset","field","newOrder","order","updateSort","handleSelectAll","target","checked","concat","filter","record","includes","id","map","selectableIds","Array","isArray","createElement","thead","row","headerRow","padding","headerCell","expandHeader","ids","inputProps","_","color","length","every","onChange","onClick","e","index","source","isSorting","sortBy","key","undefined","displayName"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/list/datagrid/DatagridHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Children, isValidElement, useCallback } from 'react';\nimport {\n    useListContextWithProps,\n    Identifier,\n    RaRecord,\n    SortPayload,\n    useTranslate,\n} from 'ra-core';\nimport { Checkbox, TableCell, TableHead, TableRow } from '@mui/material';\nimport clsx from 'clsx';\n\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport { DatagridClasses } from './useDatagridStyles';\nimport ExpandAllButton from './ExpandAllButton';\nimport { useDatagridContext } from './useDatagridContext';\n\n/**\n * The default Datagrid Header component.\n *\n * Renders select all checkbox as well as column header buttons used for sorting.\n */\nexport const DatagridHeader = (props: DatagridHeaderProps) => {\n    const {\n        children,\n        className,\n        hasExpand = false,\n        hasBulkActions = false,\n        isRowSelectable,\n    } = props;\n    const translate = useTranslate();\n    const { sort, data, onSelect, selectedIds, setSort } =\n        useListContextWithProps(props);\n    const { expandSingle } = useDatagridContext();\n\n    const updateSortCallback = useCallback(\n        event => {\n            event.stopPropagation();\n            if (!setSort) return;\n            const newField = event.currentTarget.dataset.field;\n            const newOrder =\n                sort?.field === newField\n                    ? sort?.order === 'ASC'\n                        ? 'DESC'\n                        : 'ASC'\n                    : event.currentTarget.dataset.order;\n            setSort({ field: newField, order: newOrder });\n        },\n        [sort?.field, sort?.order, setSort]\n    );\n\n    const updateSort = setSort ? updateSortCallback : null;\n\n    const handleSelectAll = useCallback(\n        event => {\n            if (!onSelect || !selectedIds || !data) return;\n            onSelect(\n                event.target.checked\n                    ? selectedIds.concat(\n                          data\n                              .filter(\n                                  record => !selectedIds.includes(record.id)\n                              )\n                              .filter(record =>\n                                  isRowSelectable\n                                      ? isRowSelectable(record)\n                                      : true\n                              )\n                              .map(record => record.id)\n                      )\n                    : []\n            );\n        },\n        [data, onSelect, isRowSelectable, selectedIds]\n    );\n\n    const selectableIds = Array.isArray(data)\n        ? isRowSelectable\n            ? data\n                  .filter(record => isRowSelectable(record))\n                  .map(record => record.id)\n            : data.map(record => record.id)\n        : [];\n\n    return (\n        <TableHead className={clsx(className, DatagridClasses.thead)}>\n            <TableRow\n                className={clsx(DatagridClasses.row, DatagridClasses.headerRow)}\n            >\n                {hasExpand && (\n                    <TableCell\n                        padding=\"none\"\n                        className={clsx(\n                            DatagridClasses.headerCell,\n                            DatagridClasses.expandHeader\n                        )}\n                    >\n                        {!expandSingle && data ? (\n                            <ExpandAllButton\n                                ids={data.map(record => record.id)}\n                            />\n                        ) : null}\n                    </TableCell>\n                )}\n                {hasBulkActions && selectedIds && (\n                    <TableCell\n                        padding=\"checkbox\"\n                        className={DatagridClasses.headerCell}\n                    >\n                        <Checkbox\n                            inputProps={{\n                                'aria-label': translate(\n                                    'ra.action.select_all',\n                                    { _: 'Select all' }\n                                ),\n                            }}\n                            className=\"select-all\"\n                            color=\"primary\"\n                            checked={\n                                selectedIds.length > 0 &&\n                                selectableIds.length > 0 &&\n                                selectableIds.every(id =>\n                                    selectedIds.includes(id)\n                                )\n                            }\n                            onChange={handleSelectAll}\n                            onClick={e => e.stopPropagation()}\n                        />\n                    </TableCell>\n                )}\n                {Children.map(children, (field, index) =>\n                    isValidElement(field) ? (\n                        <DatagridHeaderCell\n                            className={clsx(\n                                DatagridClasses.headerCell,\n                                `column-${(field.props as any).source}`\n                            )}\n                            sort={sort}\n                            field={field}\n                            isSorting={\n                                sort?.field ===\n                                ((field.props as any).sortBy ||\n                                    (field.props as any).source)\n                            }\n                            key={(field.props as any).source || index}\n                            updateSort={updateSort || undefined}\n                        />\n                    ) : null\n                )}\n            </TableRow>\n        </TableHead>\n    );\n};\n\nexport interface DatagridHeaderProps<RecordType extends RaRecord = any> {\n    children?: React.ReactNode;\n    className?: string;\n    hasExpand?: boolean;\n    hasBulkActions?: boolean;\n    isRowSelectable?: (record: RecordType) => boolean;\n    isRowExpandable?: (record: RecordType) => boolean;\n    size?: 'medium' | 'small';\n    // can be injected when using the component without context\n    sort?: SortPayload;\n    data?: RecordType[];\n    onSelect?: (ids: Identifier[]) => void;\n    onToggleItem?: (id: Identifier) => void;\n    selectedIds?: Identifier[];\n    setSort?: (sort: SortPayload) => void;\n}\n\nDatagridHeader.displayName = 'DatagridHeader';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}