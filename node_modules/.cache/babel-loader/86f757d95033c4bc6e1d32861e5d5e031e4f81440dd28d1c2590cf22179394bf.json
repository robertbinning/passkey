{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Children, isValidElement, useMemo } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useTranslatableContext, RecordContextProvider, useOptionalSourceContext, SourceContextProvider, getResourceFieldLabelKey, useResourceContext } from 'ra-core';\nimport { Labeled } from '../Labeled';\n/**\n * Default container for a group of translatable fields inside a TranslatableFields components.\n * @see TranslatableFields\n */\nexport var TranslatableFieldsTabContent = function (props) {\n  var children = props.children,\n    _a = props.groupKey,\n    groupKey = _a === void 0 ? '' : _a,\n    locale = props.locale,\n    record = props.record,\n    resourceProp = props.resource,\n    className = props.className,\n    other = __rest(props, [\"children\", \"groupKey\", \"locale\", \"record\", \"resource\", \"className\"]);\n  var _b = useTranslatableContext(),\n    selectedLocale = _b.selectedLocale,\n    getRecordForLocale = _b.getRecordForLocale;\n  var addLabel = Children.count(children) > 1;\n  var parentSourceContext = useOptionalSourceContext();\n  var resource = useResourceContext(props);\n  if (!resource) {\n    throw new Error(\"<TranslatableFieldsTabContent> was called outside of a ResourceContext and without a record prop. You must set the resource prop.\");\n  }\n  var sourceContext = useMemo(function () {\n    return {\n      getSource: function (source) {\n        return parentSourceContext ? parentSourceContext.getSource(\"\".concat(source, \".\").concat(locale)) : \"\".concat(source, \".\").concat(locale);\n      },\n      getLabel: function (source) {\n        return parentSourceContext ? parentSourceContext.getLabel(source) : getResourceFieldLabelKey(resource, source);\n      }\n    };\n  }, [locale, parentSourceContext, resource]);\n  // As fields rely on the RecordContext to get their values and have no knowledge of the locale,\n  // we need to create a new record with the values for the current locale only\n  // Given the record { title: { en: 'title_en', fr: 'title_fr' } } and the locale 'fr',\n  // the record for the locale 'fr' will be { title: 'title_fr' }\n  var recordForLocale = useMemo(function () {\n    return getRecordForLocale(record, locale);\n  }, [getRecordForLocale, record, locale]);\n  return React.createElement(Root, __assign({\n    role: \"tabpanel\",\n    hidden: selectedLocale !== locale,\n    id: \"translatable-content-\".concat(groupKey).concat(locale),\n    \"aria-labelledby\": \"translatable-header-\".concat(groupKey).concat(locale),\n    className: className\n  }, other), React.createElement(RecordContextProvider, {\n    value: recordForLocale\n  }, React.createElement(SourceContextProvider, {\n    value: sourceContext\n  }, Children.map(children, function (field) {\n    return field && isValidElement(field) ? React.createElement(\"div\", null, addLabel ? React.createElement(Labeled\n    // Only pass the resource if it was overridden through props to avoid\n    // the default inference to potentially override label set by SourceContext\n    , {\n      // Only pass the resource if it was overridden through props to avoid\n      // the default inference to potentially override label set by SourceContext\n      resource: resourceProp,\n      label: field.props.label,\n      source: field.props.source\n    }, field) : field) : null;\n  }))));\n};\nvar PREFIX = 'RaTranslatableFieldsTabContent';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    borderRadius: 0,\n    borderBottomLeftRadius: theme.shape.borderRadius,\n    borderBottomRightRadius: theme.shape.borderRadius,\n    border: \"1px solid \".concat(theme.palette.divider),\n    borderTop: 0\n  };\n});","map":{"version":3,"names":["React","Children","isValidElement","useMemo","styled","useTranslatableContext","RecordContextProvider","useOptionalSourceContext","SourceContextProvider","getResourceFieldLabelKey","useResourceContext","Labeled","TranslatableFieldsTabContent","props","children","_a","groupKey","locale","record","resourceProp","resource","className","other","__rest","_b","selectedLocale","getRecordForLocale","addLabel","count","parentSourceContext","Error","sourceContext","getSource","source","concat","getLabel","recordForLocale","createElement","Root","__assign","role","hidden","id","value","map","field","label","PREFIX","name","overridesResolver","styles","root","theme","flexGrow","padding","spacing","borderRadius","borderBottomLeftRadius","shape","borderBottomRightRadius","border","palette","divider","borderTop"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/TranslatableFieldsTabContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    useMemo,\n} from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    useTranslatableContext,\n    RaRecord,\n    RecordContextProvider,\n    useOptionalSourceContext,\n    SourceContextProvider,\n    getResourceFieldLabelKey,\n    useResourceContext,\n} from 'ra-core';\nimport { Labeled } from '../Labeled';\n\n/**\n * Default container for a group of translatable fields inside a TranslatableFields components.\n * @see TranslatableFields\n */\nexport const TranslatableFieldsTabContent = (\n    props: TranslatableFieldsTabContentProps\n): ReactElement => {\n    const {\n        children,\n        groupKey = '',\n        locale,\n        record,\n        resource: resourceProp,\n        className,\n        ...other\n    } = props;\n    const { selectedLocale, getRecordForLocale } = useTranslatableContext();\n    const addLabel = Children.count(children) > 1;\n\n    const parentSourceContext = useOptionalSourceContext();\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            `<TranslatableFieldsTabContent> was called outside of a ResourceContext and without a record prop. You must set the resource prop.`\n        );\n    }\n    const sourceContext = useMemo(\n        () => ({\n            getSource: (source: string) =>\n                parentSourceContext\n                    ? parentSourceContext.getSource(`${source}.${locale}`)\n                    : `${source}.${locale}`,\n            getLabel: (source: string) =>\n                parentSourceContext\n                    ? parentSourceContext.getLabel(source)\n                    : getResourceFieldLabelKey(resource, source),\n        }),\n        [locale, parentSourceContext, resource]\n    );\n    // As fields rely on the RecordContext to get their values and have no knowledge of the locale,\n    // we need to create a new record with the values for the current locale only\n    // Given the record { title: { en: 'title_en', fr: 'title_fr' } } and the locale 'fr',\n    // the record for the locale 'fr' will be { title: 'title_fr' }\n    const recordForLocale = useMemo(\n        () => getRecordForLocale(record, locale),\n        [getRecordForLocale, record, locale]\n    );\n\n    return (\n        <Root\n            role=\"tabpanel\"\n            hidden={selectedLocale !== locale}\n            id={`translatable-content-${groupKey}${locale}`}\n            aria-labelledby={`translatable-header-${groupKey}${locale}`}\n            className={className}\n            {...other}\n        >\n            <RecordContextProvider value={recordForLocale}>\n                <SourceContextProvider value={sourceContext}>\n                    {Children.map(children, field =>\n                        field && isValidElement<any>(field) ? (\n                            <div>\n                                {addLabel ? (\n                                    <Labeled\n                                        // Only pass the resource if it was overridden through props to avoid\n                                        // the default inference to potentially override label set by SourceContext\n                                        resource={resourceProp}\n                                        label={field.props.label}\n                                        source={field.props.source}\n                                    >\n                                        {field}\n                                    </Labeled>\n                                ) : (\n                                    field\n                                )}\n                            </div>\n                        ) : null\n                    )}\n                </SourceContextProvider>\n            </RecordContextProvider>\n        </Root>\n    );\n};\n\nexport type TranslatableFieldsTabContentProps = {\n    children: ReactNode;\n    className?: string;\n    formGroupKeyPrefix?: string;\n    groupKey: string;\n    locale: string;\n    record: RaRecord;\n    resource?: string;\n};\n\nconst PREFIX = 'RaTranslatableFieldsTabContent';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    borderRadius: 0,\n    borderBottomLeftRadius: theme.shape.borderRadius,\n    borderBottomRightRadius: theme.shape.borderRadius,\n    border: `1px solid ${theme.palette.divider}`,\n    borderTop: 0,\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}