{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { InfiniteListBase } from 'ra-core';\nimport { InfinitePagination } from './pagination';\nimport { ListView } from './ListView';\n/**\n * Infinite List page component\n *\n * The <InfiniteList> component renders the list layout (title, buttons, filters),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * It contains an <InfinitePagination> component, which fetches the next page of records\n * when the user scrolls to the bottom of the list.\n *\n * The <InfiniteList> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = () => (\n *     <InfiniteList\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nexport var InfiniteList = function (_a) {\n  var debounce = _a.debounce,\n    disableAuthentication = _a.disableAuthentication,\n    disableSyncWithLocation = _a.disableSyncWithLocation,\n    exporter = _a.exporter,\n    _b = _a.filter,\n    filter = _b === void 0 ? defaultFilter : _b,\n    filterDefaultValues = _a.filterDefaultValues,\n    _c = _a.pagination,\n    pagination = _c === void 0 ? defaultPagination : _c,\n    _d = _a.perPage,\n    perPage = _d === void 0 ? 10 : _d,\n    queryOptions = _a.queryOptions,\n    resource = _a.resource,\n    sort = _a.sort,\n    storeKey = _a.storeKey,\n    rest = __rest(_a, [\"debounce\", \"disableAuthentication\", \"disableSyncWithLocation\", \"exporter\", \"filter\", \"filterDefaultValues\", \"pagination\", \"perPage\", \"queryOptions\", \"resource\", \"sort\", \"storeKey\"]);\n  return React.createElement(InfiniteListBase, {\n    debounce: debounce,\n    disableAuthentication: disableAuthentication,\n    disableSyncWithLocation: disableSyncWithLocation,\n    exporter: exporter,\n    filter: filter,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    queryOptions: queryOptions,\n    resource: resource,\n    sort: sort,\n    storeKey: storeKey\n  }, React.createElement(ListView, __assign({}, rest, {\n    pagination: pagination\n  })));\n};\nvar defaultPagination = React.createElement(InfinitePagination, null);\nvar defaultFilter = {};","map":{"version":3,"names":["React","InfiniteListBase","InfinitePagination","ListView","InfiniteList","_a","debounce","disableAuthentication","disableSyncWithLocation","exporter","_b","filter","defaultFilter","filterDefaultValues","_c","pagination","defaultPagination","_d","perPage","queryOptions","resource","sort","storeKey","rest","__rest","createElement","__assign"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/list/InfiniteList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport {\n    InfiniteListBase,\n    InfiniteListControllerProps,\n    RaRecord,\n} from 'ra-core';\n\nimport { InfinitePagination } from './pagination';\nimport { ListView, ListViewProps } from './ListView';\n\n/**\n * Infinite List page component\n *\n * The <InfiniteList> component renders the list layout (title, buttons, filters),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * It contains an <InfinitePagination> component, which fetches the next page of records\n * when the user scrolls to the bottom of the list.\n *\n * The <InfiniteList> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = () => (\n *     <InfiniteList\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nexport const InfiniteList = <RecordType extends RaRecord = any>({\n    debounce,\n    disableAuthentication,\n    disableSyncWithLocation,\n    exporter,\n    filter = defaultFilter,\n    filterDefaultValues,\n    pagination = defaultPagination,\n    perPage = 10,\n    queryOptions,\n    resource,\n    sort,\n    storeKey,\n    ...rest\n}: InfiniteListProps<RecordType>): ReactElement => (\n    <InfiniteListBase<RecordType>\n        debounce={debounce}\n        disableAuthentication={disableAuthentication}\n        disableSyncWithLocation={disableSyncWithLocation}\n        exporter={exporter}\n        filter={filter}\n        filterDefaultValues={filterDefaultValues}\n        perPage={perPage}\n        queryOptions={queryOptions}\n        resource={resource}\n        sort={sort}\n        storeKey={storeKey}\n    >\n        <ListView<RecordType> {...rest} pagination={pagination} />\n    </InfiniteListBase>\n);\n\nconst defaultPagination = <InfinitePagination />;\nconst defaultFilter = {};\n\nexport interface InfiniteListProps<RecordType extends RaRecord = any>\n    extends InfiniteListControllerProps<RecordType>,\n        ListViewProps {}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SACIC,gBAAgB,QAGb,SAAS;AAEhB,SAASC,kBAAkB,QAAQ,cAAc;AACjD,SAASC,QAAQ,QAAuB,YAAY;AAEpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,OAAO,IAAMC,YAAY,GAAG,SAAAA,CAAoCC,EAchC;EAb5B,IAAAC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,qBAAqB,GAAAF,EAAA,CAAAE,qBAAA;IACrBC,uBAAuB,GAAAH,EAAA,CAAAG,uBAAA;IACvBC,QAAQ,GAAAJ,EAAA,CAAAI,QAAA;IACRC,EAAA,GAAAL,EAAA,CAAAM,MAAsB;IAAtBA,MAAM,GAAAD,EAAA,cAAGE,aAAa,GAAAF,EAAA;IACtBG,mBAAmB,GAAAR,EAAA,CAAAQ,mBAAA;IACnBC,EAAA,GAAAT,EAAA,CAAAU,UAA8B;IAA9BA,UAAU,GAAAD,EAAA,cAAGE,iBAAiB,GAAAF,EAAA;IAC9BG,EAAA,GAAAZ,EAAA,CAAAa,OAAY;IAAZA,OAAO,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACZE,YAAY,GAAAd,EAAA,CAAAc,YAAA;IACZC,QAAQ,GAAAf,EAAA,CAAAe,QAAA;IACRC,IAAI,GAAAhB,EAAA,CAAAgB,IAAA;IACJC,QAAQ,GAAAjB,EAAA,CAAAiB,QAAA;IACLC,IAAI,GAAAC,MAAA,CAAAnB,EAAA,EAbqD,sLAc/D,CADU;EACwC,OAC/CL,KAAA,CAAAyB,aAAA,CAACxB,gBAAgB;IACbK,QAAQ,EAAEA,QAAQ;IAClBC,qBAAqB,EAAEA,qBAAqB;IAC5CC,uBAAuB,EAAEA,uBAAuB;IAChDC,QAAQ,EAAEA,QAAQ;IAClBE,MAAM,EAAEA,MAAM;IACdE,mBAAmB,EAAEA,mBAAmB;IACxCK,OAAO,EAAEA,OAAO;IAChBC,YAAY,EAAEA,YAAY;IAC1BC,QAAQ,EAAEA,QAAQ;IAClBC,IAAI,EAAEA,IAAI;IACVC,QAAQ,EAAEA;EAAQ,GAElBtB,KAAA,CAAAyB,aAAA,CAACtB,QAAQ,EAAAuB,QAAA,KAAiBH,IAAI;IAAER,UAAU,EAAEA;EAAU,GAAI,CAC3C;CACtB;AAED,IAAMC,iBAAiB,GAAGhB,KAAA,CAAAyB,aAAA,CAACvB,kBAAkB,OAAG;AAChD,IAAMU,aAAa,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}