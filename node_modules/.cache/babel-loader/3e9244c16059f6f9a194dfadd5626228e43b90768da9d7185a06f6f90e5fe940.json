{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { useCallback, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { MenuItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useChoicesContext, useInput, FieldTitle, useTranslate, useChoices, useGetRecordRepresentation } from 'ra-core';\nimport { ResettableTextField, ResettableTextFieldStyles } from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\nimport { LoadingInput } from './LoadingInput';\n/**\n * An Input component for a select box, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <SelectInput source=\"author\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * You can disable some choices by providing a `disableValue` field which name is `disabled` by default\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', disabled: true },\n * ];\n *\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', not_available: true },\n * ];\n * <SelectInput source=\"gender\" choices={choices} disableValue=\"not_available\" />\n *\n */\nexport var SelectInput = function (props) {\n  var choicesProp = props.choices,\n    className = props.className,\n    create = props.create,\n    createLabel = props.createLabel,\n    createValue = props.createValue,\n    defaultValue = props.defaultValue,\n    _a = props.disableValue,\n    disableValue = _a === void 0 ? 'disabled' : _a,\n    _b = props.emptyText,\n    emptyText = _b === void 0 ? '' : _b,\n    _c = props.emptyValue,\n    emptyValue = _c === void 0 ? '' : _c,\n    format = props.format,\n    filter = props.filter,\n    helperText = props.helperText,\n    isFetchingProp = props.isFetching,\n    isLoadingProp = props.isLoading,\n    isPendingProp = props.isPending,\n    label = props.label,\n    _d = props.margin,\n    margin = _d === void 0 ? 'dense' : _d,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onCreate = props.onCreate,\n    optionText = props.optionText,\n    optionValue = props.optionValue,\n    parse = props.parse,\n    resourceProp = props.resource,\n    sourceProp = props.source,\n    translateChoice = props.translateChoice,\n    validate = props.validate,\n    rest = __rest(props, [\"choices\", \"className\", \"create\", \"createLabel\", \"createValue\", \"defaultValue\", \"disableValue\", \"emptyText\", \"emptyValue\", \"format\", \"filter\", \"helperText\", \"isFetching\", \"isLoading\", \"isPending\", \"label\", \"margin\", \"onBlur\", \"onChange\", \"onCreate\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"source\", \"translateChoice\", \"validate\"]);\n  var translate = useTranslate();\n  useEffect(function () {\n    // eslint-disable-next-line eqeqeq\n    if (emptyValue == null) {\n      throw new Error(\"emptyValue being set to null or undefined is not supported. Use parse to turn the empty string into null.\");\n    }\n  }, [emptyValue]);\n  var _e = useChoicesContext({\n      choices: choicesProp,\n      isLoading: isLoadingProp,\n      isFetching: isFetchingProp,\n      isPending: isPendingProp,\n      resource: resourceProp,\n      source: sourceProp\n    }),\n    allChoices = _e.allChoices,\n    isPending = _e.isPending,\n    fetchError = _e.error,\n    source = _e.source,\n    resource = _e.resource,\n    isFromReference = _e.isFromReference;\n  if (source === undefined) {\n    throw new Error(\"If you're not wrapping the SelectInput inside a ReferenceInput, you must provide the source prop\");\n  }\n  if (!isPending && !fetchError && allChoices === undefined) {\n    throw new Error(\"If you're not wrapping the SelectInput inside a ReferenceInput, you must provide the choices prop\");\n  }\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var _f = useChoices({\n      optionText: optionText !== null && optionText !== void 0 ? optionText : isFromReference ? getRecordRepresentation : undefined,\n      optionValue: optionValue,\n      disableValue: disableValue,\n      translateChoice: translateChoice !== null && translateChoice !== void 0 ? translateChoice : !isFromReference\n    }),\n    getChoiceText = _f.getChoiceText,\n    getChoiceValue = _f.getChoiceValue,\n    getDisableValue = _f.getDisableValue;\n  var _g = useInput(__assign({\n      defaultValue: defaultValue,\n      parse: parse,\n      format: format,\n      onBlur: onBlur,\n      onChange: onChange,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _g.field,\n    fieldState = _g.fieldState,\n    id = _g.id,\n    isRequired = _g.isRequired;\n  var error = fieldState.error,\n    invalid = fieldState.invalid;\n  var renderEmptyItemOption = useCallback(function () {\n    return typeof emptyText === 'string' ? emptyText === '' ? ' ' // em space, forces the display of an empty line of normal height\n    : translate(emptyText, {\n      _: emptyText\n    }) : emptyText;\n  }, [emptyText, translate]);\n  var renderMenuItemOption = useCallback(function (choice) {\n    return getChoiceText(choice);\n  }, [getChoiceText]);\n  var handleChange = useCallback(function (eventOrChoice) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (typeof eventOrChoice === 'string') {\n          if (eventOrChoice === '') {\n            // called  by the reset button\n            field.onChange(emptyValue);\n          }\n        } else if (eventOrChoice === null || eventOrChoice === void 0 ? void 0 : eventOrChoice.target) {\n          // We might receive an event from the mui component\n          // In this case, it will be the choice id\n          field.onChange(eventOrChoice);\n        } else {\n          // Or we might receive a choice directly, for instance a newly created one\n          field.onChange(getChoiceValue(eventOrChoice));\n        }\n        return [2 /*return*/];\n      });\n    });\n  }, [field, getChoiceValue, emptyValue]);\n  var _h = useSupportCreateSuggestion({\n      create: create,\n      createLabel: createLabel,\n      createValue: createValue,\n      handleChange: handleChange,\n      onCreate: onCreate,\n      optionText: optionText\n    }),\n    getCreateItem = _h.getCreateItem,\n    handleChangeWithCreateSupport = _h.handleChange,\n    createElement = _h.createElement;\n  var createItem = create || onCreate ? getCreateItem() : null;\n  var renderMenuItem = useCallback(function (choice) {\n    return choice ? React.createElement(MenuItem, {\n      key: getChoiceValue(choice),\n      value: getChoiceValue(choice),\n      disabled: getDisableValue(choice)\n    }, renderMenuItemOption(!!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id ? createItem : choice)) : null;\n  }, [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]);\n  if (isPending) {\n    return React.createElement(LoadingInput, {\n      label: label !== '' && label !== false && React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resourceProp,\n        isRequired: isRequired\n      }),\n      sx: props.sx,\n      helperText: React.createElement(InputHelperText, {\n        error: error === null || error === void 0 ? void 0 : error.message,\n        helperText: helperText\n      }),\n      variant: props.variant,\n      size: props.size,\n      margin: props.margin,\n      fullWidth: props.fullWidth\n    });\n  }\n  var finalChoices = fetchError ? [] : allChoices;\n  if (create || onCreate) {\n    finalChoices = __spreadArray(__spreadArray([], finalChoices, true), [createItem], false);\n  }\n  var renderHelperText = !!fetchError || helperText !== false || invalid;\n  return React.createElement(React.Fragment, null, React.createElement(StyledResettableTextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    onChange: handleChangeWithCreateSupport,\n    select: true,\n    label: label !== '' && label !== false && React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resourceProp,\n      isRequired: isRequired\n    }),\n    clearAlwaysVisible: true,\n    error: !!fetchError || invalid,\n    helperText: renderHelperText ? React.createElement(InputHelperText, {\n      error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n      helperText: helperText\n    }) : null,\n    margin: margin\n  }, sanitizeRestProps(rest)), !isRequired && React.createElement(MenuItem, {\n    value: emptyValue,\n    key: \"null\",\n    \"aria-label\": translate('ra.action.clear_input_value'),\n    title: translate('ra.action.clear_input_value')\n  }, renderEmptyItemOption()), finalChoices.map(renderMenuItem)), createElement);\n};\nvar sanitizeRestProps = function (_a) {\n  var afterSubmit = _a.afterSubmit,\n    allowNull = _a.allowNull,\n    beforeSubmit = _a.beforeSubmit,\n    choices = _a.choices,\n    className = _a.className,\n    crudGetMatching = _a.crudGetMatching,\n    crudGetOne = _a.crudGetOne,\n    data = _a.data,\n    field = _a.field,\n    fieldState = _a.fieldState,\n    formState = _a.formState,\n    filter = _a.filter,\n    filterToQuery = _a.filterToQuery,\n    formatOnBlur = _a.formatOnBlur,\n    isEqual = _a.isEqual,\n    limitChoicesToValue = _a.limitChoicesToValue,\n    multiple = _a.multiple,\n    name = _a.name,\n    pagination = _a.pagination,\n    perPage = _a.perPage,\n    ref = _a.ref,\n    reference = _a.reference,\n    refetch = _a.refetch,\n    render = _a.render,\n    setFilter = _a.setFilter,\n    setPagination = _a.setPagination,\n    setSort = _a.setSort,\n    shouldUnregister = _a.shouldUnregister,\n    sort = _a.sort,\n    subscription = _a.subscription,\n    type = _a.type,\n    validateFields = _a.validateFields,\n    validation = _a.validation,\n    value = _a.value,\n    rest = __rest(_a, [\"afterSubmit\", \"allowNull\", \"beforeSubmit\", \"choices\", \"className\", \"crudGetMatching\", \"crudGetOne\", \"data\", \"field\", \"fieldState\", \"formState\", \"filter\", \"filterToQuery\", \"formatOnBlur\", \"isEqual\", \"limitChoicesToValue\", \"multiple\", \"name\", \"pagination\", \"perPage\", \"ref\", \"reference\", \"refetch\", \"render\", \"setFilter\", \"setPagination\", \"setSort\", \"shouldUnregister\", \"sort\", \"subscription\", \"type\", \"validateFields\", \"validation\", \"value\"]);\n  return sanitizeInputRestProps(rest);\n};\nvar PREFIX = 'RaSelectInput';\nvar StyledResettableTextField = styled(ResettableTextField, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return __assign(__assign({}, ResettableTextFieldStyles), {\n    minWidth: theme.spacing(20),\n    '& .MuiFilledInput-root': {\n      paddingRight: 0\n    }\n  });\n});","map":{"version":3,"names":["React","useCallback","useEffect","clsx","MenuItem","styled","useChoicesContext","useInput","FieldTitle","useTranslate","useChoices","useGetRecordRepresentation","ResettableTextField","ResettableTextFieldStyles","InputHelperText","sanitizeInputRestProps","useSupportCreateSuggestion","LoadingInput","SelectInput","props","choicesProp","choices","className","create","createLabel","createValue","defaultValue","_a","disableValue","_b","emptyText","_c","emptyValue","format","filter","helperText","isFetchingProp","isFetching","isLoadingProp","isLoading","isPendingProp","isPending","label","_d","margin","onBlur","onChange","onCreate","optionText","optionValue","parse","resourceProp","resource","sourceProp","source","translateChoice","validate","rest","__rest","translate","Error","_e","allChoices","fetchError","error","isFromReference","undefined","getRecordRepresentation","_f","getChoiceText","getChoiceValue","getDisableValue","_g","__assign","field","fieldState","id","isRequired","invalid","renderEmptyItemOption","_","renderMenuItemOption","choice","handleChange","eventOrChoice","__awaiter","target","_h","getCreateItem","handleChangeWithCreateSupport","createElement","createItem","renderMenuItem","key","value","disabled","sx","message","variant","size","fullWidth","finalChoices","__spreadArray","renderHelperText","Fragment","StyledResettableTextField","concat","select","clearAlwaysVisible","sanitizeRestProps","title","map","afterSubmit","allowNull","beforeSubmit","crudGetMatching","crudGetOne","data","formState","filterToQuery","formatOnBlur","isEqual","limitChoicesToValue","multiple","name","pagination","perPage","ref","reference","refetch","render","setFilter","setPagination","setSort","shouldUnregister","sort","subscription","type","validateFields","validation","PREFIX","overridesResolver","styles","root","theme","minWidth","spacing","paddingRight"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/SelectInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, useCallback, useEffect, ChangeEvent } from 'react';\nimport clsx from 'clsx';\nimport { MenuItem, TextFieldProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n    useChoicesContext,\n    useInput,\n    FieldTitle,\n    useTranslate,\n    ChoicesProps,\n    useChoices,\n    RaRecord,\n    useGetRecordRepresentation,\n} from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport {\n    ResettableTextField,\n    ResettableTextFieldStyles,\n} from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport {\n    useSupportCreateSuggestion,\n    SupportCreateSuggestionOptions,\n} from './useSupportCreateSuggestion';\nimport { LoadingInput } from './LoadingInput';\n\n/**\n * An Input component for a select box, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <SelectInput source=\"author\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * You can disable some choices by providing a `disableValue` field which name is `disabled` by default\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', disabled: true },\n * ];\n *\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', not_available: true },\n * ];\n * <SelectInput source=\"gender\" choices={choices} disableValue=\"not_available\" />\n *\n */\nexport const SelectInput = (props: SelectInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        create,\n        createLabel,\n        createValue,\n        defaultValue,\n        disableValue = 'disabled',\n        emptyText = '',\n        emptyValue = '',\n        format,\n        filter,\n        helperText,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        isPending: isPendingProp,\n        label,\n        margin = 'dense',\n        onBlur,\n        onChange,\n        onCreate,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        source: sourceProp,\n        translateChoice,\n        validate,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n\n    useEffect(() => {\n        // eslint-disable-next-line eqeqeq\n        if (emptyValue == null) {\n            throw new Error(\n                `emptyValue being set to null or undefined is not supported. Use parse to turn the empty string into null.`\n            );\n        }\n    }, [emptyValue]);\n\n    const {\n        allChoices,\n        isPending,\n        error: fetchError,\n        source,\n        resource,\n        isFromReference,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        isPending: isPendingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    if (source === undefined) {\n        throw new Error(\n            `If you're not wrapping the SelectInput inside a ReferenceInput, you must provide the source prop`\n        );\n    }\n\n    if (!isPending && !fetchError && allChoices === undefined) {\n        throw new Error(\n            `If you're not wrapping the SelectInput inside a ReferenceInput, you must provide the choices prop`\n        );\n    }\n\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n    const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n        optionText:\n            optionText ??\n            (isFromReference ? getRecordRepresentation : undefined),\n        optionValue,\n        disableValue,\n        translateChoice: translateChoice ?? !isFromReference,\n    });\n    const { field, fieldState, id, isRequired } = useInput({\n        defaultValue,\n        parse,\n        format,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid } = fieldState;\n\n    const renderEmptyItemOption = useCallback(() => {\n        return typeof emptyText === 'string'\n            ? emptyText === ''\n                ? ' ' // em space, forces the display of an empty line of normal height\n                : translate(emptyText, { _: emptyText })\n            : emptyText;\n    }, [emptyText, translate]);\n\n    const renderMenuItemOption = useCallback(\n        choice => getChoiceText(choice),\n        [getChoiceText]\n    );\n\n    const handleChange = useCallback(\n        async (\n            eventOrChoice: ChangeEvent<HTMLInputElement> | RaRecord | ''\n        ) => {\n            if (typeof eventOrChoice === 'string') {\n                if (eventOrChoice === '') {\n                    // called  by the reset button\n                    field.onChange(emptyValue);\n                }\n            } else if (eventOrChoice?.target) {\n                // We might receive an event from the mui component\n                // In this case, it will be the choice id\n                field.onChange(eventOrChoice);\n            } else {\n                // Or we might receive a choice directly, for instance a newly created one\n                field.onChange(getChoiceValue(eventOrChoice));\n            }\n        },\n        [field, getChoiceValue, emptyValue]\n    );\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createValue,\n        handleChange,\n        onCreate,\n        optionText,\n    });\n\n    const createItem = create || onCreate ? getCreateItem() : null;\n\n    const renderMenuItem = useCallback(\n        choice => {\n            return choice ? (\n                <MenuItem\n                    key={getChoiceValue(choice)}\n                    value={getChoiceValue(choice)}\n                    disabled={getDisableValue(choice)}\n                >\n                    {renderMenuItemOption(\n                        !!createItem && choice?.id === createItem.id\n                            ? createItem\n                            : choice\n                    )}\n                </MenuItem>\n            ) : null;\n        },\n        [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]\n    );\n\n    if (isPending) {\n        return (\n            <LoadingInput\n                label={\n                    label !== '' &&\n                    label !== false && (\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resourceProp}\n                            isRequired={isRequired}\n                        />\n                    )\n                }\n                sx={props.sx}\n                helperText={\n                    <InputHelperText\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                }\n                variant={props.variant}\n                size={props.size}\n                margin={props.margin}\n                fullWidth={props.fullWidth}\n            />\n        );\n    }\n\n    let finalChoices = fetchError ? [] : allChoices;\n    if (create || onCreate) {\n        finalChoices = [...finalChoices, createItem];\n    }\n    const renderHelperText = !!fetchError || helperText !== false || invalid;\n\n    return (\n        <>\n            <StyledResettableTextField\n                id={id}\n                {...field}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                onChange={handleChangeWithCreateSupport}\n                select\n                label={\n                    label !== '' &&\n                    label !== false && (\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resourceProp}\n                            isRequired={isRequired}\n                        />\n                    )\n                }\n                clearAlwaysVisible\n                error={!!fetchError || invalid}\n                helperText={\n                    renderHelperText ? (\n                        <InputHelperText\n                            error={error?.message || fetchError?.message}\n                            helperText={helperText}\n                        />\n                    ) : null\n                }\n                margin={margin}\n                {...sanitizeRestProps(rest)}\n            >\n                {!isRequired && (\n                    <MenuItem\n                        value={emptyValue}\n                        key=\"null\"\n                        aria-label={translate('ra.action.clear_input_value')}\n                        title={translate('ra.action.clear_input_value')}\n                    >\n                        {renderEmptyItemOption()}\n                    </MenuItem>\n                )}\n                {finalChoices.map(renderMenuItem)}\n            </StyledResettableTextField>\n            {createElement}\n        </>\n    );\n};\n\nconst sanitizeRestProps = ({\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    choices,\n    className,\n    crudGetMatching,\n    crudGetOne,\n    data,\n    field,\n    fieldState,\n    formState,\n    filter,\n    filterToQuery,\n    formatOnBlur,\n    isEqual,\n    limitChoicesToValue,\n    multiple,\n    name,\n    pagination,\n    perPage,\n    ref,\n    reference,\n    refetch,\n    render,\n    setFilter,\n    setPagination,\n    setSort,\n    shouldUnregister,\n    sort,\n    subscription,\n    type,\n    validateFields,\n    validation,\n    value,\n    ...rest\n}: any) => sanitizeInputRestProps(rest);\n\nconst PREFIX = 'RaSelectInput';\n\nconst StyledResettableTextField = styled(ResettableTextField, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    ...ResettableTextFieldStyles,\n    minWidth: theme.spacing(20),\n    '& .MuiFilledInput-root': { paddingRight: 0 },\n}));\n\nexport type SelectInputProps = Omit<CommonInputProps, 'source'> &\n    ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    Omit<TextFieldProps, 'label' | 'helperText' | 'classes' | 'onChange'> & {\n        disableValue?: string;\n        emptyText?: string | ReactElement;\n        emptyValue?: any;\n        resettable?: boolean;\n        // Source is optional as AutocompleteInput can be used inside a ReferenceInput that already defines the source\n        source?: string;\n        onChange?: (event: ChangeEvent<HTMLInputElement> | RaRecord) => void;\n    };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAuBC,WAAW,EAAEC,SAAS,QAAqB,OAAO;AACzE,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,QAAQ,QAAwB,eAAe;AACxD,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SACIC,iBAAiB,EACjBC,QAAQ,EACRC,UAAU,EACVC,YAAY,EAEZC,UAAU,EAEVC,0BAA0B,QACvB,SAAS;AAGhB,SACIC,mBAAmB,EACnBC,yBAAyB,QACtB,uBAAuB;AAC9B,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SACIC,0BAA0B,QAEvB,8BAA8B;AACrC,SAASC,YAAY,QAAQ,gBAAgB;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA,OAAO,IAAMC,WAAW,GAAG,SAAAA,CAACC,KAAuB;EAE3C,IAASC,WAAW,GA4BpBD,KAAK,CAAAE,OA5Be;IACpBC,SAAS,GA2BTH,KAAK,CAAAG,SA3BI;IACTC,MAAM,GA0BNJ,KAAK,CAAAI,MA1BC;IACNC,WAAW,GAyBXL,KAAK,CAAAK,WAzBM;IACXC,WAAW,GAwBXN,KAAK,CAAAM,WAxBM;IACXC,YAAY,GAuBZP,KAAK,CAAAO,YAvBO;IACZC,EAAA,GAsBAR,KAAK,CAAAS,YAtBoB;IAAzBA,YAAY,GAAAD,EAAA,cAAG,UAAU,GAAAA,EAAA;IACzBE,EAAA,GAqBAV,KAAK,CAAAW,SArBS;IAAdA,SAAS,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACdE,EAAA,GAoBAZ,KAAK,CAAAa,UApBU;IAAfA,UAAU,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACfE,MAAM,GAmBNd,KAAK,CAAAc,MAnBC;IACNC,MAAM,GAkBNf,KAAK,CAAAe,MAlBC;IACNC,UAAU,GAiBVhB,KAAK,CAAAgB,UAjBK;IACEC,cAAc,GAgB1BjB,KAAK,CAAAkB,UAhBqB;IACfC,aAAa,GAexBnB,KAAK,CAAAoB,SAfmB;IACbC,aAAa,GAcxBrB,KAAK,CAAAsB,SAdmB;IACxBC,KAAK,GAaLvB,KAAK,CAAAuB,KAbA;IACLC,EAAA,GAYAxB,KAAK,CAAAyB,MAZW;IAAhBA,MAAM,GAAAD,EAAA,cAAG,OAAO,GAAAA,EAAA;IAChBE,MAAM,GAWN1B,KAAK,CAAA0B,MAXC;IACNC,QAAQ,GAUR3B,KAAK,CAAA2B,QAVG;IACRC,QAAQ,GASR5B,KAAK,CAAA4B,QATG;IACRC,UAAU,GAQV7B,KAAK,CAAA6B,UARK;IACVC,WAAW,GAOX9B,KAAK,CAAA8B,WAPM;IACXC,KAAK,GAML/B,KAAK,CAAA+B,KANA;IACKC,YAAY,GAKtBhC,KAAK,CAAAiC,QALiB;IACdC,UAAU,GAIlBlC,KAAK,CAAAmC,MAJa;IAClBC,eAAe,GAGfpC,KAAK,CAAAoC,eAHU;IACfC,QAAQ,GAERrC,KAAK,CAAAqC,QAFG;IACLC,IAAI,GAAAC,MAAA,CACPvC,KAAK,EA7BH,qVA6BL,CADU;EAEX,IAAMwC,SAAS,GAAGlD,YAAY,EAAE;EAEhCP,SAAS,CAAC;IACN;IACA,IAAI8B,UAAU,IAAI,IAAI,EAAE;MACpB,MAAM,IAAI4B,KAAK,CACX,2GAA2G,CAC9G;;EAET,CAAC,EAAE,CAAC5B,UAAU,CAAC,CAAC;EAEV,IAAA6B,EAAA,GAOFvD,iBAAiB,CAAC;MAClBe,OAAO,EAAED,WAAW;MACpBmB,SAAS,EAAED,aAAa;MACxBD,UAAU,EAAED,cAAc;MAC1BK,SAAS,EAAED,aAAa;MACxBY,QAAQ,EAAED,YAAY;MACtBG,MAAM,EAAED;KACX,CAAC;IAbES,UAAU,GAAAD,EAAA,CAAAC,UAAA;IACVrB,SAAS,GAAAoB,EAAA,CAAApB,SAAA;IACFsB,UAAU,GAAAF,EAAA,CAAAG,KAAA;IACjBV,MAAM,GAAAO,EAAA,CAAAP,MAAA;IACNF,QAAQ,GAAAS,EAAA,CAAAT,QAAA;IACRa,eAAe,GAAAJ,EAAA,CAAAI,eAQjB;EAEF,IAAIX,MAAM,KAAKY,SAAS,EAAE;IACtB,MAAM,IAAIN,KAAK,CACX,kGAAkG,CACrG;;EAGL,IAAI,CAACnB,SAAS,IAAI,CAACsB,UAAU,IAAID,UAAU,KAAKI,SAAS,EAAE;IACvD,MAAM,IAAIN,KAAK,CACX,mGAAmG,CACtG;;EAGL,IAAMO,uBAAuB,GAAGxD,0BAA0B,CAACyC,QAAQ,CAAC;EAC9D,IAAAgB,EAAA,GAAqD1D,UAAU,CAAC;MAClEsC,UAAU,EACNA,UAAU,aAAVA,UAAU,cAAVA,UAAU,GACTiB,eAAe,GAAGE,uBAAuB,GAAGD,SAAU;MAC3DjB,WAAW,EAAAA,WAAA;MACXrB,YAAY,EAAAA,YAAA;MACZ2B,eAAe,EAAEA,eAAe,aAAfA,eAAe,cAAfA,eAAe,GAAI,CAACU;KACxC,CAAC;IAPMI,aAAa,GAAAD,EAAA,CAAAC,aAAA;IAAEC,cAAc,GAAAF,EAAA,CAAAE,cAAA;IAAEC,eAAe,GAAAH,EAAA,CAAAG,eAOpD;EACI,IAAAC,EAAA,GAAwCjE,QAAQ,CAAAkE,QAAA;MAClD/C,YAAY,EAAAA,YAAA;MACZwB,KAAK,EAAAA,KAAA;MACLjB,MAAM,EAAAA,MAAA;MACNY,MAAM,EAAAA,MAAA;MACNC,QAAQ,EAAAA,QAAA;MACRM,QAAQ,EAAAA,QAAA;MACRE,MAAM,EAAAA,MAAA;MACNE,QAAQ,EAAAA;IAAA,GACLC,IAAI,EACT;IAVMiB,KAAK,GAAAF,EAAA,CAAAE,KAAA;IAAEC,UAAU,GAAAH,EAAA,CAAAG,UAAA;IAAEC,EAAE,GAAAJ,EAAA,CAAAI,EAAA;IAAEC,UAAU,GAAAL,EAAA,CAAAK,UAUvC;EAEM,IAAAb,KAAK,GAAcW,UAAU,CAAAX,KAAxB;IAAEc,OAAO,GAAKH,UAAU,CAAAG,OAAf;EAEtB,IAAMC,qBAAqB,GAAG9E,WAAW,CAAC;IACtC,OAAO,OAAO6B,SAAS,KAAK,QAAQ,GAC9BA,SAAS,KAAK,EAAE,GACZ,GAAG,CAAC;IAAA,EACJ6B,SAAS,CAAC7B,SAAS,EAAE;MAAEkD,CAAC,EAAElD;IAAS,CAAE,CAAC,GAC1CA,SAAS;EACnB,CAAC,EAAE,CAACA,SAAS,EAAE6B,SAAS,CAAC,CAAC;EAE1B,IAAMsB,oBAAoB,GAAGhF,WAAW,CACpC,UAAAiF,MAAM;IAAI,OAAAb,aAAa,CAACa,MAAM,CAAC;EAArB,CAAqB,EAC/B,CAACb,aAAa,CAAC,CAClB;EAED,IAAMc,YAAY,GAAGlF,WAAW,CAC5B,UACImF,aAA4D;IAAA,OAAAC,SAAA;;QAE5D,IAAI,OAAOD,aAAa,KAAK,QAAQ,EAAE;UACnC,IAAIA,aAAa,KAAK,EAAE,EAAE;YACtB;YACAV,KAAK,CAAC5B,QAAQ,CAACd,UAAU,CAAC;;SAEjC,MAAM,IAAIoD,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEE,MAAM,EAAE;UAC9B;UACA;UACAZ,KAAK,CAAC5B,QAAQ,CAACsC,aAAa,CAAC;SAChC,MAAM;UACH;UACAV,KAAK,CAAC5B,QAAQ,CAACwB,cAAc,CAACc,aAAa,CAAC,CAAC;;;;;GAEpD,EACD,CAACV,KAAK,EAAEJ,cAAc,EAAEtC,UAAU,CAAC,CACtC;EAEK,IAAAuD,EAAA,GAIFvE,0BAA0B,CAAC;MAC3BO,MAAM,EAAAA,MAAA;MACNC,WAAW,EAAAA,WAAA;MACXC,WAAW,EAAAA,WAAA;MACX0D,YAAY,EAAAA,YAAA;MACZpC,QAAQ,EAAAA,QAAA;MACRC,UAAU,EAAAA;KACb,CAAC;IAVEwC,aAAa,GAAAD,EAAA,CAAAC,aAAA;IACCC,6BAA6B,GAAAF,EAAA,CAAAJ,YAAA;IAC3CO,aAAa,GAAAH,EAAA,CAAAG,aAQf;EAEF,IAAMC,UAAU,GAAGpE,MAAM,IAAIwB,QAAQ,GAAGyC,aAAa,EAAE,GAAG,IAAI;EAE9D,IAAMI,cAAc,GAAG3F,WAAW,CAC9B,UAAAiF,MAAM;IACF,OAAOA,MAAM,GACTlF,KAAA,CAAA0F,aAAA,CAACtF,QAAQ;MACLyF,GAAG,EAAEvB,cAAc,CAACY,MAAM,CAAC;MAC3BY,KAAK,EAAExB,cAAc,CAACY,MAAM,CAAC;MAC7Ba,QAAQ,EAAExB,eAAe,CAACW,MAAM;IAAC,GAEhCD,oBAAoB,CACjB,CAAC,CAACU,UAAU,IAAI,CAAAT,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEN,EAAE,MAAKe,UAAU,CAACf,EAAE,GACtCe,UAAU,GACVT,MAAM,CACf,CACM,GACX,IAAI;EACZ,CAAC,EACD,CAACZ,cAAc,EAAEC,eAAe,EAAEU,oBAAoB,EAAEU,UAAU,CAAC,CACtE;EAED,IAAIlD,SAAS,EAAE;IACX,OACIzC,KAAA,CAAA0F,aAAA,CAACzE,YAAY;MACTyB,KAAK,EACDA,KAAK,KAAK,EAAE,IACZA,KAAK,KAAK,KAAK,IACX1C,KAAA,CAAA0F,aAAA,CAAClF,UAAU;QACPkC,KAAK,EAAEA,KAAK;QACZY,MAAM,EAAEA,MAAM;QACdF,QAAQ,EAAED,YAAY;QACtB0B,UAAU,EAAEA;MAAU,EAE7B;MAELmB,EAAE,EAAE7E,KAAK,CAAC6E,EAAE;MACZ7D,UAAU,EACNnC,KAAA,CAAA0F,aAAA,CAAC5E,eAAe;QACZkD,KAAK,EAAEA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEiC,OAAO;QACrB9D,UAAU,EAAEA;MAAU,EACxB;MAEN+D,OAAO,EAAE/E,KAAK,CAAC+E,OAAO;MACtBC,IAAI,EAAEhF,KAAK,CAACgF,IAAI;MAChBvD,MAAM,EAAEzB,KAAK,CAACyB,MAAM;MACpBwD,SAAS,EAAEjF,KAAK,CAACiF;IAAS,EAC5B;;EAIV,IAAIC,YAAY,GAAGtC,UAAU,GAAG,EAAE,GAAGD,UAAU;EAC/C,IAAIvC,MAAM,IAAIwB,QAAQ,EAAE;IACpBsD,YAAY,GAAAC,aAAA,CAAAA,aAAA,KAAOD,YAAY,UAAEV,UAAU,SAAC;;EAEhD,IAAMY,gBAAgB,GAAG,CAAC,CAACxC,UAAU,IAAI5B,UAAU,KAAK,KAAK,IAAI2C,OAAO;EAExE,OACI9E,KAAA,CAAA0F,aAAA,CAAA1F,KAAA,CAAAwG,QAAA,QACIxG,KAAA,CAAA0F,aAAA,CAACe,yBAAyB,EAAAhC,QAAA;IACtBG,EAAE,EAAEA;EAAE,GACFF,KAAK;IACTpD,SAAS,EAAEnB,IAAI,CAAC,UAAU,EAAE,YAAAuG,MAAA,CAAYpD,MAAM,CAAE,EAAEhC,SAAS,CAAC;IAC5DwB,QAAQ,EAAE2C,6BAA6B;IACvCkB,MAAM;IACNjE,KAAK,EACDA,KAAK,KAAK,EAAE,IACZA,KAAK,KAAK,KAAK,IACX1C,KAAA,CAAA0F,aAAA,CAAClF,UAAU;MACPkC,KAAK,EAAEA,KAAK;MACZY,MAAM,EAAEA,MAAM;MACdF,QAAQ,EAAED,YAAY;MACtB0B,UAAU,EAAEA;IAAU,EAE7B;IAEL+B,kBAAkB;IAClB5C,KAAK,EAAE,CAAC,CAACD,UAAU,IAAIe,OAAO;IAC9B3C,UAAU,EACNoE,gBAAgB,GACZvG,KAAA,CAAA0F,aAAA,CAAC5E,eAAe;MACZkD,KAAK,EAAE,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEiC,OAAO,MAAIlC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEkC,OAAO;MAC5C9D,UAAU,EAAEA;IAAU,EACxB,GACF,IAAI;IAEZS,MAAM,EAAEA;EAAM,GACViE,iBAAiB,CAACpD,IAAI,CAAC,GAE1B,CAACoB,UAAU,IACR7E,KAAA,CAAA0F,aAAA,CAACtF,QAAQ;IACL0F,KAAK,EAAE9D,UAAU;IACjB6D,GAAG,EAAC,MAAM;IAAA,cACElC,SAAS,CAAC,6BAA6B,CAAC;IACpDmD,KAAK,EAAEnD,SAAS,CAAC,6BAA6B;EAAC,GAE9CoB,qBAAqB,EAAE,CAE/B,EACAsB,YAAY,CAACU,GAAG,CAACnB,cAAc,CAAC,CACT,EAC3BF,aAAa,CACf;AAEX,CAAC;AAED,IAAMmB,iBAAiB,GAAG,SAAAA,CAAClF,EAoCrB;EAnCF,IAAAqF,WAAW,GAAArF,EAAA,CAAAqF,WAAA;IACXC,SAAS,GAAAtF,EAAA,CAAAsF,SAAA;IACTC,YAAY,GAAAvF,EAAA,CAAAuF,YAAA;IACZ7F,OAAO,GAAAM,EAAA,CAAAN,OAAA;IACPC,SAAS,GAAAK,EAAA,CAAAL,SAAA;IACT6F,eAAe,GAAAxF,EAAA,CAAAwF,eAAA;IACfC,UAAU,GAAAzF,EAAA,CAAAyF,UAAA;IACVC,IAAI,GAAA1F,EAAA,CAAA0F,IAAA;IACJ3C,KAAK,GAAA/C,EAAA,CAAA+C,KAAA;IACLC,UAAU,GAAAhD,EAAA,CAAAgD,UAAA;IACV2C,SAAS,GAAA3F,EAAA,CAAA2F,SAAA;IACTpF,MAAM,GAAAP,EAAA,CAAAO,MAAA;IACNqF,aAAa,GAAA5F,EAAA,CAAA4F,aAAA;IACbC,YAAY,GAAA7F,EAAA,CAAA6F,YAAA;IACZC,OAAO,GAAA9F,EAAA,CAAA8F,OAAA;IACPC,mBAAmB,GAAA/F,EAAA,CAAA+F,mBAAA;IACnBC,QAAQ,GAAAhG,EAAA,CAAAgG,QAAA;IACRC,IAAI,GAAAjG,EAAA,CAAAiG,IAAA;IACJC,UAAU,GAAAlG,EAAA,CAAAkG,UAAA;IACVC,OAAO,GAAAnG,EAAA,CAAAmG,OAAA;IACPC,GAAG,GAAApG,EAAA,CAAAoG,GAAA;IACHC,SAAS,GAAArG,EAAA,CAAAqG,SAAA;IACTC,OAAO,GAAAtG,EAAA,CAAAsG,OAAA;IACPC,MAAM,GAAAvG,EAAA,CAAAuG,MAAA;IACNC,SAAS,GAAAxG,EAAA,CAAAwG,SAAA;IACTC,aAAa,GAAAzG,EAAA,CAAAyG,aAAA;IACbC,OAAO,GAAA1G,EAAA,CAAA0G,OAAA;IACPC,gBAAgB,GAAA3G,EAAA,CAAA2G,gBAAA;IAChBC,IAAI,GAAA5G,EAAA,CAAA4G,IAAA;IACJC,YAAY,GAAA7G,EAAA,CAAA6G,YAAA;IACZC,IAAI,GAAA9G,EAAA,CAAA8G,IAAA;IACJC,cAAc,GAAA/G,EAAA,CAAA+G,cAAA;IACdC,UAAU,GAAAhH,EAAA,CAAAgH,UAAA;IACV7C,KAAK,GAAAnE,EAAA,CAAAmE,KAAA;IACFrC,IAAI,GAAAC,MAAA,CAAA/B,EAAA,EAnCgB,0bAoC1B,CADU;EACA,OAAAZ,sBAAsB,CAAC0C,IAAI,CAAC;CAAA;AAEvC,IAAMmF,MAAM,GAAG,eAAe;AAE9B,IAAMnC,yBAAyB,GAAGpG,MAAM,CAACO,mBAAmB,EAAE;EAC1DgH,IAAI,EAAEgB,MAAM;EACZC,iBAAiB,EAAE,SAAAA,CAAC1H,KAAK,EAAE2H,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAACpH,EAAS;MAAPqH,KAAK,GAAArH,EAAA,CAAAqH,KAAA;EAAO,OAAAvE,QAAA,CAAAA,QAAA,KACX5D,yBAAyB;IAC5BoI,QAAQ,EAAED,KAAK,CAACE,OAAO,CAAC,EAAE,CAAC;IAC3B,wBAAwB,EAAE;MAAEC,YAAY,EAAE;IAAC;EAAE;AAH/B,CAIhB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}