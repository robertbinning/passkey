{"ast":null,"code":"import { createContext, useContext } from 'react';\n/**\n * Context that provides a function that accept a source and return getters for the modified source and label.\n *\n * This allows some special inputs to prefix or suffix the source of their children.\n *\n * @example\n * const sourceContext = {\n *  getSource: source => `coordinates.${source}`,\n *  getLabel: source => `resources.posts.fields.${source}`,\n * }\n * const CoordinatesInput = () => {\n *   return (\n *     <SourceContextProvider value={sourceContext}>\n *       <TextInput source=\"lat\" />\n *       <TextInput source=\"lng\" />\n *     </SourceContextProvider>\n *   );\n * };\n */\nexport var SourceContext = createContext(undefined);\nexport var SourceContextProvider = SourceContext.Provider;\nexport var useSourceContext = function () {\n  var context = useContext(SourceContext);\n  if (!context) {\n    throw new Error('Inputs must be used inside a react-admin Form');\n  }\n  return context;\n};\nexport var useOptionalSourceContext = function () {\n  return useContext(SourceContext);\n};","map":{"version":3,"names":["createContext","useContext","SourceContext","undefined","SourceContextProvider","Provider","useSourceContext","context","Error","useOptionalSourceContext"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/core/SourceContext.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nexport type SourceContextValue =\n    | {\n          /*\n           * Returns the source for a field or input, modified according to the context.\n           */\n          getSource: (source: string) => string;\n          /*\n           * Returns the label for a field or input, modified according to the context. Returns a translation key.\n           */\n          getLabel: (source: string) => string;\n      }\n    | undefined;\n\n/**\n * Context that provides a function that accept a source and return getters for the modified source and label.\n *\n * This allows some special inputs to prefix or suffix the source of their children.\n *\n * @example\n * const sourceContext = {\n *  getSource: source => `coordinates.${source}`,\n *  getLabel: source => `resources.posts.fields.${source}`,\n * }\n * const CoordinatesInput = () => {\n *   return (\n *     <SourceContextProvider value={sourceContext}>\n *       <TextInput source=\"lat\" />\n *       <TextInput source=\"lng\" />\n *     </SourceContextProvider>\n *   );\n * };\n */\nexport const SourceContext = createContext<SourceContextValue>(undefined);\n\nexport const SourceContextProvider = SourceContext.Provider;\n\nexport const useSourceContext = () => {\n    const context = useContext(SourceContext);\n\n    if (!context) {\n        throw new Error('Inputs must be used inside a react-admin Form');\n    }\n\n    return context;\n};\n\nexport const useOptionalSourceContext = () => useContext(SourceContext);\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAejD;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,aAAa,GAAGF,aAAa,CAAqBG,SAAS,CAAC;AAEzE,OAAO,IAAMC,qBAAqB,GAAGF,aAAa,CAACG,QAAQ;AAE3D,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAAA;EAC5B,IAAMC,OAAO,GAAGN,UAAU,CAACC,aAAa,CAAC;EAEzC,IAAI,CAACK,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;;EAGpE,OAAOD,OAAO;AAClB,CAAC;AAED,OAAO,IAAME,wBAAwB,GAAG,SAAAA,CAAA;EAAM,OAAAR,UAAU,CAACC,aAAa,CAAC;AAAzB,CAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}