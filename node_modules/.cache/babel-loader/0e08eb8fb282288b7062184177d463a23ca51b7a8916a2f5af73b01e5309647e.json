{"ast":null,"code":"import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the sort part of the useListController() result.\n *\n * Use the useListSortContext() hook to read the context. That's what many\n * List components do in react-admin (e.g. <SortButton>).\n *\n * @typedef {Object} ListSortContextValue\n * @prop {Object}   sort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort({ field: 'name', order: 'ASC' })\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListSortContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListSortContext\n *\n * @example\n *\n * import { useListController, usePickSortContext, ListSortContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListSortContext.Provider value={usePickSortContext(controllerProps)}>\n *             ...\n *         </ListSortContext.Provider>\n *     );\n * };\n */\nexport var ListSortContext = createContext(undefined);\nexport var usePickSortContext = function (context) {\n  return useMemo(function () {\n    return pick(context, ['sort', 'setSort', 'resource']);\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [context.sort, context.setSort]);\n};\nListSortContext.displayName = 'ListSortContext';","map":{"version":3,"names":["createContext","useMemo","pick","ListSortContext","undefined","usePickSortContext","context","sort","setSort","displayName"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/list/ListSortContext.tsx"],"sourcesContent":["import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\nimport { ListControllerResult } from './useListController';\n\n/**\n * Context to store the sort part of the useListController() result.\n *\n * Use the useListSortContext() hook to read the context. That's what many\n * List components do in react-admin (e.g. <SortButton>).\n *\n * @typedef {Object} ListSortContextValue\n * @prop {Object}   sort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort({ field: 'name', order: 'ASC' })\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListSortContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListSortContext\n *\n * @example\n *\n * import { useListController, usePickSortContext, ListSortContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListSortContext.Provider value={usePickSortContext(controllerProps)}>\n *             ...\n *         </ListSortContext.Provider>\n *     );\n * };\n */\nexport const ListSortContext = createContext<ListSortContextValue | undefined>(\n    undefined\n);\n\nexport type ListSortContextValue = Pick<\n    ListControllerResult,\n    'sort' | 'setSort' | 'resource'\n>;\n\nexport const usePickSortContext = (\n    context: ListControllerResult\n): ListSortContextValue =>\n    useMemo(\n        () => pick(context, ['sort', 'setSort', 'resource']),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [context.sort, context.setSort]\n    );\n\nListSortContext.displayName = 'ListSortContext';\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,OAAO,QAAQ,OAAO;AAC9C,OAAOC,IAAI,MAAM,aAAa;AAG9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAO,IAAMC,eAAe,GAAGH,aAAa,CACxCI,SAAS,CACZ;AAOD,OAAO,IAAMC,kBAAkB,GAAG,SAAAA,CAC9BC,OAA6B;EAE7B,OAAAL,OAAO,CACH;IAAM,OAAAC,IAAI,CAACI,OAAO,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;EAA9C,CAA8C;EACpD;EACA,CAACA,OAAO,CAACC,IAAI,EAAED,OAAO,CAACE,OAAO,CAAC,CAClC;AAJD,CAIC;AAELL,eAAe,CAACM,WAAW,GAAG,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}