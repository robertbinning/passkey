{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { cloneElement, memo } from 'react';\nimport { TableBody } from '@mui/material';\nimport clsx from 'clsx';\nimport { RecordContextProvider } from 'ra-core';\nimport { DatagridClasses } from './useDatagridStyles';\nimport DatagridRow, { PureDatagridRow } from './DatagridRow';\nvar DatagridBody = React.forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    _b = _a.data,\n    data = _b === void 0 ? defaultData : _b,\n    expand = _a.expand,\n    _c = _a.hasBulkActions,\n    hasBulkActions = _c === void 0 ? false : _c,\n    hover = _a.hover,\n    onToggleItem = _a.onToggleItem,\n    resource = _a.resource,\n    _d = _a.row,\n    row = _d === void 0 ? defaultChildren : _d,\n    rowClick = _a.rowClick,\n    rowSx = _a.rowSx,\n    rowStyle = _a.rowStyle,\n    selectedIds = _a.selectedIds,\n    isRowSelectable = _a.isRowSelectable,\n    rest = __rest(_a, [\"children\", \"className\", \"data\", \"expand\", \"hasBulkActions\", \"hover\", \"onToggleItem\", \"resource\", \"row\", \"rowClick\", \"rowSx\", \"rowStyle\", \"selectedIds\", \"isRowSelectable\"]);\n  return React.createElement(TableBody, __assign({\n    ref: ref,\n    className: clsx('datagrid-body', className, DatagridClasses.tbody)\n  }, rest), data.map(function (record, rowIndex) {\n    var _a;\n    var _b, _c;\n    return React.createElement(RecordContextProvider, {\n      value: record,\n      key: (_b = record.id) !== null && _b !== void 0 ? _b : \"row\".concat(rowIndex)\n    }, cloneElement(row, {\n      className: clsx(DatagridClasses.row, (_a = {}, _a[DatagridClasses.rowEven] = rowIndex % 2 === 0, _a[DatagridClasses.rowOdd] = rowIndex % 2 !== 0, _a)),\n      expand: expand,\n      hasBulkActions: hasBulkActions && !!selectedIds,\n      hover: hover,\n      id: (_c = record.id) !== null && _c !== void 0 ? _c : \"row\".concat(rowIndex),\n      onToggleItem: onToggleItem,\n      resource: resource,\n      rowClick: rowClick,\n      selectable: !isRowSelectable || isRowSelectable(record),\n      selected: selectedIds === null || selectedIds === void 0 ? void 0 : selectedIds.includes(record.id),\n      sx: rowSx === null || rowSx === void 0 ? void 0 : rowSx(record, rowIndex),\n      style: rowStyle === null || rowStyle === void 0 ? void 0 : rowStyle(record, rowIndex)\n    }, children));\n  }));\n});\nvar defaultChildren = React.createElement(DatagridRow, null);\nvar defaultData = [];\n// trick Material UI Table into thinking this is one of the child type it supports\n// @ts-ignore\nDatagridBody.muiName = 'TableBody';\nexport var PureDatagridBody = memo(function (props) {\n  return React.createElement(DatagridBody, __assign({\n    row: React.createElement(PureDatagridRow, null)\n  }, props));\n});\n// trick Material UI Table into thinking this is one of the child type it supports\n// @ts-ignore\nPureDatagridBody.muiName = 'TableBody';\nexport default DatagridBody;","map":{"version":3,"names":["React","cloneElement","memo","TableBody","clsx","RecordContextProvider","DatagridClasses","DatagridRow","PureDatagridRow","DatagridBody","forwardRef","_a","ref","children","className","_b","data","defaultData","expand","_c","hasBulkActions","hover","onToggleItem","resource","_d","row","defaultChildren","rowClick","rowSx","rowStyle","selectedIds","isRowSelectable","rest","__rest","createElement","__assign","tbody","map","record","rowIndex","value","key","id","concat","rowEven","rowOdd","selectable","selected","includes","sx","style","muiName","PureDatagridBody","props"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/list/datagrid/DatagridBody.tsx"],"sourcesContent":["import * as React from 'react';\nimport { cloneElement, memo, FC, ReactElement } from 'react';\nimport { SxProps, TableBody, TableBodyProps } from '@mui/material';\nimport clsx from 'clsx';\nimport { Identifier, RaRecord, RecordContextProvider } from 'ra-core';\n\nimport { DatagridClasses } from './useDatagridStyles';\nimport DatagridRow, { PureDatagridRow, RowClickFunction } from './DatagridRow';\n\nconst DatagridBody: React.ForwardRefExoticComponent<\n    Omit<DatagridBodyProps, 'ref'> &\n        React.RefAttributes<HTMLTableSectionElement>\n> = React.forwardRef<HTMLTableSectionElement, DatagridBodyProps>(\n    (\n        {\n            children,\n            className,\n            data = defaultData,\n            expand,\n            hasBulkActions = false,\n            hover,\n            onToggleItem,\n            resource,\n            row = defaultChildren,\n            rowClick,\n            rowSx,\n            rowStyle,\n            selectedIds,\n            isRowSelectable,\n            ...rest\n        },\n        ref\n    ) => (\n        <TableBody\n            ref={ref}\n            className={clsx('datagrid-body', className, DatagridClasses.tbody)}\n            {...rest}\n        >\n            {data.map((record, rowIndex) => (\n                <RecordContextProvider\n                    value={record}\n                    key={record.id ?? `row${rowIndex}`}\n                >\n                    {cloneElement(\n                        row,\n                        {\n                            className: clsx(DatagridClasses.row, {\n                                [DatagridClasses.rowEven]: rowIndex % 2 === 0,\n                                [DatagridClasses.rowOdd]: rowIndex % 2 !== 0,\n                            }),\n                            expand,\n                            hasBulkActions: hasBulkActions && !!selectedIds,\n                            hover,\n                            id: record.id ?? `row${rowIndex}`,\n                            onToggleItem,\n                            resource,\n                            rowClick,\n                            selectable:\n                                !isRowSelectable || isRowSelectable(record),\n                            selected: selectedIds?.includes(record.id),\n                            sx: rowSx?.(record, rowIndex),\n                            style: rowStyle?.(record, rowIndex),\n                        },\n                        children\n                    )}\n                </RecordContextProvider>\n            ))}\n        </TableBody>\n    )\n);\n\nconst defaultChildren = <DatagridRow />;\n\nexport interface DatagridBodyProps extends Omit<TableBodyProps, 'classes'> {\n    className?: string;\n    data?: any[];\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    hover?: boolean;\n    onToggleItem?: (\n        id: Identifier,\n        event: React.TouchEvent | React.MouseEvent\n    ) => void;\n    record?: RaRecord;\n    resource?: string;\n    row?: ReactElement;\n    rowClick?: string | RowClickFunction | false;\n    rowSx?: (record: RaRecord, index: number) => SxProps;\n    rowStyle?: (record: RaRecord, index: number) => any;\n    selectedIds?: Identifier[];\n    isRowSelectable?: (record: RaRecord) => boolean;\n}\n\nconst defaultData = [];\n\n// trick Material UI Table into thinking this is one of the child type it supports\n// @ts-ignore\nDatagridBody.muiName = 'TableBody';\n\nexport const PureDatagridBody = memo(props => (\n    <DatagridBody row={<PureDatagridRow />} {...props} />\n));\n\n// trick Material UI Table into thinking this is one of the child type it supports\n// @ts-ignore\nPureDatagridBody.muiName = 'TableBody';\n\nexport default DatagridBody;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}