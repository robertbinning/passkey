{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { ListBase, getElementsFromRecords, InferredElement, useListContext, useResourceContext, usePrevious } from 'ra-core';\nimport { useLocation } from 'react-router';\nimport { ListView } from './ListView';\nimport { listFieldTypes } from './listFieldTypes';\nimport { capitalize, singularize } from 'inflection';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nexport var ListGuesser = function (props) {\n  var debounce = props.debounce,\n    disableAuthentication = props.disableAuthentication,\n    disableSyncWithLocation = props.disableSyncWithLocation,\n    exporter = props.exporter,\n    filter = props.filter,\n    filterDefaultValues = props.filterDefaultValues,\n    perPage = props.perPage,\n    queryOptions = props.queryOptions,\n    resource = props.resource,\n    sort = props.sort,\n    rest = __rest(props, [\"debounce\", \"disableAuthentication\", \"disableSyncWithLocation\", \"exporter\", \"filter\", \"filterDefaultValues\", \"perPage\", \"queryOptions\", \"resource\", \"sort\"]);\n  // force a rerender of this component when any list parameter changes\n  // otherwise the ListBase won't be rerendered when the sort changes\n  // and the following check won't be performed\n  useLocation();\n  // keep previous data, unless the resource changes\n  var resourceFromContext = useResourceContext(props);\n  var previousResource = usePrevious(resourceFromContext);\n  var keepPreviousData = previousResource === resourceFromContext;\n  return React.createElement(ListBase, {\n    debounce: debounce,\n    disableAuthentication: disableAuthentication,\n    disableSyncWithLocation: disableSyncWithLocation,\n    exporter: exporter,\n    filter: filter,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    queryOptions: {\n      placeholderData: function (previousData) {\n        return keepPreviousData ? previousData : undefined;\n      }\n    },\n    resource: resource,\n    sort: sort\n  }, React.createElement(ListViewGuesser, __assign({}, rest)));\n};\nvar ListViewGuesser = function (props) {\n  var data = useListContext().data;\n  var resource = useResourceContext();\n  var _a = useState(null),\n    child = _a[0],\n    setChild = _a[1];\n  var _b = props.enableLog,\n    enableLog = _b === void 0 ? process.env.NODE_ENV === 'development' : _b,\n    rest = __rest(props, [\"enableLog\"]);\n  useEffect(function () {\n    setChild(null);\n  }, [resource]);\n  useEffect(function () {\n    if (data && data.length > 0 && !child) {\n      var inferredElements = getElementsFromRecords(data, listFieldTypes);\n      var inferredChild = new InferredElement(listFieldTypes.table, null, inferredElements);\n      var inferredChildElement = inferredChild.getElement();\n      var representation = inferredChild.getRepresentation();\n      if (!resource) {\n        throw new Error('Cannot use <ListGuesser> outside of a ResourceContext');\n      }\n      if (!inferredChildElement || !representation) {\n        return;\n      }\n      setChild(inferredChildElement);\n      var components = ['List'].concat(Array.from(new Set(Array.from(representation.matchAll(/<([^/\\s>]+)/g)).map(function (match) {\n        return match[1];\n      }).filter(function (component) {\n        return component !== 'span';\n      })))).sort();\n      if (enableLog) {\n        // eslint-disable-next-line no-console\n        console.log(\"Guessed List:\\n\\nimport { \".concat(components.join(', '), \" } from 'react-admin';\\n\\nexport const \").concat(capitalize(singularize(resource)), \"List = () => (\\n    <List>\\n\").concat(inferredChild.getRepresentation(), \"\\n    </List>\\n);\"));\n      }\n    }\n  }, [data, child, resource, enableLog]);\n  return React.createElement(ListView, __assign({}, rest), child);\n};","map":{"version":3,"names":["React","useState","useEffect","ListBase","getElementsFromRecords","InferredElement","useListContext","useResourceContext","usePrevious","useLocation","ListView","listFieldTypes","capitalize","singularize","ListGuesser","props","debounce","disableAuthentication","disableSyncWithLocation","exporter","filter","filterDefaultValues","perPage","queryOptions","resource","sort","rest","__rest","resourceFromContext","previousResource","keepPreviousData","createElement","placeholderData","previousData","undefined","ListViewGuesser","__assign","data","_a","child","setChild","_b","enableLog","process","env","NODE_ENV","length","inferredElements","inferredChild","table","inferredChildElement","getElement","representation","getRepresentation","Error","components","concat","Array","from","Set","matchAll","map","match","component","console","log","join"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/list/ListGuesser.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport {\n    ListBase,\n    getElementsFromRecords,\n    InferredElement,\n    useListContext,\n    useResourceContext,\n    RaRecord,\n    usePrevious,\n} from 'ra-core';\nimport { useLocation } from 'react-router';\n\nimport { ListProps } from './List';\nimport { ListView, ListViewProps } from './ListView';\nimport { listFieldTypes } from './listFieldTypes';\nimport { capitalize, singularize } from 'inflection';\n\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nexport const ListGuesser = <RecordType extends RaRecord = any>(\n    props: Omit<ListProps, 'children'> & { enableLog?: boolean }\n) => {\n    const {\n        debounce,\n        disableAuthentication,\n        disableSyncWithLocation,\n        exporter,\n        filter,\n        filterDefaultValues,\n        perPage,\n        queryOptions,\n        resource,\n        sort,\n        ...rest\n    } = props;\n    // force a rerender of this component when any list parameter changes\n    // otherwise the ListBase won't be rerendered when the sort changes\n    // and the following check won't be performed\n    useLocation();\n    // keep previous data, unless the resource changes\n    const resourceFromContext = useResourceContext(props);\n    const previousResource = usePrevious(resourceFromContext);\n    const keepPreviousData = previousResource === resourceFromContext;\n    return (\n        <ListBase<RecordType>\n            debounce={debounce}\n            disableAuthentication={disableAuthentication}\n            disableSyncWithLocation={disableSyncWithLocation}\n            exporter={exporter}\n            filter={filter}\n            filterDefaultValues={filterDefaultValues}\n            perPage={perPage}\n            queryOptions={{\n                placeholderData: previousData =>\n                    keepPreviousData ? previousData : undefined,\n            }}\n            resource={resource}\n            sort={sort}\n        >\n            <ListViewGuesser {...rest} />\n        </ListBase>\n    );\n};\n\nconst ListViewGuesser = (\n    props: Omit<ListViewProps, 'children'> & { enableLog?: boolean }\n) => {\n    const { data } = useListContext();\n    const resource = useResourceContext();\n    const [child, setChild] = useState<React.ReactElement | null>(null);\n    const { enableLog = process.env.NODE_ENV === 'development', ...rest } =\n        props;\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (data && data.length > 0 && !child) {\n            const inferredElements = getElementsFromRecords(\n                data,\n                listFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                listFieldTypes.table,\n                null,\n                inferredElements\n            );\n            const inferredChildElement = inferredChild.getElement();\n            const representation = inferredChild.getRepresentation();\n            if (!resource) {\n                throw new Error(\n                    'Cannot use <ListGuesser> outside of a ResourceContext'\n                );\n            }\n            if (!inferredChildElement || !representation) {\n                return;\n            }\n\n            setChild(inferredChildElement);\n\n            const components = ['List']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            if (enableLog) {\n                // eslint-disable-next-line no-console\n                console.log(\n                    `Guessed List:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${capitalize(singularize(resource))}List = () => (\n    <List>\n${inferredChild.getRepresentation()}\n    </List>\n);`\n                );\n            }\n        }\n    }, [data, child, resource, enableLog]);\n\n    return <ListView {...rest}>{child}</ListView>;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SACIC,QAAQ,EACRC,sBAAsB,EACtBC,eAAe,EACfC,cAAc,EACdC,kBAAkB,EAElBC,WAAW,QACR,SAAS;AAChB,SAASC,WAAW,QAAQ,cAAc;AAG1C,SAASC,QAAQ,QAAuB,YAAY;AACpD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,UAAU,EAAEC,WAAW,QAAQ,YAAY;AAEpD;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMC,WAAW,GAAG,SAAAA,CACvBC,KAA4D;EAGxD,IAAAC,QAAQ,GAWRD,KAAK,CAAAC,QAXG;IACRC,qBAAqB,GAUrBF,KAAK,CAAAE,qBAVgB;IACrBC,uBAAuB,GASvBH,KAAK,CAAAG,uBATkB;IACvBC,QAAQ,GAQRJ,KAAK,CAAAI,QARG;IACRC,MAAM,GAONL,KAAK,CAAAK,MAPC;IACNC,mBAAmB,GAMnBN,KAAK,CAAAM,mBANc;IACnBC,OAAO,GAKPP,KAAK,CAAAO,OALE;IACPC,YAAY,GAIZR,KAAK,CAAAQ,YAJO;IACZC,QAAQ,GAGRT,KAAK,CAAAS,QAHG;IACRC,IAAI,GAEJV,KAAK,CAAAU,IAFD;IACDC,IAAI,GAAAC,MAAA,CACPZ,KAAK,EAZH,4JAYL,CADU;EAEX;EACA;EACA;EACAN,WAAW,EAAE;EACb;EACA,IAAMmB,mBAAmB,GAAGrB,kBAAkB,CAACQ,KAAK,CAAC;EACrD,IAAMc,gBAAgB,GAAGrB,WAAW,CAACoB,mBAAmB,CAAC;EACzD,IAAME,gBAAgB,GAAGD,gBAAgB,KAAKD,mBAAmB;EACjE,OACI5B,KAAA,CAAA+B,aAAA,CAAC5B,QAAQ;IACLa,QAAQ,EAAEA,QAAQ;IAClBC,qBAAqB,EAAEA,qBAAqB;IAC5CC,uBAAuB,EAAEA,uBAAuB;IAChDC,QAAQ,EAAEA,QAAQ;IAClBC,MAAM,EAAEA,MAAM;IACdC,mBAAmB,EAAEA,mBAAmB;IACxCC,OAAO,EAAEA,OAAO;IAChBC,YAAY,EAAE;MACVS,eAAe,EAAE,SAAAA,CAAAC,YAAY;QACzB,OAAAH,gBAAgB,GAAGG,YAAY,GAAGC,SAAS;MAA3C;KACP;IACDV,QAAQ,EAAEA,QAAQ;IAClBC,IAAI,EAAEA;EAAI,GAEVzB,KAAA,CAAA+B,aAAA,CAACI,eAAe,EAAAC,QAAA,KAAKV,IAAI,EAAI,CACtB;AAEnB,CAAC;AAED,IAAMS,eAAe,GAAG,SAAAA,CACpBpB,KAAgE;EAExD,IAAAsB,IAAI,GAAK/B,cAAc,EAAE,CAAA+B,IAArB;EACZ,IAAMb,QAAQ,GAAGjB,kBAAkB,EAAE;EAC/B,IAAA+B,EAAA,GAAoBrC,QAAQ,CAA4B,IAAI,CAAC;IAA5DsC,KAAK,GAAAD,EAAA;IAAEE,QAAQ,GAAAF,EAAA,GAA6C;EAC3D,IAAAG,EAAA,GACJ1B,KAAK,CAAA2B,SADiD;IAAlDA,SAAS,GAAAD,EAAA,cAAGE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAAAJ,EAAA;IAAKf,IAAI,GAAAC,MAAA,CAC/DZ,KAAK,EADH,aAA+D,CAAF;EAGnEb,SAAS,CAAC;IACNsC,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEdtB,SAAS,CAAC;IACN,IAAImC,IAAI,IAAIA,IAAI,CAACS,MAAM,GAAG,CAAC,IAAI,CAACP,KAAK,EAAE;MACnC,IAAMQ,gBAAgB,GAAG3C,sBAAsB,CAC3CiC,IAAI,EACJ1B,cAAc,CACjB;MACD,IAAMqC,aAAa,GAAG,IAAI3C,eAAe,CACrCM,cAAc,CAACsC,KAAK,EACpB,IAAI,EACJF,gBAAgB,CACnB;MACD,IAAMG,oBAAoB,GAAGF,aAAa,CAACG,UAAU,EAAE;MACvD,IAAMC,cAAc,GAAGJ,aAAa,CAACK,iBAAiB,EAAE;MACxD,IAAI,CAAC7B,QAAQ,EAAE;QACX,MAAM,IAAI8B,KAAK,CACX,uDAAuD,CAC1D;;MAEL,IAAI,CAACJ,oBAAoB,IAAI,CAACE,cAAc,EAAE;QAC1C;;MAGJZ,QAAQ,CAACU,oBAAoB,CAAC;MAE9B,IAAMK,UAAU,GAAG,CAAC,MAAM,CAAC,CACtBC,MAAM,CACHC,KAAK,CAACC,IAAI,CACN,IAAIC,GAAG,CACHF,KAAK,CAACC,IAAI,CAACN,cAAc,CAACQ,QAAQ,CAAC,cAAc,CAAC,CAAC,CAC9CC,GAAG,CAAC,UAAAC,KAAK;QAAI,OAAAA,KAAK,CAAC,CAAC,CAAC;MAAR,CAAQ,CAAC,CACtB1C,MAAM,CAAC,UAAA2C,SAAS;QAAI,OAAAA,SAAS,KAAK,MAAM;MAApB,CAAoB,CAAC,CACjD,CACJ,CACJ,CACAtC,IAAI,EAAE;MAEX,IAAIiB,SAAS,EAAE;QACX;QACAsB,OAAO,CAACC,GAAG,CACP,6BAAAT,MAAA,CAETD,UAAU,CAACW,IAAI,CAAC,IAAI,CAAC,6CAAAV,MAAA,CAEjB5C,UAAU,CAACC,WAAW,CAACW,QAAQ,CAAC,CAAC,kCAAAgC,MAAA,CAE9CR,aAAa,CAACK,iBAAiB,EAAE,sBAEhC,CACc;;;EAGb,CAAC,EAAE,CAAChB,IAAI,EAAEE,KAAK,EAAEf,QAAQ,EAAEkB,SAAS,CAAC,CAAC;EAEtC,OAAO1C,KAAA,CAAA+B,aAAA,CAACrB,QAAQ,EAAA0B,QAAA,KAAKV,IAAI,GAAGa,KAAK,CAAY;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}