{"ast":null,"code":"import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\nimport { useWrappedSource } from '../core';\n/*\n * This hook updates the input with the default value if default value is present\n * and field input is not already populated or dirty\n */\nexport var useApplyInputDefaultValues = function (_a) {\n  var inputProps = _a.inputProps,\n    isArrayInput = _a.isArrayInput,\n    fieldArrayInputControl = _a.fieldArrayInputControl;\n  var defaultValue = inputProps.defaultValue,\n    source = inputProps.source;\n  var finalSource = useWrappedSource(source);\n  var record = useRecordContext(inputProps);\n  var _b = useFormContext(),\n    getValues = _b.getValues,\n    resetField = _b.resetField,\n    formState = _b.formState,\n    reset = _b.reset;\n  var recordValue = get(record, finalSource);\n  var formValue = get(getValues(), finalSource);\n  var dirtyFields = formState.dirtyFields;\n  var isDirty = Object.keys(dirtyFields).includes(finalSource);\n  useEffect(function () {\n    if (defaultValue == null || formValue != null || recordValue != null || isDirty) {\n      return;\n    }\n    // Side note: For Array Input but checked for all to avoid possible regression\n    // Since we use get(record, source), if source is like foo.23.bar,\n    // this effect will run. However we only want to set the default value\n    // for the subfield bar if the record actually has a value for foo.23\n    var pathContainsIndex = finalSource.split('.').some(function (pathPart) {\n      return numericRegex.test(pathPart);\n    });\n    if (pathContainsIndex) {\n      var parentPath = finalSource.split('.').slice(0, -1).join('.');\n      var parentValue = get(getValues(), parentPath);\n      if (parentValue == null) {\n        // the parent is undefined, so we don't want to set the default value\n        return;\n      }\n    }\n    if (isArrayInput) {\n      if (!fieldArrayInputControl) {\n        throw new Error('useApplyInputDefaultValues: No fieldArrayInputControl passed in props for array input usage');\n      }\n      // We need to update inputs nested in array using react hook forms\n      // own array controller rather then the generic reset to prevent control losing\n      // context of the nested inputs\n      fieldArrayInputControl.replace(defaultValue);\n      // resets the form so that control no longer sees the form as dirty after\n      // defaults applied\n      reset({}, {\n        keepValues: true\n      });\n      return;\n    }\n    resetField(finalSource, {\n      defaultValue: defaultValue\n    });\n  });\n};\nvar numericRegex = /^\\d+$/;","map":{"version":3,"names":["useEffect","useFormContext","get","useRecordContext","useWrappedSource","useApplyInputDefaultValues","_a","inputProps","isArrayInput","fieldArrayInputControl","defaultValue","source","finalSource","record","_b","getValues","resetField","formState","reset","recordValue","formValue","dirtyFields","isDirty","Object","keys","includes","pathContainsIndex","split","some","pathPart","numericRegex","test","parentPath","slice","join","parentValue","Error","replace","keepValues"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/form/useApplyInputDefaultValues.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport {\n    FieldValues,\n    UseFieldArrayReturn,\n    useFormContext,\n} from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\nimport { InputProps } from './useInput';\nimport { useWrappedSource } from '../core';\n\ninterface StandardInput {\n    inputProps: Partial<InputProps> & { source: string };\n    isArrayInput?: undefined;\n    fieldArrayInputControl?: undefined;\n}\n\ninterface ArrayInput {\n    inputProps: Partial<InputProps> & { source: string };\n    isArrayInput: true;\n    fieldArrayInputControl: UseFieldArrayReturn<FieldValues, string, 'id'>;\n}\n\ntype Props = StandardInput | ArrayInput;\n\n/*\n * This hook updates the input with the default value if default value is present\n * and field input is not already populated or dirty\n */\nexport const useApplyInputDefaultValues = ({\n    inputProps,\n    isArrayInput,\n    fieldArrayInputControl,\n}: Props) => {\n    const { defaultValue, source } = inputProps;\n    const finalSource = useWrappedSource(source);\n\n    const record = useRecordContext(inputProps);\n    const { getValues, resetField, formState, reset } = useFormContext();\n    const recordValue = get(record, finalSource);\n    const formValue = get(getValues(), finalSource);\n    const { dirtyFields } = formState;\n    const isDirty = Object.keys(dirtyFields).includes(finalSource);\n\n    useEffect(() => {\n        if (\n            defaultValue == null ||\n            formValue != null ||\n            recordValue != null ||\n            isDirty\n        ) {\n            return;\n        }\n\n        // Side note: For Array Input but checked for all to avoid possible regression\n        // Since we use get(record, source), if source is like foo.23.bar,\n        // this effect will run. However we only want to set the default value\n        // for the subfield bar if the record actually has a value for foo.23\n        const pathContainsIndex = finalSource\n            .split('.')\n            .some(pathPart => numericRegex.test(pathPart));\n        if (pathContainsIndex) {\n            const parentPath = finalSource.split('.').slice(0, -1).join('.');\n            const parentValue = get(getValues(), parentPath);\n            if (parentValue == null) {\n                // the parent is undefined, so we don't want to set the default value\n                return;\n            }\n        }\n\n        if (isArrayInput) {\n            if (!fieldArrayInputControl) {\n                throw new Error(\n                    'useApplyInputDefaultValues: No fieldArrayInputControl passed in props for array input usage'\n                );\n            }\n\n            // We need to update inputs nested in array using react hook forms\n            // own array controller rather then the generic reset to prevent control losing\n            // context of the nested inputs\n            fieldArrayInputControl.replace(defaultValue);\n            // resets the form so that control no longer sees the form as dirty after\n            // defaults applied\n            reset({}, { keepValues: true });\n\n            return;\n        }\n\n        resetField(finalSource, { defaultValue });\n    });\n};\n\nconst numericRegex = /^\\d+$/;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAGIC,cAAc,QACX,iBAAiB;AACxB,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAASC,gBAAgB,QAAQ,eAAe;AAEhD,SAASC,gBAAgB,QAAQ,SAAS;AAgB1C;;;;AAIA,OAAO,IAAMC,0BAA0B,GAAG,SAAAA,CAACC,EAInC;MAHJC,UAAU,GAAAD,EAAA,CAAAC,UAAA;IACVC,YAAY,GAAAF,EAAA,CAAAE,YAAA;IACZC,sBAAsB,GAAAH,EAAA,CAAAG,sBAAA;EAEd,IAAAC,YAAY,GAAaH,UAAU,CAAAG,YAAvB;IAAEC,MAAM,GAAKJ,UAAU,CAAAI,MAAf;EAC5B,IAAMC,WAAW,GAAGR,gBAAgB,CAACO,MAAM,CAAC;EAE5C,IAAME,MAAM,GAAGV,gBAAgB,CAACI,UAAU,CAAC;EACrC,IAAAO,EAAA,GAA8Cb,cAAc,EAAE;IAA5Dc,SAAS,GAAAD,EAAA,CAAAC,SAAA;IAAEC,UAAU,GAAAF,EAAA,CAAAE,UAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEC,KAAK,GAAAJ,EAAA,CAAAI,KAAqB;EACpE,IAAMC,WAAW,GAAGjB,GAAG,CAACW,MAAM,EAAED,WAAW,CAAC;EAC5C,IAAMQ,SAAS,GAAGlB,GAAG,CAACa,SAAS,EAAE,EAAEH,WAAW,CAAC;EACvC,IAAAS,WAAW,GAAKJ,SAAS,CAAAI,WAAd;EACnB,IAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACI,QAAQ,CAACb,WAAW,CAAC;EAE9DZ,SAAS,CAAC;IACN,IACIU,YAAY,IAAI,IAAI,IACpBU,SAAS,IAAI,IAAI,IACjBD,WAAW,IAAI,IAAI,IACnBG,OAAO,EACT;MACE;;IAGJ;IACA;IACA;IACA;IACA,IAAMI,iBAAiB,GAAGd,WAAW,CAChCe,KAAK,CAAC,GAAG,CAAC,CACVC,IAAI,CAAC,UAAAC,QAAQ;MAAI,OAAAC,YAAY,CAACC,IAAI,CAACF,QAAQ,CAAC;IAA3B,CAA2B,CAAC;IAClD,IAAIH,iBAAiB,EAAE;MACnB,IAAMM,UAAU,GAAGpB,WAAW,CAACe,KAAK,CAAC,GAAG,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAChE,IAAMC,WAAW,GAAGjC,GAAG,CAACa,SAAS,EAAE,EAAEiB,UAAU,CAAC;MAChD,IAAIG,WAAW,IAAI,IAAI,EAAE;QACrB;QACA;;;IAIR,IAAI3B,YAAY,EAAE;MACd,IAAI,CAACC,sBAAsB,EAAE;QACzB,MAAM,IAAI2B,KAAK,CACX,6FAA6F,CAChG;;MAGL;MACA;MACA;MACA3B,sBAAsB,CAAC4B,OAAO,CAAC3B,YAAY,CAAC;MAC5C;MACA;MACAQ,KAAK,CAAC,EAAE,EAAE;QAAEoB,UAAU,EAAE;MAAI,CAAE,CAAC;MAE/B;;IAGJtB,UAAU,CAACJ,WAAW,EAAE;MAAEF,YAAY,EAAAA;IAAA,CAAE,CAAC;EAC7C,CAAC,CAAC;AACN,CAAC;AAED,IAAMoB,YAAY,GAAG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}