{"ast":null,"code":"var _jsxFileName = \"/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/pages/wizard/voice/voice.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useBots } from \"../../../context/botsContext\";\nimport OptionSelect from \"../optionSelect/optionSelect\";\nimport voiceIcon from \"../../../assets/voice-icon.png\";\nimport \"./voice.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Voice = ({\n  bot,\n  setBot\n}) => {\n  _s();\n  var _bot$voice;\n  const {\n    voiceList\n  } = useBots();\n  const [selectedVoiceId, setSelectedVoiceId] = React.useState(((_bot$voice = bot.voice) === null || _bot$voice === void 0 ? void 0 : _bot$voice.id) || null);\n  const selectedVoice = voiceList.find(voice => voice.id === selectedVoiceId);\n  const handleSelect = voice => {\n    setSelectedVoiceId(voice.id);\n    setBot(prevBot => ({\n      ...prevBot,\n      voice\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-left-container\",\n      children: voiceList.map(voice => /*#__PURE__*/_jsxDEV(OptionSelect, {\n        feature: voice,\n        isSelected: voice.id === selectedVoiceId,\n        onSelect: () => handleSelect(voice)\n      }, voice.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-right-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-preview-container\",\n        children: [selectedVoice ? selectedVoice.imageURL ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedVoice.imageURL,\n          alt: selectedVoice.name,\n          className: \"selected-voice-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-placeholder\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: voiceIcon,\n            alt: \"Voice Icon\",\n            className: \"voice-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this) : null, selectedVoice && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"selected-voice-text\",\n          children: selectedVoice.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Voice, \"afz4+oZ57FaEkyOSc2/K6yQpQHM=\", false, function () {\n  return [useBots];\n});\n_c = Voice;\nexport default Voice;\nvar _c;\n$RefreshReg$(_c, \"Voice\");","map":{"version":3,"names":["React","useBots","OptionSelect","voiceIcon","jsxDEV","_jsxDEV","Voice","bot","setBot","_s","_bot$voice","voiceList","selectedVoiceId","setSelectedVoiceId","useState","voice","id","selectedVoice","find","handleSelect","prevBot","className","children","map","feature","isSelected","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","imageURL","src","alt","name","_c","$RefreshReg$"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/pages/wizard/voice/voice.tsx"],"sourcesContent":["import React from \"react\";\nimport { useBots } from \"../../../context/botsContext\";\nimport { Bot, Feature } from \"../../../data/types\";\nimport OptionSelect from \"../optionSelect/optionSelect\";\nimport voiceIcon from \"../../../assets/voice-icon.png\";\nimport \"./voice.css\";\n\ninterface VoiceProps {\n  bot: Bot;\n  setBot: React.Dispatch<React.SetStateAction<Bot>>;\n}\n\nconst Voice: React.FC<VoiceProps> = ({ bot, setBot }) => {\n  const { voiceList } = useBots();\n  const [selectedVoiceId, setSelectedVoiceId] = React.useState<string | null>(\n    bot.voice?.id || null\n  );\n  const selectedVoice = voiceList.find((voice) => voice.id === selectedVoiceId);\n\n  const handleSelect = (voice: Feature) => {\n    setSelectedVoiceId(voice.id);\n    setBot((prevBot) => ({ ...prevBot, voice }));\n  }\n\n  return (\n    <div className=\"voice-container\">\n      <div className=\"voice-left-container\">\n        {voiceList.map((voice) => (\n          <OptionSelect\n            key={voice.id}\n            feature={voice}\n            isSelected={voice.id === selectedVoiceId}\n            onSelect={() => handleSelect(voice)}\n          />\n        ))\n        }\n      </div>\n\n      <div className=\"voice-right-container\">\n        <div className=\"voice-preview-container\">\n          {selectedVoice ? (\n            selectedVoice.imageURL ? (\n              <img\n                src={selectedVoice.imageURL}\n                alt={selectedVoice.name}\n                className=\"selected-voice-image\"\n              />\n            ) : (\n              <div className=\"voice-placeholder\">\n                <img src={voiceIcon} alt=\"Voice Icon\" className=\"voice-icon\" />\n              </div>\n            )\n          ) : null}\n          {selectedVoice && <p className=\"selected-voice-text\">{selectedVoice.name}</p>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Voice;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}