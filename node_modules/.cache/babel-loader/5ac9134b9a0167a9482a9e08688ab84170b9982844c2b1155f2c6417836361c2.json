{"ast":null,"code":"var _jsxFileName = \"/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/Login.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getCredential } from './webauthn';\nimport './Login.css';\nimport logo from './kwaai.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const handleLogin = async () => {\n    const email = document.getElementById('email').value;\n    if (!email) {\n      alert('Please enter an email address.');\n      return;\n    }\n\n    // Fetch the credentialId from the server using the email\n    const response = await fetch(`https://localhost/getCredentialId?email=${encodeURIComponent(email)}`);\n    if (!response.ok) {\n      console.error('Failed to fetch credentialId');\n      return;\n    }\n    const {\n      credentialId\n    } = await response.json();\n    // Ensure the credentialId is URL-safe Base64 encoded\n    const base64CredentialId = credentialId.replace(/\\+/g, '-').replace(/\\//g, '_');\n    try {\n      const assertion = await getCredential(base64CredentialId); // Ensure credentialId is correctly encoded\n      console.log('Assertion:', assertion);\n      const loginResponse = await fetch('https://localhost/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: assertion.id,\n          rawId: btoa(String.fromCharCode(...new Uint8Array(assertion.rawId))),\n          // Encode rawId to Base64\n          response: {\n            authenticatorData: btoa(String.fromCharCode(...new Uint8Array(assertion.response.authenticatorData))),\n            // Encode to Base64\n            clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(assertion.response.clientDataJSON))),\n            // Encode to Base64\n            signature: btoa(String.fromCharCode(...new Uint8Array(assertion.response.signature))),\n            // Encode to Base64\n            userHandle: assertion.response.userHandle ? btoa(String.fromCharCode(...new Uint8Array(assertion.response.userHandle))) : null // Encode to Base64 if not null\n          },\n          type: assertion.type\n        })\n      });\n      if (loginResponse.ok) {\n        console.log('Logged in successfully');\n        navigate('/admin'); // Redirect to the users page\n      } else {\n        console.error('Login failed');\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      alt: \"Kwaai Logo\",\n      className: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"input-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      className: \"auth-button\",\n      children: \"Login with Passkey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"auth-link\",\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/register\",\n        children: \"Register here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 61\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useNavigate","getCredential","logo","jsxDEV","_jsxDEV","Login","_s","navigate","handleLogin","email","document","getElementById","value","alert","response","fetch","encodeURIComponent","ok","console","error","credentialId","json","base64CredentialId","replace","assertion","log","loginResponse","method","headers","body","JSON","stringify","id","rawId","btoa","String","fromCharCode","Uint8Array","authenticatorData","clientDataJSON","signature","userHandle","type","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onClick","href","_c","$RefreshReg$"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/Login.js"],"sourcesContent":["import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getCredential } from './webauthn';\nimport './Login.css';\nimport logo from './kwaai.png';\n\nconst Login = () => {\n    const navigate = useNavigate();\n\n    const handleLogin = async () => {\n        const email = document.getElementById('email').value;\n        if (!email) {\n            alert('Please enter an email address.');\n            return;\n        }\n\n        // Fetch the credentialId from the server using the email\n        const response = await fetch(`https://localhost/getCredentialId?email=${encodeURIComponent(email)}`);\n        if (!response.ok) {\n            console.error('Failed to fetch credentialId');\n            return;\n        }\n        const { credentialId } = await response.json();\n        // Ensure the credentialId is URL-safe Base64 encoded\n        const base64CredentialId = credentialId.replace(/\\+/g, '-').replace(/\\//g, '_');\n\n        try {\n            const assertion = await getCredential(base64CredentialId); // Ensure credentialId is correctly encoded\n            console.log('Assertion:', assertion);\n\n            const loginResponse = await fetch('https://localhost/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    id: assertion.id,\n                    rawId: btoa(String.fromCharCode(...new Uint8Array(assertion.rawId))), // Encode rawId to Base64\n                    response: {\n                        authenticatorData: btoa(String.fromCharCode(...new Uint8Array(assertion.response.authenticatorData))), // Encode to Base64\n                        clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(assertion.response.clientDataJSON))), // Encode to Base64\n                        signature: btoa(String.fromCharCode(...new Uint8Array(assertion.response.signature))), // Encode to Base64\n                        userHandle: assertion.response.userHandle ? btoa(String.fromCharCode(...new Uint8Array(assertion.response.userHandle))) : null, // Encode to Base64 if not null\n                    },\n                    type: assertion.type,\n                }),\n            });\n\n            if (loginResponse.ok) {\n                console.log('Logged in successfully');\n                navigate('/admin'); // Redirect to the users page\n            } else {\n                console.error('Login failed');\n            }\n        } catch (error) {\n            console.error('Error during login:', error);\n        }\n    };\n\n    return (\n        <div className=\"auth-container\">\n            <img src={logo} alt=\"Kwaai Logo\" className=\"logo\" />\n            <h1>Login</h1>\n            <input type=\"email\" id=\"email\" placeholder=\"Email\" className=\"input-field\" />\n            <button onClick={handleLogin} className=\"auth-button\">Login with Passkey</button>\n            <p className=\"auth-link\">Don't have an account? <a href=\"/register\">Register here</a></p>\n        </div>\n    );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}