{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useCallback, useMemo } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useGetList, useGetManyAggregate } from '../../dataProvider';\nimport { useReferenceParams } from './useReferenceParams';\nimport { useWrappedSource } from '../../core';\n/**\n * Prepare data for the ReferenceArrayInput components\n *\n * @example\n *\n * const { allChoices, availableChoices, selectedChoices, error, isFetching, isLoading, isPending } = useReferenceArrayInputController({\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @return {Object} controllerProps Fetched data and callbacks for the ReferenceArrayInput components\n */\nexport var useReferenceArrayInputController = function (props) {\n  var _a;\n  var debounce = props.debounce,\n    enableGetChoices = props.enableGetChoices,\n    filter = props.filter,\n    _b = props.page,\n    initialPage = _b === void 0 ? 1 : _b,\n    _c = props.perPage,\n    initialPerPage = _c === void 0 ? 25 : _c,\n    _d = props.sort,\n    initialSort = _d === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _d,\n    _e = props.queryOptions,\n    queryOptions = _e === void 0 ? {} : _e,\n    reference = props.reference,\n    source = props.source;\n  var getValues = useFormContext().getValues;\n  var finalSource = useWrappedSource(source);\n  // When we change the defaultValue of the child input using react-hook-form resetField function,\n  // useWatch does not seem to get the new value. We fallback to getValues to get it.\n  var value = (_a = useWatch({\n    name: finalSource\n  })) !== null && _a !== void 0 ? _a : getValues(finalSource);\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  /**\n   * Get the records related to the current value (with getMany)\n   */\n  var _f = useGetManyAggregate(reference, {\n      ids: value || EmptyArray,\n      meta: meta\n    }, {\n      enabled: value != null && value.length > 0\n    }),\n    referenceRecords = _f.data,\n    errorGetMany = _f.error,\n    isLoadingGetMany = _f.isLoading,\n    isFetchingGetMany = _f.isFetching,\n    isPendingGetMany = _f.isPending,\n    refetchGetMany = _f.refetch;\n  var _g = useReferenceParams({\n      resource: reference,\n      page: initialPage,\n      perPage: initialPerPage,\n      sort: initialSort,\n      debounce: debounce,\n      filter: filter\n    }),\n    params = _g[0],\n    paramsModifiers = _g[1];\n  // filter out not found references - happens when the dataProvider doesn't guarantee referential integrity\n  var finalReferenceRecords = referenceRecords ? referenceRecords.filter(Boolean) : [];\n  var isGetMatchingEnabled = enableGetChoices ? enableGetChoices(params.filterValues) : true;\n  var _h = useGetList(reference, {\n      pagination: {\n        page: params.page,\n        perPage: params.perPage\n      },\n      sort: {\n        field: params.sort,\n        order: params.order\n      },\n      filter: __assign(__assign({}, params.filter), filter),\n      meta: meta\n    }, __assign({\n      retry: false,\n      enabled: isGetMatchingEnabled,\n      placeholderData: function (previousData) {\n        return previousData;\n      }\n    }, otherQueryOptions)),\n    matchingReferences = _h.data,\n    total = _h.total,\n    pageInfo = _h.pageInfo,\n    errorGetList = _h.error,\n    isLoadingGetList = _h.isLoading,\n    isFetchingGetList = _h.isFetching,\n    isPendingGetList = _h.isPending,\n    refetchGetMatching = _h.refetch;\n  // We merge the currently selected records with the matching ones, otherwise\n  // the component displaying the currently selected records may fail\n  var finalMatchingReferences = matchingReferences && matchingReferences.length > 0 ? mergeReferences(matchingReferences, finalReferenceRecords) : finalReferenceRecords.length > 0 ? finalReferenceRecords : matchingReferences;\n  var refetch = useCallback(function () {\n    refetchGetMany();\n    refetchGetMatching();\n  }, [refetchGetMany, refetchGetMatching]);\n  var currentSort = useMemo(function () {\n    return {\n      field: params.sort,\n      order: params.order\n    };\n  }, [params.sort, params.order]);\n  return {\n    sort: currentSort,\n    allChoices: finalMatchingReferences,\n    availableChoices: matchingReferences,\n    selectedChoices: finalReferenceRecords,\n    displayedFilters: params.displayedFilters,\n    error: errorGetMany || errorGetList,\n    filter: filter,\n    filterValues: params.filterValues,\n    hideFilter: paramsModifiers.hideFilter,\n    isFetching: isFetchingGetMany || isFetchingGetList,\n    isLoading: isLoadingGetMany || isLoadingGetList,\n    isPending: isPendingGetMany || isPendingGetList,\n    page: params.page,\n    perPage: params.perPage,\n    refetch: refetch,\n    resource: reference,\n    setFilters: paramsModifiers.setFilters,\n    setPage: paramsModifiers.setPage,\n    setPerPage: paramsModifiers.setPerPage,\n    setSort: paramsModifiers.setSort,\n    showFilter: paramsModifiers.showFilter,\n    // we return source and not finalSource because child inputs (e.g. AutocompleteArrayInput) already call useInput and compute the final source\n    source: source,\n    total: total,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? params.page * params.perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : params.page > 1,\n    isFromReference: true\n  };\n};\nvar EmptyArray = [];\n// concatenate and deduplicate two lists of records\nvar mergeReferences = function (ref1, ref2) {\n  var res = __spreadArray([], ref1, true);\n  var ids = ref1.map(function (ref) {\n    return ref.id;\n  });\n  ref2.forEach(function (ref) {\n    if (!ids.includes(ref.id)) {\n      ids.push(ref.id);\n      res.push(ref);\n    }\n  });\n  return res;\n};","map":{"version":3,"names":["useCallback","useMemo","useFormContext","useWatch","useGetList","useGetManyAggregate","useReferenceParams","useWrappedSource","useReferenceArrayInputController","props","debounce","enableGetChoices","filter","_b","page","initialPage","_c","perPage","initialPerPage","_d","sort","initialSort","field","order","_e","queryOptions","reference","source","getValues","finalSource","value","_a","name","meta","otherQueryOptions","__rest","_f","ids","EmptyArray","enabled","length","referenceRecords","data","errorGetMany","error","isLoadingGetMany","isLoading","isFetchingGetMany","isFetching","isPendingGetMany","isPending","refetchGetMany","refetch","_g","resource","params","paramsModifiers","finalReferenceRecords","Boolean","isGetMatchingEnabled","filterValues","_h","pagination","__assign","retry","placeholderData","previousData","matchingReferences","total","pageInfo","errorGetList","isLoadingGetList","isFetchingGetList","isPendingGetList","refetchGetMatching","finalMatchingReferences","mergeReferences","currentSort","allChoices","availableChoices","selectedChoices","displayedFilters","hideFilter","setFilters","setPage","setPerPage","setSort","showFilter","hasNextPage","undefined","hasPreviousPage","isFromReference","ref1","ref2","res","__spreadArray","map","ref","id","forEach","includes","push"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/input/useReferenceArrayInputController.ts"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport type { UseQueryOptions } from '@tanstack/react-query';\n\nimport { useGetList, useGetManyAggregate } from '../../dataProvider';\nimport { useReferenceParams } from './useReferenceParams';\nimport { useWrappedSource } from '../../core';\nimport type { FilterPayload, RaRecord, SortPayload } from '../../types';\nimport type { ChoicesContextValue } from '../../form';\n\n/**\n * Prepare data for the ReferenceArrayInput components\n *\n * @example\n *\n * const { allChoices, availableChoices, selectedChoices, error, isFetching, isLoading, isPending } = useReferenceArrayInputController({\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @return {Object} controllerProps Fetched data and callbacks for the ReferenceArrayInput components\n */\nexport const useReferenceArrayInputController = <\n    RecordType extends RaRecord = any,\n>(\n    props: UseReferenceArrayInputParams<RecordType>\n): ChoicesContextValue<RecordType> => {\n    const {\n        debounce,\n        enableGetChoices,\n        filter,\n        page: initialPage = 1,\n        perPage: initialPerPage = 25,\n        sort: initialSort = { field: 'id', order: 'DESC' },\n        queryOptions = {},\n        reference,\n        source,\n    } = props;\n    const { getValues } = useFormContext();\n    const finalSource = useWrappedSource(source);\n    // When we change the defaultValue of the child input using react-hook-form resetField function,\n    // useWatch does not seem to get the new value. We fallback to getValues to get it.\n    const value = useWatch({ name: finalSource }) ?? getValues(finalSource);\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    /**\n     * Get the records related to the current value (with getMany)\n     */\n    const {\n        data: referenceRecords,\n        error: errorGetMany,\n        isLoading: isLoadingGetMany,\n        isFetching: isFetchingGetMany,\n        isPending: isPendingGetMany,\n        refetch: refetchGetMany,\n    } = useGetManyAggregate<RecordType>(\n        reference,\n        {\n            ids: value || EmptyArray,\n            meta,\n        },\n        {\n            enabled: value != null && value.length > 0,\n        }\n    );\n\n    const [params, paramsModifiers] = useReferenceParams({\n        resource: reference,\n        page: initialPage,\n        perPage: initialPerPage,\n        sort: initialSort,\n        debounce,\n        filter,\n    });\n\n    // filter out not found references - happens when the dataProvider doesn't guarantee referential integrity\n    const finalReferenceRecords = referenceRecords\n        ? referenceRecords.filter(Boolean)\n        : [];\n\n    const isGetMatchingEnabled = enableGetChoices\n        ? enableGetChoices(params.filterValues)\n        : true;\n\n    const {\n        data: matchingReferences,\n        total,\n        pageInfo,\n        error: errorGetList,\n        isLoading: isLoadingGetList,\n        isFetching: isFetchingGetList,\n        isPending: isPendingGetList,\n        refetch: refetchGetMatching,\n    } = useGetList<RecordType>(\n        reference,\n        {\n            pagination: {\n                page: params.page,\n                perPage: params.perPage,\n            },\n            sort: { field: params.sort, order: params.order },\n            filter: { ...params.filter, ...filter },\n            meta,\n        },\n        {\n            retry: false,\n            enabled: isGetMatchingEnabled,\n            placeholderData: previousData => previousData,\n            ...otherQueryOptions,\n        }\n    );\n\n    // We merge the currently selected records with the matching ones, otherwise\n    // the component displaying the currently selected records may fail\n    const finalMatchingReferences =\n        matchingReferences && matchingReferences.length > 0\n            ? mergeReferences(matchingReferences, finalReferenceRecords)\n            : finalReferenceRecords.length > 0\n              ? finalReferenceRecords\n              : matchingReferences;\n\n    const refetch = useCallback(() => {\n        refetchGetMany();\n        refetchGetMatching();\n    }, [refetchGetMany, refetchGetMatching]);\n\n    const currentSort = useMemo(\n        () => ({\n            field: params.sort,\n            order: params.order,\n        }),\n        [params.sort, params.order]\n    );\n    return {\n        sort: currentSort,\n        allChoices: finalMatchingReferences,\n        availableChoices: matchingReferences,\n        selectedChoices: finalReferenceRecords,\n        displayedFilters: params.displayedFilters,\n        error: errorGetMany || errorGetList,\n        filter,\n        filterValues: params.filterValues,\n        hideFilter: paramsModifiers.hideFilter,\n        isFetching: isFetchingGetMany || isFetchingGetList,\n        isLoading: isLoadingGetMany || isLoadingGetList,\n        isPending: isPendingGetMany || isPendingGetList,\n        page: params.page,\n        perPage: params.perPage,\n        refetch,\n        resource: reference,\n        setFilters: paramsModifiers.setFilters,\n        setPage: paramsModifiers.setPage,\n        setPerPage: paramsModifiers.setPerPage,\n        setSort: paramsModifiers.setSort,\n        showFilter: paramsModifiers.showFilter,\n        // we return source and not finalSource because child inputs (e.g. AutocompleteArrayInput) already call useInput and compute the final source\n        source,\n        total: total,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n              ? params.page * params.perPage < total\n              : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : params.page > 1,\n        isFromReference: true,\n    } as ChoicesContextValue<RecordType>;\n};\n\nconst EmptyArray = [];\n\n// concatenate and deduplicate two lists of records\nconst mergeReferences = <RecordType extends RaRecord = any>(\n    ref1: RecordType[],\n    ref2: RecordType[]\n): RecordType[] => {\n    const res = [...ref1];\n    const ids = ref1.map(ref => ref.id);\n    ref2.forEach(ref => {\n        if (!ids.includes(ref.id)) {\n            ids.push(ref.id);\n            res.push(ref);\n        }\n    });\n    return res;\n};\n\nexport interface UseReferenceArrayInputParams<\n    RecordType extends RaRecord = any,\n> {\n    debounce?: number;\n    filter?: FilterPayload;\n    queryOptions?: Omit<\n        UseQueryOptions<{\n            data: RecordType[];\n            total?: number;\n            pageInfo?: {\n                hasNextPage?: boolean;\n                hasPreviousPage?: boolean;\n            };\n        }>,\n        'queryFn' | 'queryKey'\n    > & { meta?: any };\n    page?: number;\n    perPage?: number;\n    record?: RecordType;\n    reference: string;\n    resource?: string;\n    sort?: SortPayload;\n    source: string;\n    enableGetChoices?: (filters: any) => boolean;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}