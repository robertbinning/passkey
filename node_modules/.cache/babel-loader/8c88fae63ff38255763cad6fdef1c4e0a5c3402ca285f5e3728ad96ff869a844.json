{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport * as React from 'react';\nimport { Children, Fragment, useCallback, useEffect, useState } from 'react';\nimport { useLogout, usePermissions } from '../auth';\nimport { useSafeSetState } from '../util';\nimport { useResourceDefinitionContext } from './useResourceDefinitionContext';\n/**\n * This hook inspects the CoreAdminRouter children and returns them separated in three groups:\n * - Custom routes without layout\n * - Custom routes with layout\n * - Resources\n *\n * It also returns a status:\n * - loading: still loading children from a function child\n * - empty: no resources were provided among children\n * - ready: admin is ready to be rendered\n *\n * @example\n * const {\n *    customRoutesWithLayout,\n *    customRoutesWithoutLayout,\n *    resources,\n *    status,\n * } = useConfigureAdminRouterFromChildren(children);\n */\nexport var useConfigureAdminRouterFromChildren = function (children) {\n  var _a = usePermissions(),\n    permissions = _a.permissions,\n    isPending = _a.isPending;\n  // Whenever children are updated, update our custom routes and resources\n  var _b = useRoutesAndResourcesFromChildren(children, permissions, isPending),\n    routesAndResources = _b[0],\n    status = _b[1];\n  // Whenever the resources change, we must ensure they're all registered\n  useRegisterResources(routesAndResources.resources, permissions);\n  return {\n    customRoutesWithLayout: routesAndResources.customRoutesWithLayout,\n    customRoutesWithoutLayout: routesAndResources.customRoutesWithoutLayout,\n    status: status,\n    resources: routesAndResources.resources\n  };\n};\n/**\n * A hook that determine the routes and resources from React nodes and permissions.\n * Returns a tuple with the routes and resources as a single object, and the status.\n * @param children React nodes to inspect\n * @param permissions The permissions\n */\nvar useRoutesAndResourcesFromChildren = function (children, permissions, isLoading) {\n  // Gather custom routes and resources that were declared as direct children of CoreAdminRouter\n  // e.g. Not returned from the child function (if any)\n  // We need to know right away whether some resources were declared to correctly\n  // initialize the status at the next stop\n  var doLogout = useLogout();\n  var _a = useRoutesAndResourcesState(getRoutesAndResourceFromNodes(children)),\n    routesAndResources = _a[0],\n    setRoutesAndResources = _a[1],\n    mergeRoutesAndResources = _a[2];\n  var _b = useSafeSetState(function () {\n      return getStatus(__assign({\n        children: children\n      }, routesAndResources));\n    }),\n    status = _b[0],\n    setStatus = _b[1];\n  if (!status) {\n    throw new Error('Status should be defined');\n  }\n  useEffect(function () {\n    var resolveChildFunction = function (childFunc) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var childrenFuncResult;\n        return __generator(this, function (_a) {\n          try {\n            childrenFuncResult = childFunc(permissions);\n            if (childrenFuncResult === null || childrenFuncResult === void 0 ? void 0 : childrenFuncResult.then) {\n              childrenFuncResult.then(function (resolvedChildren) {\n                mergeRoutesAndResources(getRoutesAndResourceFromNodes(resolvedChildren));\n                setStatus('ready');\n              });\n            } else {\n              mergeRoutesAndResources(getRoutesAndResourceFromNodes(childrenFuncResult));\n              setStatus('ready');\n            }\n          } catch (error) {\n            console.error(error);\n            doLogout();\n          }\n          return [2 /*return*/];\n        });\n      });\n    };\n    var updateFromChildren = function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var functionChild, newRoutesAndResources;\n        return __generator(this, function (_a) {\n          functionChild = getSingleChildFunction(children);\n          newRoutesAndResources = getRoutesAndResourceFromNodes(children);\n          setRoutesAndResources(newRoutesAndResources);\n          setStatus(!!functionChild ? 'loading' : newRoutesAndResources.resources.length > 0 || newRoutesAndResources.customRoutesWithLayout.length > 0 || newRoutesAndResources.customRoutesWithoutLayout.length > 0 ? 'ready' : 'empty');\n          if (functionChild) {\n            resolveChildFunction(functionChild);\n          }\n          return [2 /*return*/];\n        });\n      });\n    };\n    if (!isLoading) {\n      updateFromChildren();\n    }\n  }, [children, doLogout, isLoading, mergeRoutesAndResources, permissions, setRoutesAndResources, setStatus]);\n  return [routesAndResources, status];\n};\n/*\n * A hook that store the routes and resources just like setState but also provides an additional function\n * to merge new routes and resources with the existing ones.\n */\nvar useRoutesAndResourcesState = function (initialState) {\n  var _a = useState(initialState),\n    routesAndResources = _a[0],\n    setRoutesAndResources = _a[1];\n  var mergeRoutesAndResources = useCallback(function (newRoutesAndResources) {\n    setRoutesAndResources(function (previous) {\n      return {\n        customRoutesWithLayout: previous.customRoutesWithLayout.concat(newRoutesAndResources.customRoutesWithLayout),\n        customRoutesWithoutLayout: previous.customRoutesWithoutLayout.concat(newRoutesAndResources.customRoutesWithoutLayout),\n        resources: previous.resources.concat(newRoutesAndResources.resources)\n      };\n    });\n  }, []);\n  return [routesAndResources, setRoutesAndResources, mergeRoutesAndResources];\n};\n/**\n * A hook that register resources and unregister them when the calling component is unmounted.\n * @param resources: An array of Resource elements\n * @param permissions: The permissions\n */\nvar useRegisterResources = function (resources, permissions) {\n  var _a = useResourceDefinitionContext(),\n    register = _a.register,\n    unregister = _a.unregister;\n  useEffect(function () {\n    resources.forEach(function (resource) {\n      if (typeof resource.type.registerResource === 'function') {\n        var definition = resource.type.registerResource(resource.props, permissions);\n        register(definition);\n      } else {\n        throw new Error('When using a custom Resource element, it must have a static registerResource method accepting its props and returning a ResourceDefinition');\n      }\n    });\n    return function () {\n      resources.forEach(function (resource) {\n        if (typeof resource.type.registerResource === 'function') {\n          var definition = resource.type.registerResource(resource.props, permissions);\n          unregister(definition);\n        } else {\n          throw new Error('When using a custom Resource element, it must have a static registerResource method accepting its props and returning a ResourceDefinition');\n        }\n      });\n    };\n  }, [permissions, register, resources, unregister]);\n};\nvar getStatus = function (_a) {\n  var children = _a.children,\n    resources = _a.resources,\n    customRoutesWithLayout = _a.customRoutesWithLayout,\n    customRoutesWithoutLayout = _a.customRoutesWithoutLayout;\n  return getSingleChildFunction(children) ? 'loading' : resources.length > 0 || customRoutesWithLayout.length > 0 || customRoutesWithoutLayout.length > 0 ? 'ready' : 'empty';\n};\n/**\n * Inspect the children of a CoreAdminRouter to see if one of them is a function.\n * Throws an error if there are more than one function child.\n * Returns the function child if one was provided, or null otherwise.\n */\nvar getSingleChildFunction = function (children) {\n  var childrenArray = Array.isArray(children) ? children : [children];\n  var functionChildren = childrenArray.filter(function (child) {\n    return typeof child === 'function';\n  });\n  if (functionChildren.length > 1) {\n    throw new Error('You can only provide one function child to AdminRouter');\n  }\n  if (functionChildren.length === 0) {\n    return null;\n  }\n  return functionChildren[0];\n};\n/**\n * Inspect the children and return an object with the following keys:\n * - customRoutesWithLayout: an array of the custom routes to render inside the layout\n * - customRoutesWithoutLayout: an array of custom routes to render outside the layout\n * - resources: an array of resources elements\n */\nvar getRoutesAndResourceFromNodes = function (children) {\n  var customRoutesWithLayout = [];\n  var customRoutesWithoutLayout = [];\n  var resources = [];\n  if (typeof children === 'function') {\n    return {\n      customRoutesWithLayout: [],\n      customRoutesWithoutLayout: [],\n      resources: []\n    };\n  }\n  // @ts-ignore\n  Children.forEach(children, function (element) {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    if (element.type === Fragment) {\n      var customRoutesFromFragment = getRoutesAndResourceFromNodes(element.props.children);\n      customRoutesWithLayout.push.apply(customRoutesWithLayout, customRoutesFromFragment.customRoutesWithLayout);\n      customRoutesWithoutLayout.push.apply(customRoutesWithoutLayout, customRoutesFromFragment.customRoutesWithoutLayout);\n      resources.push.apply(resources, customRoutesFromFragment.resources);\n    }\n    if (element.type.raName === 'CustomRoutes') {\n      var customRoutesElement = element;\n      if (customRoutesElement.props.noLayout) {\n        customRoutesWithoutLayout.push(customRoutesElement.props.children);\n      } else {\n        customRoutesWithLayout.push(customRoutesElement.props.children);\n      }\n    } else if (element.type.raName === 'Resource') {\n      resources.push(element);\n    }\n  });\n  return {\n    customRoutesWithLayout: customRoutesWithLayout,\n    customRoutesWithoutLayout: customRoutesWithoutLayout,\n    resources: resources\n  };\n};","map":{"version":3,"names":["React","Children","Fragment","useCallback","useEffect","useState","useLogout","usePermissions","useSafeSetState","useResourceDefinitionContext","useConfigureAdminRouterFromChildren","children","_a","permissions","isPending","_b","useRoutesAndResourcesFromChildren","routesAndResources","status","useRegisterResources","resources","customRoutesWithLayout","customRoutesWithoutLayout","isLoading","doLogout","useRoutesAndResourcesState","getRoutesAndResourceFromNodes","setRoutesAndResources","mergeRoutesAndResources","getStatus","__assign","setStatus","Error","resolveChildFunction","childFunc","__awaiter","childrenFuncResult","then","resolvedChildren","error","console","updateFromChildren","functionChild","getSingleChildFunction","newRoutesAndResources","length","initialState","previous","concat","register","unregister","forEach","resource","type","registerResource","definition","props","childrenArray","Array","isArray","functionChildren","filter","child","element","isValidElement","customRoutesFromFragment","push","apply","raName","customRoutesElement","noLayout"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/core/useConfigureAdminRouterFromChildren.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    Dispatch,\n    Fragment,\n    ReactElement,\n    ReactNode,\n    SetStateAction,\n    useCallback,\n    useEffect,\n    useState,\n} from 'react';\nimport { useLogout, usePermissions } from '../auth';\nimport { useSafeSetState } from '../util';\nimport {\n    AdminChildren,\n    RenderResourcesFunction,\n    ResourceDefinition,\n    ResourceProps,\n} from '../types';\nimport { CustomRoutesProps } from './CustomRoutes';\nimport { useResourceDefinitionContext } from './useResourceDefinitionContext';\n\n/**\n * This hook inspects the CoreAdminRouter children and returns them separated in three groups:\n * - Custom routes without layout\n * - Custom routes with layout\n * - Resources\n *\n * It also returns a status:\n * - loading: still loading children from a function child\n * - empty: no resources were provided among children\n * - ready: admin is ready to be rendered\n *\n * @example\n * const {\n *    customRoutesWithLayout,\n *    customRoutesWithoutLayout,\n *    resources,\n *    status,\n * } = useConfigureAdminRouterFromChildren(children);\n */\nexport const useConfigureAdminRouterFromChildren = (\n    children: AdminChildren\n): RoutesAndResources & { status: AdminRouterStatus } => {\n    const { permissions, isPending } = usePermissions();\n\n    // Whenever children are updated, update our custom routes and resources\n    const [routesAndResources, status] = useRoutesAndResourcesFromChildren(\n        children,\n        permissions,\n        isPending\n    );\n\n    // Whenever the resources change, we must ensure they're all registered\n    useRegisterResources(routesAndResources.resources, permissions);\n\n    return {\n        customRoutesWithLayout: routesAndResources.customRoutesWithLayout,\n        customRoutesWithoutLayout: routesAndResources.customRoutesWithoutLayout,\n        status,\n        resources: routesAndResources.resources,\n    };\n};\n\n/**\n * A hook that determine the routes and resources from React nodes and permissions.\n * Returns a tuple with the routes and resources as a single object, and the status.\n * @param children React nodes to inspect\n * @param permissions The permissions\n */\nconst useRoutesAndResourcesFromChildren = (\n    children: AdminChildren,\n    permissions: any,\n    isLoading: boolean\n): [RoutesAndResources, AdminRouterStatus] => {\n    // Gather custom routes and resources that were declared as direct children of CoreAdminRouter\n    // e.g. Not returned from the child function (if any)\n    // We need to know right away whether some resources were declared to correctly\n    // initialize the status at the next stop\n    const doLogout = useLogout();\n    const [routesAndResources, setRoutesAndResources, mergeRoutesAndResources] =\n        useRoutesAndResourcesState(getRoutesAndResourceFromNodes(children));\n\n    const [status, setStatus] = useSafeSetState<AdminRouterStatus>(() =>\n        getStatus({\n            children,\n            ...routesAndResources,\n        })\n    );\n    if (!status) {\n        throw new Error('Status should be defined');\n    }\n\n    useEffect(() => {\n        const resolveChildFunction = async (\n            childFunc: RenderResourcesFunction\n        ) => {\n            try {\n                const childrenFuncResult = childFunc(permissions);\n                if ((childrenFuncResult as Promise<ReactNode>)?.then) {\n                    (childrenFuncResult as Promise<ReactNode>).then(\n                        resolvedChildren => {\n                            mergeRoutesAndResources(\n                                getRoutesAndResourceFromNodes(resolvedChildren)\n                            );\n                            setStatus('ready');\n                        }\n                    );\n                } else {\n                    mergeRoutesAndResources(\n                        getRoutesAndResourceFromNodes(\n                            childrenFuncResult as ReactNode\n                        )\n                    );\n                    setStatus('ready');\n                }\n            } catch (error) {\n                console.error(error);\n                doLogout();\n            }\n        };\n\n        const updateFromChildren = async () => {\n            const functionChild = getSingleChildFunction(children);\n            const newRoutesAndResources =\n                getRoutesAndResourceFromNodes(children);\n            setRoutesAndResources(newRoutesAndResources);\n            setStatus(\n                !!functionChild\n                    ? 'loading'\n                    : newRoutesAndResources.resources.length > 0 ||\n                        newRoutesAndResources.customRoutesWithLayout.length >\n                            0 ||\n                        newRoutesAndResources.customRoutesWithoutLayout.length >\n                            0\n                      ? 'ready'\n                      : 'empty'\n            );\n\n            if (functionChild) {\n                resolveChildFunction(functionChild);\n            }\n        };\n        if (!isLoading) {\n            updateFromChildren();\n        }\n    }, [\n        children,\n        doLogout,\n        isLoading,\n        mergeRoutesAndResources,\n        permissions,\n        setRoutesAndResources,\n        setStatus,\n    ]);\n\n    return [routesAndResources, status];\n};\n\n/*\n * A hook that store the routes and resources just like setState but also provides an additional function\n * to merge new routes and resources with the existing ones.\n */\nconst useRoutesAndResourcesState = (\n    initialState: RoutesAndResources\n): [\n    RoutesAndResources,\n    Dispatch<SetStateAction<RoutesAndResources>>,\n    (newRoutesAndResources: RoutesAndResources) => void,\n] => {\n    const [routesAndResources, setRoutesAndResources] = useState(initialState);\n\n    const mergeRoutesAndResources = useCallback(\n        (newRoutesAndResources: RoutesAndResources) => {\n            setRoutesAndResources(previous => ({\n                customRoutesWithLayout: previous.customRoutesWithLayout.concat(\n                    newRoutesAndResources.customRoutesWithLayout\n                ),\n                customRoutesWithoutLayout:\n                    previous.customRoutesWithoutLayout.concat(\n                        newRoutesAndResources.customRoutesWithoutLayout\n                    ),\n                resources: previous.resources.concat(\n                    newRoutesAndResources.resources\n                ),\n            }));\n        },\n        []\n    );\n\n    return [routesAndResources, setRoutesAndResources, mergeRoutesAndResources];\n};\n\n/**\n * A hook that register resources and unregister them when the calling component is unmounted.\n * @param resources: An array of Resource elements\n * @param permissions: The permissions\n */\nconst useRegisterResources = (\n    resources: (ReactElement & ResourceWithRegisterFunction)[],\n    permissions: any\n) => {\n    const { register, unregister } = useResourceDefinitionContext();\n\n    useEffect(() => {\n        resources.forEach(resource => {\n            if (\n                typeof (\n                    resource.type as unknown as ResourceWithRegisterFunction\n                ).registerResource === 'function'\n            ) {\n                const definition = (\n                    resource.type as unknown as ResourceWithRegisterFunction\n                ).registerResource(resource.props, permissions);\n                register(definition);\n            } else {\n                throw new Error(\n                    'When using a custom Resource element, it must have a static registerResource method accepting its props and returning a ResourceDefinition'\n                );\n            }\n        });\n        return () => {\n            resources.forEach(resource => {\n                if (\n                    typeof (\n                        resource.type as unknown as ResourceWithRegisterFunction\n                    ).registerResource === 'function'\n                ) {\n                    const definition = (\n                        resource.type as unknown as ResourceWithRegisterFunction\n                    ).registerResource(resource.props, permissions);\n                    unregister(definition);\n                } else {\n                    throw new Error(\n                        'When using a custom Resource element, it must have a static registerResource method accepting its props and returning a ResourceDefinition'\n                    );\n                }\n            });\n        };\n    }, [permissions, register, resources, unregister]);\n};\n\nconst getStatus = ({\n    children,\n    resources,\n    customRoutesWithLayout,\n    customRoutesWithoutLayout,\n}: {\n    children: AdminChildren;\n    resources: ReactNode[];\n    customRoutesWithLayout: ReactNode[];\n    customRoutesWithoutLayout: ReactNode[];\n}): AdminRouterStatus => {\n    return getSingleChildFunction(children)\n        ? 'loading'\n        : resources.length > 0 ||\n            customRoutesWithLayout.length > 0 ||\n            customRoutesWithoutLayout.length > 0\n          ? 'ready'\n          : 'empty';\n};\n\n/**\n * Inspect the children of a CoreAdminRouter to see if one of them is a function.\n * Throws an error if there are more than one function child.\n * Returns the function child if one was provided, or null otherwise.\n */\nconst getSingleChildFunction = (\n    children: AdminChildren\n): RenderResourcesFunction | null => {\n    const childrenArray = Array.isArray(children) ? children : [children];\n\n    const functionChildren = childrenArray.filter(\n        child => typeof child === 'function'\n    );\n\n    if (functionChildren.length > 1) {\n        throw new Error(\n            'You can only provide one function child to AdminRouter'\n        );\n    }\n\n    if (functionChildren.length === 0) {\n        return null;\n    }\n\n    return functionChildren[0] as RenderResourcesFunction;\n};\n\n/**\n * Inspect the children and return an object with the following keys:\n * - customRoutesWithLayout: an array of the custom routes to render inside the layout\n * - customRoutesWithoutLayout: an array of custom routes to render outside the layout\n * - resources: an array of resources elements\n */\nconst getRoutesAndResourceFromNodes = (\n    children: AdminChildren\n): RoutesAndResources => {\n    const customRoutesWithLayout: ReactNode[] = [];\n    const customRoutesWithoutLayout: ReactNode[] = [];\n    const resources: (ReactElement & ResourceWithRegisterFunction)[] = [];\n\n    if (typeof children === 'function') {\n        return {\n            customRoutesWithLayout: [],\n            customRoutesWithoutLayout: [],\n            resources: [],\n        };\n    }\n    // @ts-ignore\n    Children.forEach(children, element => {\n        if (!React.isValidElement(element)) {\n            // Ignore non-elements. This allows people to more easily inline\n            // conditionals in their route config.\n            return;\n        }\n        if (element.type === Fragment) {\n            const customRoutesFromFragment = getRoutesAndResourceFromNodes(\n                element.props.children\n            );\n            customRoutesWithLayout.push(\n                ...customRoutesFromFragment.customRoutesWithLayout\n            );\n            customRoutesWithoutLayout.push(\n                ...customRoutesFromFragment.customRoutesWithoutLayout\n            );\n            resources.push(...customRoutesFromFragment.resources);\n        }\n\n        if ((element.type as any).raName === 'CustomRoutes') {\n            const customRoutesElement =\n                element as ReactElement<CustomRoutesProps>;\n\n            if (customRoutesElement.props.noLayout) {\n                customRoutesWithoutLayout.push(\n                    customRoutesElement.props.children\n                );\n            } else {\n                customRoutesWithLayout.push(customRoutesElement.props.children);\n            }\n        } else if ((element.type as any).raName === 'Resource') {\n            resources.push(\n                element as ReactElement & ResourceWithRegisterFunction\n            );\n        }\n    });\n\n    return {\n        customRoutesWithLayout,\n        customRoutesWithoutLayout,\n        resources,\n    };\n};\n\ntype RoutesAndResources = {\n    customRoutesWithLayout: ReactNode[];\n    customRoutesWithoutLayout: ReactNode[];\n    resources: (ReactElement & ResourceWithRegisterFunction)[];\n};\n\ntype ResourceWithRegisterFunction = {\n    registerResource: (\n        props: ResourceProps,\n        permissions: any\n    ) => ResourceDefinition;\n};\n\ntype AdminRouterStatus = 'loading' | 'empty' | 'ready';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}