{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React from 'react';\nimport { ResourceContextProvider } from '../../core';\nimport { ChoicesContextProvider } from '../../form';\nimport { useReferenceInputController } from './useReferenceInputController';\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), and renders the child you passed\n * to which it passes the possible choices via a `ChoicesContext`.\n *\n * You must pass a child selection component to customize the way the reference\n * selector is displayed (e.g. using `<SelectInput>` or `<RadioButtonGroupInput>`\n * instead of `<AutocompleteInput>` ).\n *\n * Note that the child component should handle the error and loading cases as this base component does not.\n *\n * @example // using a SelectInput as selector\n * export const CommentEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceInputBase label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInputBase>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInputBase source=\"post_id\" reference=\"posts\" perPage={100}/>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInputBase\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}\n * >\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInputBase>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInputBase\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}\n * >\n *      <SelectInput optionText=\"title\" />\n * </ReferenceInputBase>\n *\n * The enclosed component may filter results. ReferenceInputBase create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport var ReferenceInputBase = function (props) {\n  var children = props.children,\n    reference = props.reference,\n    _a = props.sort,\n    sort = _a === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _a,\n    _b = props.filter,\n    filter = _b === void 0 ? {} : _b;\n  var controllerProps = useReferenceInputController(__assign(__assign({}, props), {\n    sort: sort,\n    filter: filter\n  }));\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ChoicesContextProvider, {\n    value: controllerProps\n  }, children));\n};","map":{"version":3,"names":["React","ResourceContextProvider","ChoicesContextProvider","useReferenceInputController","ReferenceInputBase","props","children","reference","_a","sort","field","order","_b","filter","controllerProps","__assign","createElement","value"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/input/ReferenceInputBase.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\n\nimport { ResourceContextProvider } from '../../core';\nimport { ChoicesContextProvider, InputProps } from '../../form';\nimport {\n    UseReferenceInputControllerParams,\n    useReferenceInputController,\n} from './useReferenceInputController';\n\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), and renders the child you passed\n * to which it passes the possible choices via a `ChoicesContext`.\n *\n * You must pass a child selection component to customize the way the reference\n * selector is displayed (e.g. using `<SelectInput>` or `<RadioButtonGroupInput>`\n * instead of `<AutocompleteInput>` ).\n *\n * Note that the child component should handle the error and loading cases as this base component does not.\n *\n * @example // using a SelectInput as selector\n * export const CommentEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <ReferenceInputBase label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInputBase>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInputBase source=\"post_id\" reference=\"posts\" perPage={100}/>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInputBase\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}\n * >\n *     <SelectInput optionText=\"title\" />\n * </ReferenceInputBase>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInputBase\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}\n * >\n *      <SelectInput optionText=\"title\" />\n * </ReferenceInputBase>\n *\n * The enclosed component may filter results. ReferenceInputBase create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport const ReferenceInputBase = (props: ReferenceInputBaseProps) => {\n    const {\n        children,\n        reference,\n        sort = { field: 'id', order: 'DESC' },\n        filter = {},\n    } = props;\n\n    const controllerProps = useReferenceInputController({\n        ...props,\n        sort,\n        filter,\n    });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ChoicesContextProvider value={controllerProps}>\n                {children}\n            </ChoicesContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceInputBaseProps\n    extends InputProps,\n        UseReferenceInputControllerParams {\n    children?: ReactNode;\n}\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAoB,MAAM,OAAO;AAExC,SAASC,uBAAuB,QAAQ,YAAY;AACpD,SAASC,sBAAsB,QAAoB,YAAY;AAC/D,SAEIC,2BAA2B,QACxB,+BAA+B;AAEtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,OAAO,IAAMC,kBAAkB,GAAG,SAAAA,CAACC,KAA8B;EAEzD,IAAAC,QAAQ,GAIRD,KAAK,CAAAC,QAJG;IACRC,SAAS,GAGTF,KAAK,CAAAE,SAHI;IACTC,EAAA,GAEAH,KAAK,CAAAI,IAFgC;IAArCA,IAAI,GAAAD,EAAA,cAAG;MAAEE,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAM,CAAE,GAAAH,EAAA;IACrCI,EAAA,GACAP,KAAK,CAAAQ,MADM;IAAXA,MAAM,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;EAGf,IAAME,eAAe,GAAGX,2BAA2B,CAAAY,QAAA,CAAAA,QAAA,KAC5CV,KAAK;IACRI,IAAI,EAAAA,IAAA;IACJI,MAAM,EAAAA;EAAA,GACR;EAEF,OACIb,KAAA,CAAAgB,aAAA,CAACf,uBAAuB;IAACgB,KAAK,EAAEV;EAAS,GACrCP,KAAA,CAAAgB,aAAA,CAACd,sBAAsB;IAACe,KAAK,EAAEH;EAAe,GACzCR,QAAQ,CACY,CACH;AAElC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}