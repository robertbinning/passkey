{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Stack } from '@mui/material';\nimport clsx from 'clsx';\nimport { FormGroupContextProvider, RecordContextProvider, SourceContextProvider, useRecordContext, useSourceContext, useTranslatableContext } from 'ra-core';\n/**\n * Default container for a group of translatable inputs inside a TranslatableInputs component.\n * @see TranslatableInputs\n */\nexport var TranslatableInputsTabContent = function (props) {\n  var _a;\n  var children = props.children,\n    _b = props.groupKey,\n    groupKey = _b === void 0 ? '' : _b,\n    locale = props.locale,\n    other = __rest(props, [\"children\", \"groupKey\", \"locale\"]);\n  var _c = useTranslatableContext(),\n    selectedLocale = _c.selectedLocale,\n    getRecordForLocale = _c.getRecordForLocale;\n  var parentSourceContext = useSourceContext();\n  var record = useRecordContext(props);\n  // The SourceContext will be read by children of TranslatableInputs to compute their composed source and label\n  //\n  // <TranslatableInputs locales={['en', 'fr']} /> => SourceContext is \"fr\"\n  //     <TextInput source=\"description\" /> => final source for this input will be \"description.fr\"\n  // </TranslatableInputs>\n  var sourceContext = useMemo(function () {\n    return {\n      getSource: function (source) {\n        if (!source) {\n          throw new Error('Children of TranslatableInputs must have a source');\n        }\n        return parentSourceContext.getSource(\"\".concat(source, \".\").concat(locale));\n      },\n      getLabel: function (source) {\n        return parentSourceContext.getLabel(source);\n      }\n    };\n  }, [locale, parentSourceContext]);\n  // As fields rely on the RecordContext to get their values and have no knowledge of the locale,\n  // we need to create a new record with the values for the current locale only\n  // Given the record { title: { en: 'title_en', fr: 'title_fr' } } and the locale 'fr',\n  // the record for the locale 'fr' will be { title: 'title_fr' }\n  var recordForLocale = useMemo(function () {\n    return getRecordForLocale(record, locale);\n  }, [getRecordForLocale, record, locale]);\n  return React.createElement(FormGroupContextProvider, {\n    name: \"\".concat(groupKey).concat(locale)\n  }, React.createElement(Root, __assign({\n    role: \"tabpanel\",\n    id: \"translatable-content-\".concat(groupKey).concat(locale),\n    \"aria-labelledby\": \"translatable-header-\".concat(groupKey).concat(locale),\n    className: clsx(TranslatableInputsTabContentClasses.root, (_a = {}, _a[TranslatableInputsTabContentClasses.hidden] = selectedLocale !== locale, _a))\n  }, other), React.createElement(SourceContextProvider, {\n    value: sourceContext\n  }, React.createElement(RecordContextProvider, {\n    value: recordForLocale\n  }, children))));\n};\nvar PREFIX = 'RaTranslatableInputsTabContent';\nexport var TranslatableInputsTabContentClasses = {\n  root: \"\".concat(PREFIX, \"-root\"),\n  hidden: \"\".concat(PREFIX, \"-hidden\")\n};\nvar Root = styled(Stack, {\n  name: PREFIX\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {}, _b[\"&.\".concat(TranslatableInputsTabContentClasses.root)] = {\n    flexGrow: 1,\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    borderRadius: 0,\n    borderBottomLeftRadius: theme.shape.borderRadius,\n    borderBottomRightRadius: theme.shape.borderRadius,\n    border: \"1px solid \".concat(theme.palette.divider),\n    borderTop: 0\n  }, _b[\"&.\".concat(TranslatableInputsTabContentClasses.hidden)] = {\n    display: 'none'\n  }, _b;\n});","map":{"version":3,"names":["React","useMemo","styled","Stack","clsx","FormGroupContextProvider","RecordContextProvider","SourceContextProvider","useRecordContext","useSourceContext","useTranslatableContext","TranslatableInputsTabContent","props","children","_b","groupKey","locale","other","__rest","_c","selectedLocale","getRecordForLocale","parentSourceContext","record","sourceContext","getSource","source","Error","concat","getLabel","recordForLocale","createElement","name","Root","__assign","role","id","className","TranslatableInputsTabContentClasses","root","_a","hidden","value","PREFIX","theme","flexGrow","paddingLeft","spacing","paddingRight","paddingTop","paddingBottom","borderRadius","borderBottomLeftRadius","shape","borderBottomRightRadius","border","palette","divider","borderTop","display"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/TranslatableInputsTabContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, ReactNode, useMemo } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Stack, StackProps } from '@mui/material';\nimport clsx from 'clsx';\nimport {\n    FormGroupContextProvider,\n    RaRecord,\n    RecordContextProvider,\n    SourceContextProvider,\n    useRecordContext,\n    useSourceContext,\n    useTranslatableContext,\n} from 'ra-core';\n\n/**\n * Default container for a group of translatable inputs inside a TranslatableInputs component.\n * @see TranslatableInputs\n */\nexport const TranslatableInputsTabContent = (\n    props: TranslatableInputsTabContentProps\n): ReactElement => {\n    const { children, groupKey = '', locale, ...other } = props;\n    const { selectedLocale, getRecordForLocale } = useTranslatableContext();\n    const parentSourceContext = useSourceContext();\n    const record = useRecordContext(props);\n\n    // The SourceContext will be read by children of TranslatableInputs to compute their composed source and label\n    //\n    // <TranslatableInputs locales={['en', 'fr']} /> => SourceContext is \"fr\"\n    //     <TextInput source=\"description\" /> => final source for this input will be \"description.fr\"\n    // </TranslatableInputs>\n    const sourceContext = useMemo(\n        () => ({\n            getSource: (source: string) => {\n                if (!source) {\n                    throw new Error(\n                        'Children of TranslatableInputs must have a source'\n                    );\n                }\n                return parentSourceContext.getSource(`${source}.${locale}`);\n            },\n            getLabel: (source: string) => {\n                return parentSourceContext.getLabel(source);\n            },\n        }),\n        [locale, parentSourceContext]\n    );\n\n    // As fields rely on the RecordContext to get their values and have no knowledge of the locale,\n    // we need to create a new record with the values for the current locale only\n    // Given the record { title: { en: 'title_en', fr: 'title_fr' } } and the locale 'fr',\n    // the record for the locale 'fr' will be { title: 'title_fr' }\n    const recordForLocale = useMemo(\n        () => getRecordForLocale(record, locale),\n        [getRecordForLocale, record, locale]\n    );\n\n    return (\n        <FormGroupContextProvider name={`${groupKey}${locale}`}>\n            <Root\n                role=\"tabpanel\"\n                id={`translatable-content-${groupKey}${locale}`}\n                aria-labelledby={`translatable-header-${groupKey}${locale}`}\n                className={clsx(TranslatableInputsTabContentClasses.root, {\n                    [TranslatableInputsTabContentClasses.hidden]:\n                        selectedLocale !== locale,\n                })}\n                {...other}\n            >\n                <SourceContextProvider value={sourceContext}>\n                    <RecordContextProvider value={recordForLocale}>\n                        {children}\n                    </RecordContextProvider>\n                </SourceContextProvider>\n            </Root>\n        </FormGroupContextProvider>\n    );\n};\n\nexport type TranslatableInputsTabContentProps<\n    RecordType extends RaRecord | Omit<RaRecord, 'id'> = any,\n> = StackProps & {\n    children: ReactNode;\n    groupKey?: string;\n    locale: string;\n    record?: RecordType;\n    resource?: string;\n};\n\nconst PREFIX = 'RaTranslatableInputsTabContent';\n\nexport const TranslatableInputsTabContentClasses = {\n    root: `${PREFIX}-root`,\n    hidden: `${PREFIX}-hidden`,\n};\n\nconst Root = styled(Stack, { name: PREFIX })(({ theme }) => ({\n    [`&.${TranslatableInputsTabContentClasses.root}`]: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        borderRadius: 0,\n        borderBottomLeftRadius: theme.shape.borderRadius,\n        borderBottomRightRadius: theme.shape.borderRadius,\n        border: `1px solid ${theme.palette.divider}`,\n        borderTop: 0,\n    },\n    [`&.${TranslatableInputsTabContentClasses.hidden}`]: {\n        display: 'none',\n    },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}