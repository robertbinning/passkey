{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\nimport { useEvent } from '../util';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n  var _a = useFormState(),\n    dirtyFields = _a.dirtyFields,\n    touchedFields = _a.touchedFields,\n    validatingFields = _a.validatingFields,\n    errors = _a.errors;\n  // dirtyFields, touchedFields and validatingFields are objects with keys being the field names\n  // Ex: { title: true }\n  // However, they are not correctly serialized when using JSON.stringify\n  // To avoid our effects to not be triggered when they should, we extract the keys and use that as a dependency\n  var dirtyFieldsNames = Object.keys(dirtyFields);\n  var touchedFieldsNames = Object.keys(touchedFields);\n  var validatingFieldsNames = Object.keys(validatingFields);\n  var formGroups = useFormGroups();\n  var _b = useState({\n      errors: undefined,\n      isDirty: false,\n      isTouched: false,\n      isValid: true,\n      isValidating: true\n    }),\n    state = _b[0],\n    setState = _b[1];\n  var updateGroupState = useEvent(function () {\n    if (!formGroups) return;\n    var fields = formGroups.getGroupFields(name);\n    var fieldStates = fields.map(function (field) {\n      return {\n        name: field,\n        error: get(errors, field, undefined),\n        isDirty: get(dirtyFields, field, false) !== false,\n        isValid: get(errors, field, undefined) == null,\n        isValidating: get(validatingFields, field, undefined) == null,\n        isTouched: get(touchedFields, field, false) !== false\n      };\n    }).filter(function (fieldState) {\n      return fieldState != undefined;\n    }); // eslint-disable-line\n    var newState = getFormGroupState(fieldStates);\n    setState(function (oldState) {\n      if (!isEqual(oldState, newState)) {\n        return newState;\n      }\n      return oldState;\n    });\n  });\n  useEffect(function () {\n    updateGroupState();\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(dirtyFieldsNames), errors,\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(touchedFieldsNames),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(validatingFieldsNames), updateGroupState, name, formGroups]);\n  useEffect(function () {\n    if (!formGroups) return;\n    // Whenever the group content changes (input are added or removed)\n    // we must update its state\n    var unsubscribe = formGroups.subscribe(name, function () {\n      updateGroupState();\n    });\n    return unsubscribe;\n  }, [formGroups, name, updateGroupState]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n    var newState = {\n      isDirty: acc.isDirty || fieldState.isDirty,\n      errors: errors,\n      isTouched: acc.isTouched || fieldState.isTouched,\n      isValid: acc.isValid && fieldState.isValid,\n      isValidating: acc.isValidating && fieldState.isValidating\n    };\n    return newState;\n  }, {\n    isDirty: false,\n    errors: undefined,\n    isValid: true,\n    isTouched: false,\n    isValidating: false\n  });\n};","map":{"version":3,"names":["useEffect","useState","get","isEqual","useFormState","useFormGroups","useEvent","useFormGroup","name","_a","dirtyFields","touchedFields","validatingFields","errors","dirtyFieldsNames","Object","keys","touchedFieldsNames","validatingFieldsNames","formGroups","_b","undefined","isDirty","isTouched","isValid","isValidating","state","setState","updateGroupState","fields","getGroupFields","fieldStates","map","field","error","filter","fieldState","newState","getFormGroupState","oldState","JSON","stringify","unsubscribe","subscribe","reduce","acc"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/form/useFormGroup.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\nimport { useEvent } from '../util';\n\ntype FieldState = {\n    name: string;\n    error?: any;\n    isDirty: boolean;\n    isTouched: boolean;\n    isValid: boolean;\n    isValidating: boolean;\n};\n\ntype FormGroupState = {\n    errors?: object;\n    isDirty: boolean;\n    isTouched: boolean;\n    isValid: boolean;\n    isValidating: boolean;\n};\n\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport const useFormGroup = (name: string): FormGroupState => {\n    const { dirtyFields, touchedFields, validatingFields, errors } =\n        useFormState();\n\n    // dirtyFields, touchedFields and validatingFields are objects with keys being the field names\n    // Ex: { title: true }\n    // However, they are not correctly serialized when using JSON.stringify\n    // To avoid our effects to not be triggered when they should, we extract the keys and use that as a dependency\n    const dirtyFieldsNames = Object.keys(dirtyFields);\n    const touchedFieldsNames = Object.keys(touchedFields);\n    const validatingFieldsNames = Object.keys(validatingFields);\n\n    const formGroups = useFormGroups();\n    const [state, setState] = useState<FormGroupState>({\n        errors: undefined,\n        isDirty: false,\n        isTouched: false,\n        isValid: true,\n        isValidating: true,\n    });\n\n    const updateGroupState = useEvent(() => {\n        if (!formGroups) return;\n        const fields = formGroups.getGroupFields(name);\n        const fieldStates = fields\n            .map<FieldState>(field => {\n                return {\n                    name: field,\n                    error: get(errors, field, undefined),\n                    isDirty: get(dirtyFields, field, false) !== false,\n                    isValid: get(errors, field, undefined) == null,\n                    isValidating:\n                        get(validatingFields, field, undefined) == null,\n                    isTouched: get(touchedFields, field, false) !== false,\n                };\n            })\n            .filter(fieldState => fieldState != undefined); // eslint-disable-line\n\n        const newState = getFormGroupState(fieldStates);\n        setState(oldState => {\n            if (!isEqual(oldState, newState)) {\n                return newState;\n            }\n\n            return oldState;\n        });\n    });\n\n    useEffect(\n        () => {\n            updateGroupState();\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            JSON.stringify(dirtyFieldsNames),\n            errors,\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            JSON.stringify(touchedFieldsNames),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            JSON.stringify(validatingFieldsNames),\n            updateGroupState,\n            name,\n            formGroups,\n        ]\n    );\n\n    useEffect(() => {\n        if (!formGroups) return;\n        // Whenever the group content changes (input are added or removed)\n        // we must update its state\n        const unsubscribe = formGroups.subscribe(name, () => {\n            updateGroupState();\n        });\n        return unsubscribe;\n    }, [formGroups, name, updateGroupState]);\n\n    return state;\n};\n\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport const getFormGroupState = (\n    fieldStates: FieldState[]\n): FormGroupState => {\n    return fieldStates.reduce<FormGroupState>(\n        (acc, fieldState) => {\n            let errors = acc.errors || {};\n\n            if (fieldState.error) {\n                errors[fieldState.name] = fieldState.error;\n            }\n\n            const newState = {\n                isDirty: acc.isDirty || fieldState.isDirty,\n                errors,\n                isTouched: acc.isTouched || fieldState.isTouched,\n                isValid: acc.isValid && fieldState.isValid,\n                isValidating: acc.isValidating && fieldState.isValidating,\n            };\n\n            return newState;\n        },\n        {\n            isDirty: false,\n            errors: undefined,\n            isValid: true,\n            isTouched: false,\n            isValidating: false,\n        }\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}