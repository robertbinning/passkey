{"ast":null,"code":"import React from 'react';\nimport { Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useTranslate } from 'ra-core';\nimport { useThemesContext, useTheme } from '../theme';\n/**\n * Button toggling the theme (light or dark).\n *\n * Enabled by default in the <AppBar> when the <Admin> component has a darkMode.\n *\n * @example\n * import { AppBar, ToggleThemeButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar toolbar={<ToggleThemeButton />} />\n * );\n *\n * const MyLayout = ({ children }) => (\n *     <Layout appBar={MyAppBar}>\n *         {children}\n *     </Layout>\n * );\n */\nexport var ToggleThemeButton = function () {\n  var translate = useTranslate();\n  var _a = useThemesContext(),\n    darkTheme = _a.darkTheme,\n    defaultTheme = _a.defaultTheme;\n  var prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n    noSsr: true\n  });\n  var _b = useTheme(defaultTheme || (prefersDarkMode && darkTheme ? 'dark' : 'light')),\n    theme = _b[0],\n    setTheme = _b[1];\n  var handleTogglePaletteType = function () {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n  var toggleThemeTitle = translate('ra.action.toggle_theme', {\n    _: 'Toggle Theme'\n  });\n  return React.createElement(Tooltip, {\n    title: toggleThemeTitle,\n    enterDelay: 300\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    onClick: handleTogglePaletteType,\n    \"aria-label\": toggleThemeTitle\n  }, theme === 'dark' ? React.createElement(Brightness7Icon, null) : React.createElement(Brightness4Icon, null)));\n};","map":{"version":3,"names":["React","Tooltip","IconButton","useMediaQuery","Brightness4Icon","Brightness7Icon","useTranslate","useThemesContext","useTheme","ToggleThemeButton","translate","_a","darkTheme","defaultTheme","prefersDarkMode","noSsr","_b","theme","setTheme","handleTogglePaletteType","toggleThemeTitle","_","createElement","title","enterDelay","color","onClick"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/button/ToggleThemeButton.tsx"],"sourcesContent":["import React from 'react';\nimport { Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useTranslate } from 'ra-core';\n\nimport { useThemesContext, useTheme } from '../theme';\n\n/**\n * Button toggling the theme (light or dark).\n *\n * Enabled by default in the <AppBar> when the <Admin> component has a darkMode.\n *\n * @example\n * import { AppBar, ToggleThemeButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar toolbar={<ToggleThemeButton />} />\n * );\n *\n * const MyLayout = ({ children }) => (\n *     <Layout appBar={MyAppBar}>\n *         {children}\n *     </Layout>\n * );\n */\nexport const ToggleThemeButton = () => {\n    const translate = useTranslate();\n    const { darkTheme, defaultTheme } = useThemesContext();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n        noSsr: true,\n    });\n    const [theme, setTheme] = useTheme(\n        defaultTheme || (prefersDarkMode && darkTheme ? 'dark' : 'light')\n    );\n\n    const handleTogglePaletteType = (): void => {\n        setTheme(theme === 'dark' ? 'light' : 'dark');\n    };\n    const toggleThemeTitle = translate('ra.action.toggle_theme', {\n        _: 'Toggle Theme',\n    });\n\n    return (\n        <Tooltip title={toggleThemeTitle} enterDelay={300}>\n            <IconButton\n                color=\"inherit\"\n                onClick={handleTogglePaletteType}\n                aria-label={toggleThemeTitle}\n            >\n                {theme === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n            </IconButton>\n        </Tooltip>\n    );\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,UAAU,EAAEC,aAAa,QAAQ,eAAe;AAClE,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,OAAOC,eAAe,MAAM,iCAAiC;AAC7D,SAASC,YAAY,QAAQ,SAAS;AAEtC,SAASC,gBAAgB,EAAEC,QAAQ,QAAQ,UAAU;AAErD;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAMC,iBAAiB,GAAG,SAAAA,CAAA;EAC7B,IAAMC,SAAS,GAAGJ,YAAY,EAAE;EAC1B,IAAAK,EAAA,GAA8BJ,gBAAgB,EAAE;IAA9CK,SAAS,GAAAD,EAAA,CAAAC,SAAA;IAAEC,YAAY,GAAAF,EAAA,CAAAE,YAAuB;EACtD,IAAMC,eAAe,GAAGX,aAAa,CAAC,8BAA8B,EAAE;IAClEY,KAAK,EAAE;GACV,CAAC;EACI,IAAAC,EAAA,GAAoBR,QAAQ,CAC9BK,YAAY,KAAKC,eAAe,IAAIF,SAAS,GAAG,MAAM,GAAG,OAAO,CAAC,CACpE;IAFMK,KAAK,GAAAD,EAAA;IAAEE,QAAQ,GAAAF,EAAA,GAErB;EAED,IAAMG,uBAAuB,GAAG,SAAAA,CAAA;IAC5BD,QAAQ,CAACD,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;EACjD,CAAC;EACD,IAAMG,gBAAgB,GAAGV,SAAS,CAAC,wBAAwB,EAAE;IACzDW,CAAC,EAAE;GACN,CAAC;EAEF,OACIrB,KAAA,CAAAsB,aAAA,CAACrB,OAAO;IAACsB,KAAK,EAAEH,gBAAgB;IAAEI,UAAU,EAAE;EAAG,GAC7CxB,KAAA,CAAAsB,aAAA,CAACpB,UAAU;IACPuB,KAAK,EAAC,SAAS;IACfC,OAAO,EAAEP,uBAAuB;IAAA,cACpBC;EAAgB,GAE3BH,KAAK,KAAK,MAAM,GAAGjB,KAAA,CAAAsB,aAAA,CAACjB,eAAe,OAAG,GAAGL,KAAA,CAAAsB,aAAA,CAAClB,eAAe,OAAG,CACpD,CACP;AAElB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}