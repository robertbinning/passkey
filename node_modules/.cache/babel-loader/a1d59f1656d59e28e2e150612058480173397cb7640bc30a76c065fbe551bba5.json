{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store the result of the useEditController() hook.\n *\n * Use the useEditContext() hook to read the context. That's what the Edit components do in react-admin.\n *\n * @example\n *\n * import { useEditController, EditContextProvider } from 'ra-core';\n *\n * const Edit = props => {\n *     const controllerProps = useEditController(props);\n *     return (\n *         <EditContextProvider value={controllerProps}>\n *             ...\n *         </EditContextProvider>\n *     );\n * };\n */\nexport var EditContext = createContext(null);\nEditContext.displayName = 'EditContext';","map":{"version":3,"names":["createContext","EditContext","displayName"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/edit/EditContext.tsx"],"sourcesContent":["import { createContext } from 'react';\nimport { EditControllerResult } from './useEditController';\n\n/**\n * Context to store the result of the useEditController() hook.\n *\n * Use the useEditContext() hook to read the context. That's what the Edit components do in react-admin.\n *\n * @example\n *\n * import { useEditController, EditContextProvider } from 'ra-core';\n *\n * const Edit = props => {\n *     const controllerProps = useEditController(props);\n *     return (\n *         <EditContextProvider value={controllerProps}>\n *             ...\n *         </EditContextProvider>\n *     );\n * };\n */\nexport const EditContext = createContext<EditControllerResult | null>(null);\n\nEditContext.displayName = 'EditContext';\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAGrC;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAMC,WAAW,GAAGD,aAAa,CAA8B,IAAI,CAAC;AAE3EC,WAAW,CAACC,WAAW,GAAG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}