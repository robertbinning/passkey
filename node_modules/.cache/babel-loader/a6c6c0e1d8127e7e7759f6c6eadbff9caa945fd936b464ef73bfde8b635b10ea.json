{"ast":null,"code":"import { transform } from 'inflection';\n/**\n * Returns an array of arguments to use with the translate function for the label of a field.\n * The label will be computed from the resource and source props.\n *\n * Usage:\n *  <span>\n *      {translate(...getFieldLabelTranslationArgs({ label, resource, source }))}\n *  </span>\n *\n * @see useTranslateLabel for a ready-to-use hook\n */\nexport var getFieldLabelTranslationArgs = function (options) {\n  if (!options) return [''];\n  var label = options.label,\n    defaultLabel = options.defaultLabel,\n    resource = options.resource,\n    resourceFromContext = options.resourceFromContext,\n    source = options.source;\n  if (typeof label !== 'undefined') return [label, {\n    _: label\n  }];\n  if (typeof source === 'undefined') return [''];\n  var _a = getSourceParts(source),\n    sourceWithoutDigits = _a.sourceWithoutDigits,\n    sourceSuffix = _a.sourceSuffix;\n  var defaultLabelTranslation = transform(sourceSuffix.replace(/\\./g, ' '), ['underscore', 'humanize']);\n  if (resource) {\n    return [getResourceFieldLabelKey(resource, sourceWithoutDigits), {\n      _: defaultLabelTranslation\n    }];\n  }\n  if (defaultLabel) {\n    return [defaultLabel, {\n      _: defaultLabelTranslation\n    }];\n  }\n  return [getResourceFieldLabelKey(resourceFromContext || 'undefined', sourceWithoutDigits), {\n    _: defaultLabelTranslation\n  }];\n};\nexport default getFieldLabelTranslationArgs;\nexport var getResourceFieldLabelKey = function (resource, source) {\n  return \"resources.\".concat(resource, \".fields.\").concat(source);\n};\n/**\n * Uses the source string to guess a translation message and a default label.\n *\n * @example\n * getSourceParts('pictures') // { sourceWithoutDigits: 'pictures', sourceSuffix: 'pictures' }\n * getSourceParts('pictures.url') // { sourceWithoutDigits: 'pictures.url', sourceSuffix: 'pictures.url' }\n * getSourceParts('pictures.0.url') // { sourceWithoutDigits: 'pictures.url', sourceSuffix: 'url' }\n * getSourceParts('pictures.12.urls.5.protocol') // { sourceWithoutDigits: 'pictures.urls.protocol', sourceSuffix: 'protocol' }\n */\nvar getSourceParts = function (source) {\n  // remove digits, e.g. 'book.authors.2.categories.3.identifier.name' => 'book.authors.categories.identifier.name'\n  var sourceWithoutDigits = source.replace(/\\.\\d+\\./g, '.');\n  // get final part, e.g. 'book.authors.2.categories.3.identifier.name' => 'identifier.name'\n  // we're not using a regexp here to avoid code scanning alert \"Polynomial regular expression used on uncontrolled data\"\n  var parts = source.split('.');\n  var lastPartWithDigits;\n  parts.forEach(function (part, index) {\n    if (onlyDigits(part)) {\n      lastPartWithDigits = index;\n    }\n  });\n  var sourceSuffix = lastPartWithDigits != null ? parts.slice(lastPartWithDigits + 1).join('.') : source;\n  return {\n    sourceWithoutDigits: sourceWithoutDigits,\n    sourceSuffix: sourceSuffix\n  };\n};\n// 48 and 57 are the char codes for \"0\" and \"9\", respectively\nvar onlyDigits = function (s) {\n  for (var i = s.length - 1; i >= 0; i--) {\n    var d = s.charCodeAt(i);\n    if (d < 48 || d > 57) return false;\n  }\n  return true;\n};","map":{"version":3,"names":["transform","getFieldLabelTranslationArgs","options","label","defaultLabel","resource","resourceFromContext","source","_","_a","getSourceParts","sourceWithoutDigits","sourceSuffix","defaultLabelTranslation","replace","getResourceFieldLabelKey","concat","parts","split","lastPartWithDigits","forEach","part","index","onlyDigits","slice","join","s","i","length","d","charCodeAt"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/util/getFieldLabelTranslationArgs.ts"],"sourcesContent":["import { transform } from 'inflection';\n\ninterface Args {\n    label?: string;\n    defaultLabel?: string;\n    resource?: string;\n    resourceFromContext?: string;\n    source?: string;\n}\n\ntype TranslationArguments = [string, any?];\n\n/**\n * Returns an array of arguments to use with the translate function for the label of a field.\n * The label will be computed from the resource and source props.\n *\n * Usage:\n *  <span>\n *      {translate(...getFieldLabelTranslationArgs({ label, resource, source }))}\n *  </span>\n *\n * @see useTranslateLabel for a ready-to-use hook\n */\nexport const getFieldLabelTranslationArgs = (\n    options?: Args\n): TranslationArguments => {\n    if (!options) return [''];\n    const { label, defaultLabel, resource, resourceFromContext, source } =\n        options;\n\n    if (typeof label !== 'undefined') return [label, { _: label }];\n\n    if (typeof source === 'undefined') return [''];\n\n    const { sourceWithoutDigits, sourceSuffix } = getSourceParts(source);\n\n    const defaultLabelTranslation = transform(\n        sourceSuffix.replace(/\\./g, ' '),\n        ['underscore', 'humanize']\n    );\n\n    if (resource) {\n        return [\n            getResourceFieldLabelKey(resource, sourceWithoutDigits),\n            { _: defaultLabelTranslation },\n        ];\n    }\n\n    if (defaultLabel) {\n        return [defaultLabel, { _: defaultLabelTranslation }];\n    }\n\n    return [\n        getResourceFieldLabelKey(\n            resourceFromContext || 'undefined',\n            sourceWithoutDigits\n        ),\n        { _: defaultLabelTranslation },\n    ];\n};\n\nexport default getFieldLabelTranslationArgs;\n\nexport const getResourceFieldLabelKey = (resource: string, source: string) =>\n    `resources.${resource}.fields.${source}`;\n\n/**\n * Uses the source string to guess a translation message and a default label.\n *\n * @example\n * getSourceParts('pictures') // { sourceWithoutDigits: 'pictures', sourceSuffix: 'pictures' }\n * getSourceParts('pictures.url') // { sourceWithoutDigits: 'pictures.url', sourceSuffix: 'pictures.url' }\n * getSourceParts('pictures.0.url') // { sourceWithoutDigits: 'pictures.url', sourceSuffix: 'url' }\n * getSourceParts('pictures.12.urls.5.protocol') // { sourceWithoutDigits: 'pictures.urls.protocol', sourceSuffix: 'protocol' }\n */\nconst getSourceParts = (source: string) => {\n    // remove digits, e.g. 'book.authors.2.categories.3.identifier.name' => 'book.authors.categories.identifier.name'\n    const sourceWithoutDigits = source.replace(/\\.\\d+\\./g, '.');\n    // get final part, e.g. 'book.authors.2.categories.3.identifier.name' => 'identifier.name'\n    // we're not using a regexp here to avoid code scanning alert \"Polynomial regular expression used on uncontrolled data\"\n    const parts = source.split('.');\n    let lastPartWithDigits;\n    parts.forEach((part, index) => {\n        if (onlyDigits(part)) {\n            lastPartWithDigits = index;\n        }\n    });\n    const sourceSuffix =\n        lastPartWithDigits != null\n            ? parts.slice(lastPartWithDigits + 1).join('.')\n            : source;\n\n    return { sourceWithoutDigits, sourceSuffix };\n};\n\n// 48 and 57 are the char codes for \"0\" and \"9\", respectively\nconst onlyDigits = s => {\n    for (let i = s.length - 1; i >= 0; i--) {\n        const d = s.charCodeAt(i);\n        if (d < 48 || d > 57) return false;\n    }\n    return true;\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAYtC;;;;;;;;;;;AAWA,OAAO,IAAMC,4BAA4B,GAAG,SAAAA,CACxCC,OAAc;EAEd,IAAI,CAACA,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC;EACjB,IAAAC,KAAK,GACTD,OAAO,CAAAC,KADE;IAAEC,YAAY,GACvBF,OAAO,CAAAE,YADgB;IAAEC,QAAQ,GACjCH,OAAO,CAAAG,QAD0B;IAAEC,mBAAmB,GACtDJ,OAAO,CAAAI,mBAD+C;IAAEC,MAAM,GAC9DL,OAAO,CAAAK,MADuD;EAGlE,IAAI,OAAOJ,KAAK,KAAK,WAAW,EAAE,OAAO,CAACA,KAAK,EAAE;IAAEK,CAAC,EAAEL;EAAK,CAAE,CAAC;EAE9D,IAAI,OAAOI,MAAM,KAAK,WAAW,EAAE,OAAO,CAAC,EAAE,CAAC;EAExC,IAAAE,EAAA,GAAwCC,cAAc,CAACH,MAAM,CAAC;IAA5DI,mBAAmB,GAAAF,EAAA,CAAAE,mBAAA;IAAEC,YAAY,GAAAH,EAAA,CAAAG,YAA2B;EAEpE,IAAMC,uBAAuB,GAAGb,SAAS,CACrCY,YAAY,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAChC,CAAC,YAAY,EAAE,UAAU,CAAC,CAC7B;EAED,IAAIT,QAAQ,EAAE;IACV,OAAO,CACHU,wBAAwB,CAACV,QAAQ,EAAEM,mBAAmB,CAAC,EACvD;MAAEH,CAAC,EAAEK;IAAuB,CAAE,CACjC;;EAGL,IAAIT,YAAY,EAAE;IACd,OAAO,CAACA,YAAY,EAAE;MAAEI,CAAC,EAAEK;IAAuB,CAAE,CAAC;;EAGzD,OAAO,CACHE,wBAAwB,CACpBT,mBAAmB,IAAI,WAAW,EAClCK,mBAAmB,CACtB,EACD;IAAEH,CAAC,EAAEK;EAAuB,CAAE,CACjC;AACL,CAAC;AAED,eAAeZ,4BAA4B;AAE3C,OAAO,IAAMc,wBAAwB,GAAG,SAAAA,CAACV,QAAgB,EAAEE,MAAc;EACrE,oBAAAS,MAAA,CAAaX,QAAQ,cAAAW,MAAA,CAAWT,MAAM,CAAE;AAAxC,CAAwC;AAE5C;;;;;;;;;AASA,IAAMG,cAAc,GAAG,SAAAA,CAACH,MAAc;EAClC;EACA,IAAMI,mBAAmB,GAAGJ,MAAM,CAACO,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;EAC3D;EACA;EACA,IAAMG,KAAK,GAAGV,MAAM,CAACW,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAIC,kBAAkB;EACtBF,KAAK,CAACG,OAAO,CAAC,UAACC,IAAI,EAAEC,KAAK;IACtB,IAAIC,UAAU,CAACF,IAAI,CAAC,EAAE;MAClBF,kBAAkB,GAAGG,KAAK;;EAElC,CAAC,CAAC;EACF,IAAMV,YAAY,GACdO,kBAAkB,IAAI,IAAI,GACpBF,KAAK,CAACO,KAAK,CAACL,kBAAkB,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC,GAC7ClB,MAAM;EAEhB,OAAO;IAAEI,mBAAmB,EAAAA,mBAAA;IAAEC,YAAY,EAAAA;EAAA,CAAE;AAChD,CAAC;AAED;AACA,IAAMW,UAAU,GAAG,SAAAA,CAAAG,CAAC;EAChB,KAAK,IAAIC,CAAC,GAAGD,CAAC,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACpC,IAAME,CAAC,GAAGH,CAAC,CAACI,UAAU,CAACH,CAAC,CAAC;IACzB,IAAIE,CAAC,GAAG,EAAE,IAAIA,CAAC,GAAG,EAAE,EAAE,OAAO,KAAK;;EAEtC,OAAO,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}