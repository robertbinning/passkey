{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Fragment } from 'react';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport { alpha, styled } from '@mui/material/styles';\nimport { useDeleteMany, useListContext, useNotify, useRefresh, useResourceContext, useTranslate, useSafeSetState } from 'ra-core';\nimport { Confirm } from '../layout';\nimport { Button } from './Button';\nimport { humanize, inflect } from 'inflection';\nexport var BulkDeleteWithConfirmButton = function (props) {\n  var _a = props.confirmTitle,\n    confirmTitle = _a === void 0 ? 'ra.message.bulk_delete_title' : _a,\n    _b = props.confirmContent,\n    confirmContent = _b === void 0 ? 'ra.message.bulk_delete_content' : _b,\n    _c = props.confirmColor,\n    confirmColor = _c === void 0 ? 'primary' : _c,\n    _d = props.icon,\n    icon = _d === void 0 ? defaultIcon : _d,\n    _e = props.label,\n    label = _e === void 0 ? 'ra.action.delete' : _e,\n    _f = props.mutationMode,\n    mutationMode = _f === void 0 ? 'pessimistic' : _f,\n    _g = props.mutationOptions,\n    mutationOptions = _g === void 0 ? {} : _g,\n    onClick = props.onClick,\n    rest = __rest(props, [\"confirmTitle\", \"confirmContent\", \"confirmColor\", \"icon\", \"label\", \"mutationMode\", \"mutationOptions\", \"onClick\"]);\n  var mutationMeta = mutationOptions.meta,\n    otherMutationOptions = __rest(mutationOptions, [\"meta\"]);\n  var _h = useListContext(),\n    selectedIds = _h.selectedIds,\n    onUnselectItems = _h.onUnselectItems;\n  var _j = useSafeSetState(false),\n    isOpen = _j[0],\n    setOpen = _j[1];\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var refresh = useRefresh();\n  var translate = useTranslate();\n  var _k = useDeleteMany(resource, {\n      ids: selectedIds,\n      meta: mutationMeta\n    }, __assign({\n      onSuccess: function () {\n        refresh();\n        notify('ra.notification.deleted', {\n          type: 'info',\n          messageArgs: {\n            smart_count: selectedIds.length\n          },\n          undoable: mutationMode === 'undoable'\n        });\n        onUnselectItems();\n        setOpen(false);\n      },\n      onError: function (error) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n        setOpen(false);\n      },\n      mutationMode: mutationMode\n    }, otherMutationOptions)),\n    deleteMany = _k[0],\n    isPending = _k[1].isPending;\n  var handleClick = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n  var handleDialogClose = function () {\n    setOpen(false);\n  };\n  var handleDelete = function (e) {\n    deleteMany();\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n  return React.createElement(Fragment, null, React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon), React.createElement(Confirm, {\n    isOpen: isOpen,\n    loading: isPending,\n    title: confirmTitle,\n    content: confirmContent,\n    confirmColor: confirmColor,\n    translateOptions: {\n      smart_count: selectedIds.length,\n      name: translate(\"resources.\".concat(resource, \".forcedCaseName\"), {\n        smart_count: selectedIds.length,\n        _: humanize(translate(\"resources.\".concat(resource, \".name\"), {\n          smart_count: selectedIds.length,\n          _: resource ? inflect(resource, selectedIds.length) : undefined\n        }), true)\n      })\n    },\n    onConfirm: handleDelete,\n    onClose: handleDialogClose\n  }));\n};\nvar sanitizeRestProps = function (_a) {\n  var classes = _a.classes,\n    label = _a.label,\n    rest = __rest(_a, [\"classes\", \"label\"]);\n  return rest;\n};\nvar PREFIX = 'RaBulkDeleteWithConfirmButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.error.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});\nvar defaultIcon = React.createElement(ActionDelete, null);","map":{"version":3,"names":["React","Fragment","ActionDelete","alpha","styled","useDeleteMany","useListContext","useNotify","useRefresh","useResourceContext","useTranslate","useSafeSetState","Confirm","Button","humanize","inflect","BulkDeleteWithConfirmButton","props","_a","confirmTitle","_b","confirmContent","_c","confirmColor","_d","icon","defaultIcon","_e","label","_f","mutationMode","_g","mutationOptions","onClick","rest","__rest","mutationMeta","meta","otherMutationOptions","_h","selectedIds","onUnselectItems","_j","isOpen","setOpen","notify","resource","refresh","translate","_k","ids","__assign","onSuccess","type","messageArgs","smart_count","length","undoable","onError","error","message","_","undefined","deleteMany","isPending","handleClick","e","stopPropagation","handleDialogClose","handleDelete","createElement","StyledButton","sanitizeRestProps","loading","title","content","translateOptions","name","concat","onConfirm","onClose","classes","PREFIX","overridesResolver","styles","root","theme","color","palette","main","backgroundColor"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/button/BulkDeleteWithConfirmButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Fragment, ReactElement } from 'react';\nimport ActionDelete from '@mui/icons-material/Delete';\n\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    MutationMode,\n    useDeleteMany,\n    useListContext,\n    useNotify,\n    useRefresh,\n    useResourceContext,\n    useTranslate,\n    useSafeSetState,\n    RaRecord,\n    DeleteManyParams,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport { humanize, inflect } from 'inflection';\n\nexport const BulkDeleteWithConfirmButton = (\n    props: BulkDeleteWithConfirmButtonProps\n) => {\n    const {\n        confirmTitle = 'ra.message.bulk_delete_title',\n        confirmContent = 'ra.message.bulk_delete_content',\n        confirmColor = 'primary',\n        icon = defaultIcon,\n        label = 'ra.action.delete',\n        mutationMode = 'pessimistic',\n        mutationOptions = {},\n        onClick,\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const { selectedIds, onUnselectItems } = useListContext();\n    const [isOpen, setOpen] = useSafeSetState(false);\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const [deleteMany, { isPending }] = useDeleteMany(\n        resource,\n        { ids: selectedIds, meta: mutationMeta },\n        {\n            onSuccess: () => {\n                refresh();\n                notify('ra.notification.deleted', {\n                    type: 'info',\n                    messageArgs: { smart_count: selectedIds.length },\n                    undoable: mutationMode === 'undoable',\n                });\n                onUnselectItems();\n                setOpen(false);\n            },\n            onError: (error: Error) => {\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                      ? error.message\n                                      : undefined,\n                        },\n                    }\n                );\n                setOpen(false);\n            },\n            mutationMode,\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleDelete = e => {\n        deleteMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isPending}\n                title={confirmTitle}\n                content={confirmContent}\n                confirmColor={confirmColor}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: resource\n                                    ? inflect(resource, selectedIds.length)\n                                    : undefined,\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleDelete}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    classes,\n    label,\n    ...rest\n}: Omit<\n    BulkDeleteWithConfirmButtonProps,\n    'resource' | 'icon' | 'mutationMode'\n>) => rest;\n\nexport interface BulkDeleteWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: React.ReactNode;\n    confirmColor?: 'primary' | 'warning';\n    icon?: ReactElement;\n    mutationMode: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteManyParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaBulkDeleteWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionDelete />;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}