{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useChoices, useFieldValue, useTranslate } from 'ra-core';\nimport { Typography } from '@mui/material';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { genericMemo } from './genericMemo';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nvar SelectFieldImpl = function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    choices = props.choices,\n    _a = props.optionValue,\n    optionValue = _a === void 0 ? 'id' : _a,\n    _b = props.optionText,\n    optionText = _b === void 0 ? 'name' : _b,\n    _c = props.translateChoice,\n    translateChoice = _c === void 0 ? true : _c,\n    rest = __rest(props, [\"className\", \"emptyText\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n  var value = useFieldValue(props);\n  var _d = useChoices({\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice\n    }),\n    getChoiceText = _d.getChoiceText,\n    getChoiceValue = _d.getChoiceValue;\n  var translate = useTranslate();\n  var choice = choices ? choices.find(function (choice) {\n    return getChoiceValue(choice) === value;\n  }) : null;\n  if (!choice) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var choiceText = getChoiceText(choice);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), choiceText);\n};\nSelectFieldImpl.displayName = 'SelectFieldImpl';\nexport var SelectField = genericMemo(SelectFieldImpl);","map":{"version":3,"names":["React","useChoices","useFieldValue","useTranslate","Typography","sanitizeFieldRestProps","genericMemo","SelectFieldImpl","props","className","emptyText","choices","_a","optionValue","_b","optionText","_c","translateChoice","rest","__rest","value","_d","getChoiceText","getChoiceValue","translate","choice","find","createElement","__assign","component","variant","_","choiceText","displayName","SelectField"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/SelectField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ChoicesProps, useChoices, useFieldValue, useTranslate } from 'ra-core';\nimport { Typography, TypographyProps } from '@mui/material';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nconst SelectFieldImpl = <\n    RecordType extends Record<string, any> = Record<string, any>,\n>(\n    props: SelectFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        choices,\n        optionValue = 'id',\n        optionText = 'name',\n        translateChoice = true,\n        ...rest\n    } = props;\n    const value = useFieldValue(props);\n\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n    const translate = useTranslate();\n\n    const choice = choices\n        ? choices.find(choice => getChoiceValue(choice) === value)\n        : null;\n\n    if (!choice) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    let choiceText = getChoiceText(choice);\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {choiceText}\n        </Typography>\n    );\n};\n\nSelectFieldImpl.displayName = 'SelectFieldImpl';\n\nexport const SelectField = genericMemo(SelectFieldImpl);\n\nexport interface SelectFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n> extends ChoicesProps,\n        FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAuBC,UAAU,EAAEC,aAAa,EAAEC,YAAY,QAAQ,SAAS;AAC/E,SAASC,UAAU,QAAyB,eAAe;AAE3D,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,IAAMC,eAAe,GAAG,SAAAA,CAGpBC,KAAmC;EAG/B,IAAAC,SAAS,GAOTD,KAAK,CAAAC,SAPI;IACTC,SAAS,GAMTF,KAAK,CAAAE,SANI;IACTC,OAAO,GAKPH,KAAK,CAAAG,OALE;IACPC,EAAA,GAIAJ,KAAK,CAAAK,WAJa;IAAlBA,WAAW,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAClBE,EAAA,GAGAN,KAAK,CAAAO,UAHc;IAAnBA,UAAU,GAAAD,EAAA,cAAG,MAAM,GAAAA,EAAA;IACnBE,EAAA,GAEAR,KAAK,CAAAS,eAFiB;IAAtBA,eAAe,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACnBE,IAAI,GAAAC,MAAA,CACPX,KAAK,EARH,qFAQL,CADU;EAEX,IAAMY,KAAK,GAAGlB,aAAa,CAACM,KAAK,CAAC;EAE5B,IAAAa,EAAA,GAAoCpB,UAAU,CAAC;MACjDc,UAAU,EAAAA,UAAA;MACVF,WAAW,EAAAA,WAAA;MACXI,eAAe,EAAAA;KAClB,CAAC;IAJMK,aAAa,GAAAD,EAAA,CAAAC,aAAA;IAAEC,cAAc,GAAAF,EAAA,CAAAE,cAInC;EACF,IAAMC,SAAS,GAAGrB,YAAY,EAAE;EAEhC,IAAMsB,MAAM,GAAGd,OAAO,GAChBA,OAAO,CAACe,IAAI,CAAC,UAAAD,MAAM;IAAI,OAAAF,cAAc,CAACE,MAAM,CAAC,KAAKL,KAAK;EAAhC,CAAgC,CAAC,GACxD,IAAI;EAEV,IAAI,CAACK,MAAM,EAAE;IACT,OAAOf,SAAS,GACZV,KAAA,CAAA2B,aAAA,CAACvB,UAAU,EAAAwB,QAAA;MACPC,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfrB,SAAS,EAAEA;IAAS,GAChBJ,sBAAsB,CAACa,IAAI,CAAC,GAE/BR,SAAS,IAAIc,SAAS,CAACd,SAAS,EAAE;MAAEqB,CAAC,EAAErB;IAAS,CAAE,CAAC,CAC3C,GACb,IAAI;;EAGZ,IAAIsB,UAAU,GAAGV,aAAa,CAACG,MAAM,CAAC;EAEtC,OACIzB,KAAA,CAAA2B,aAAA,CAACvB,UAAU,EAAAwB,QAAA;IACPC,SAAS,EAAC,MAAM;IAChBC,OAAO,EAAC,OAAO;IACfrB,SAAS,EAAEA;EAAS,GAChBJ,sBAAsB,CAACa,IAAI,CAAC,GAE/Bc,UAAU,CACF;AAErB,CAAC;AAEDzB,eAAe,CAAC0B,WAAW,GAAG,iBAAiB;AAE/C,OAAO,IAAMC,WAAW,GAAG5B,WAAW,CAACC,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}