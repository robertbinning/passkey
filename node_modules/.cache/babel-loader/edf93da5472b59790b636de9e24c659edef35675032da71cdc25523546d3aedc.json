{"ast":null,"code":"import * as React from 'react';\nimport { useTranslate, usePrevNextController } from 'ra-core';\nimport NavigateBefore from '@mui/icons-material/NavigateBefore';\nimport NavigateNext from '@mui/icons-material/NavigateNext';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { Link } from 'react-router-dom';\nimport { Box, Stack, Typography, IconButton, styled } from '@mui/material';\nimport clsx from 'clsx';\nimport { LinearProgress } from '../layout/LinearProgress';\n/**\n * A component used to render the previous and next buttons in a Show or Edit view.\n *\n * The `<PrevNextButtons>` component renders navigation buttons linking to\n * the next and previous records of the current resource, the current index\n * and the total number of records.\n *\n * It uses usePrevNextController to fetch the list of records.\n *\n * `<PrevNextButtons>` can be used anywhere a record context is provided\n * (often inside a `<Show>` or `<Edit>` component).\n *\n * @example <caption>navigate to edit view by default</caption>\n * <ShowButton />\n *\n * @example <caption>navigate to show view</caption>\n * <PrevNextButtons linkType=\"show\" />\n *\n * @example <caption>custom storeKey</caption>\n * <PrevNextButtons storeKey=\"listStoreKey\" />\n *\n * @example <caption>limit the number of records to fetch</caption>\n * <PrevNextButtons limit={500} />\n *\n * @example <caption>customize filters and sort order</caption>\n * <PrevNextButtons\n *     linkType=\"show\"\n *     sort={{\n *         field: 'first_name',\n *         order: 'DESC',\n *     }}\n *     filter={{ q: 'East a' }}\n * />\n *\n * @example <caption>customize style</caption>\n * <PrevNextButtons\n *     sx={{\n *         color: 'blue',\n *         '& .RaPrevNextButton-list': {\n *             marginBottom: '20px',\n *             color: 'red',\n *         },\n *     }}\n * />\n *\n * @example <caption>in an edit view</caption>\n * import * as React from \"react\";\n * import { Edit, PrevNextButtons, ShowButton, SimpleForm, TopToolbar } from 'react-admin';\n *\n * const MyTopToolbar = ({ children }) => (\n *     <TopToolbar>\n *         {children}\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = () => (\n *      <Edit\n *          actions={\n *              <MyTopToolbar>\n *                  <PrevNextButtons\n *                      sort={{\n *                          field: 'first_name',\n *                          order: 'DESC',\n *                      }}\n *                      filter={{ q: 'East a' }}\n *                  />\n *                  <ShowButton />\n *              </MyTopToolbar>\n *          }\n *      >\n *          <SimpleForm>...</SimpleForm>\n *      </Edit>\n * );\n */\nexport var PrevNextButtons = function (props) {\n  var sx = props.sx;\n  var _a = usePrevNextController(props),\n    hasPrev = _a.hasPrev,\n    hasNext = _a.hasNext,\n    prevPath = _a.prevPath,\n    nextPath = _a.nextPath,\n    index = _a.index,\n    total = _a.total,\n    error = _a.error,\n    isPending = _a.isPending;\n  var translate = useTranslate();\n  if (isPending) {\n    return React.createElement(Box, {\n      minHeight: 34,\n      display: \"flex\",\n      alignItems: \"center\"\n    }, React.createElement(LinearProgress, null));\n  }\n  if (error) {\n    return React.createElement(ErrorIcon, {\n      color: \"error\",\n      fontSize: \"small\",\n      titleAccess: \"error\",\n      \"aria-errormessage\": error.message\n    });\n  }\n  if (!hasPrev && !hasNext) {\n    return React.createElement(Box, {\n      minHeight: 34\n    });\n  }\n  return React.createElement(Root, {\n    sx: sx,\n    role: \"navigation\",\n    direction: \"row\",\n    className: clsx(PrevNextButtonClasses.root)\n  }, hasPrev && prevPath ? React.createElement(IconButton, {\n    component: Link,\n    to: prevPath,\n    \"aria-label\": translate('ra.navigation.previous'),\n    size: \"small\"\n  }, React.createElement(NavigateBefore, null)) : React.createElement(IconButton, {\n    \"aria-label\": translate('ra.navigation.previous'),\n    disabled: true,\n    size: \"small\"\n  }, React.createElement(NavigateBefore, null)), typeof index === 'number' && React.createElement(Typography, {\n    variant: \"body2\"\n  }, index + 1, \" / \", total), hasNext && nextPath ? React.createElement(IconButton, {\n    component: Link,\n    to: nextPath,\n    \"aria-label\": translate('ra.navigation.next'),\n    size: \"small\"\n  }, React.createElement(NavigateNext, null)) : React.createElement(IconButton, {\n    \"aria-label\": translate('ra.navigation.next'),\n    disabled: true,\n    size: \"small\"\n  }, React.createElement(NavigateNext, null)));\n};\nvar PREFIX = 'RaPrevNextButton';\nexport var PrevNextButtonClasses = {\n  root: \"\".concat(PREFIX, \"-root\")\n};\nvar Root = styled(Stack, {\n  name: PREFIX,\n  overridesResolver: function (_props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'inline-flex',\n  alignItems: 'center',\n  gap: '0.5em'\n});","map":{"version":3,"names":["React","useTranslate","usePrevNextController","NavigateBefore","NavigateNext","ErrorIcon","Link","Box","Stack","Typography","IconButton","styled","clsx","LinearProgress","PrevNextButtons","props","sx","_a","hasPrev","hasNext","prevPath","nextPath","index","total","error","isPending","translate","createElement","minHeight","display","alignItems","color","fontSize","titleAccess","message","Root","role","direction","className","PrevNextButtonClasses","root","component","to","size","disabled","variant","PREFIX","concat","name","overridesResolver","_props","styles","gap"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/button/PrevNextButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    RaRecord,\n    useTranslate,\n    usePrevNextController,\n    UsePrevNextControllerProps,\n} from 'ra-core';\nimport NavigateBefore from '@mui/icons-material/NavigateBefore';\nimport NavigateNext from '@mui/icons-material/NavigateNext';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { Link } from 'react-router-dom';\nimport {\n    Box,\n    Stack,\n    Typography,\n    IconButton,\n    SxProps,\n    styled,\n} from '@mui/material';\nimport clsx from 'clsx';\n\nimport { LinearProgress } from '../layout/LinearProgress';\n\n/**\n * A component used to render the previous and next buttons in a Show or Edit view.\n *\n * The `<PrevNextButtons>` component renders navigation buttons linking to\n * the next and previous records of the current resource, the current index\n * and the total number of records.\n *\n * It uses usePrevNextController to fetch the list of records.\n *\n * `<PrevNextButtons>` can be used anywhere a record context is provided\n * (often inside a `<Show>` or `<Edit>` component).\n *\n * @example <caption>navigate to edit view by default</caption>\n * <ShowButton />\n *\n * @example <caption>navigate to show view</caption>\n * <PrevNextButtons linkType=\"show\" />\n *\n * @example <caption>custom storeKey</caption>\n * <PrevNextButtons storeKey=\"listStoreKey\" />\n *\n * @example <caption>limit the number of records to fetch</caption>\n * <PrevNextButtons limit={500} />\n *\n * @example <caption>customize filters and sort order</caption>\n * <PrevNextButtons\n *     linkType=\"show\"\n *     sort={{\n *         field: 'first_name',\n *         order: 'DESC',\n *     }}\n *     filter={{ q: 'East a' }}\n * />\n *\n * @example <caption>customize style</caption>\n * <PrevNextButtons\n *     sx={{\n *         color: 'blue',\n *         '& .RaPrevNextButton-list': {\n *             marginBottom: '20px',\n *             color: 'red',\n *         },\n *     }}\n * />\n *\n * @example <caption>in an edit view</caption>\n * import * as React from \"react\";\n * import { Edit, PrevNextButtons, ShowButton, SimpleForm, TopToolbar } from 'react-admin';\n *\n * const MyTopToolbar = ({ children }) => (\n *     <TopToolbar>\n *         {children}\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = () => (\n *      <Edit\n *          actions={\n *              <MyTopToolbar>\n *                  <PrevNextButtons\n *                      sort={{\n *                          field: 'first_name',\n *                          order: 'DESC',\n *                      }}\n *                      filter={{ q: 'East a' }}\n *                  />\n *                  <ShowButton />\n *              </MyTopToolbar>\n *          }\n *      >\n *          <SimpleForm>...</SimpleForm>\n *      </Edit>\n * );\n */\n\nexport const PrevNextButtons = <RecordType extends RaRecord = any>(\n    props: PrevNextButtonProps<RecordType>\n) => {\n    const { sx } = props;\n\n    const {\n        hasPrev,\n        hasNext,\n        prevPath,\n        nextPath,\n        index,\n        total,\n        error,\n        isPending,\n    } = usePrevNextController<RecordType>(props);\n\n    const translate = useTranslate();\n\n    if (isPending) {\n        return (\n            <Box minHeight={34} display=\"flex\" alignItems=\"center\">\n                <LinearProgress />\n            </Box>\n        );\n    }\n    if (error) {\n        return (\n            <ErrorIcon\n                color=\"error\"\n                fontSize=\"small\"\n                titleAccess=\"error\"\n                aria-errormessage={error.message}\n            />\n        );\n    }\n    if (!hasPrev && !hasNext) {\n        return <Box minHeight={34} />;\n    }\n\n    return (\n        <Root\n            sx={sx}\n            role=\"navigation\"\n            direction=\"row\"\n            className={clsx(PrevNextButtonClasses.root)}\n        >\n            {hasPrev && prevPath ? (\n                <IconButton\n                    component={Link}\n                    to={prevPath}\n                    aria-label={translate('ra.navigation.previous')}\n                    size=\"small\"\n                >\n                    <NavigateBefore />\n                </IconButton>\n            ) : (\n                <IconButton\n                    aria-label={translate('ra.navigation.previous')}\n                    disabled\n                    size=\"small\"\n                >\n                    <NavigateBefore />\n                </IconButton>\n            )}\n\n            {typeof index === 'number' && (\n                <Typography variant=\"body2\">\n                    {index + 1} / {total}\n                </Typography>\n            )}\n\n            {hasNext && nextPath ? (\n                <IconButton\n                    component={Link}\n                    to={nextPath}\n                    aria-label={translate('ra.navigation.next')}\n                    size=\"small\"\n                >\n                    <NavigateNext />\n                </IconButton>\n            ) : (\n                <IconButton\n                    aria-label={translate('ra.navigation.next')}\n                    disabled\n                    size=\"small\"\n                >\n                    <NavigateNext />\n                </IconButton>\n            )}\n        </Root>\n    );\n};\n\nexport interface PrevNextButtonProps<RecordType extends RaRecord = any>\n    extends UsePrevNextControllerProps<RecordType> {\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaPrevNextButton';\n\nexport const PrevNextButtonClasses = {\n    root: `${PREFIX}-root`,\n};\n\nconst Root = styled(Stack, {\n    name: PREFIX,\n    overridesResolver: (_props, styles) => styles.root,\n})({\n    display: 'inline-flex',\n    alignItems: 'center',\n    gap: '0.5em',\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}