{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { Link } from '@mui/material';\n/**\n * Render a link to a file based on a path contained in a record field\n *\n * @example\n * import { FileField } from 'react-admin';\n *\n * <FileField source=\"url\" title=\"title\" />\n *\n * // renders the record { id: 123, url: 'doc.pdf', title: 'Presentation' } as\n * <div>\n *     <a href=\"doc.pdf\" title=\"Presentation\">Presentation</a>\n * </div>\n */\nexport var FileField = function (props) {\n  var _a, _b;\n  var className = props.className,\n    emptyText = props.emptyText,\n    title = props.title,\n    src = props.src,\n    target = props.target,\n    download = props.download,\n    ping = props.ping,\n    rel = props.rel,\n    rest = __rest(props, [\"className\", \"emptyText\", \"title\", \"src\", \"target\", \"download\", \"ping\", \"rel\"]);\n  var sourceValue = useFieldValue(props);\n  var titleValue = (_b = (_a = useFieldValue(__assign(__assign({}, props), {\n    // @ts-ignore We ignore here because title might be a custom label or undefined instead of a field name\n    source: title\n  }))) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : title;\n  var translate = useTranslate();\n  if (!sourceValue) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : React.createElement(Root, __assign({\n      className: className\n    }, sanitizeFieldRestProps(rest)));\n  }\n  if (Array.isArray(sourceValue)) {\n    return React.createElement(StyledList, __assign({\n      className: className\n    }, sanitizeFieldRestProps(rest)), sourceValue.map(function (file, index) {\n      var fileTitleValue = title ? get(file, title, title) : title;\n      var srcValue = src ? get(file, src, title) : title;\n      return React.createElement(\"li\", {\n        key: index\n      }, React.createElement(Link, {\n        href: srcValue,\n        title: fileTitleValue,\n        target: target,\n        download: download,\n        ping: ping,\n        rel: rel,\n        variant: \"body2\",\n        onClick: function (e) {\n          return e.stopPropagation();\n        }\n      }, fileTitleValue));\n    }));\n  }\n  return React.createElement(Root, __assign({\n    className: className\n  }, sanitizeFieldRestProps(rest)), React.createElement(Link, {\n    href: sourceValue === null || sourceValue === void 0 ? void 0 : sourceValue.toString(),\n    title: titleValue,\n    target: target,\n    download: download,\n    ping: ping,\n    rel: rel,\n    variant: \"body2\"\n  }, titleValue));\n};\nvar PREFIX = 'RaFileField';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'inline-block'\n});\nvar StyledList = styled('ul')({\n  display: 'inline-block'\n});","map":{"version":3,"names":["React","styled","get","Typography","useFieldValue","useTranslate","sanitizeFieldRestProps","Link","FileField","props","className","emptyText","title","src","target","download","ping","rel","rest","__rest","sourceValue","titleValue","_b","_a","__assign","source","toString","translate","createElement","component","variant","_","Root","Array","isArray","StyledList","map","file","index","fileTitleValue","srcValue","key","href","onClick","e","stopPropagation","PREFIX","name","overridesResolver","styles","root","display"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/FileField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useFieldValue, useTranslate } from 'ra-core';\nimport { Call, Objects } from 'hotscript';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps } from './types';\nimport { SxProps } from '@mui/system';\nimport { Link } from '@mui/material';\n\n/**\n * Render a link to a file based on a path contained in a record field\n *\n * @example\n * import { FileField } from 'react-admin';\n *\n * <FileField source=\"url\" title=\"title\" />\n *\n * // renders the record { id: 123, url: 'doc.pdf', title: 'Presentation' } as\n * <div>\n *     <a href=\"doc.pdf\" title=\"Presentation\">Presentation</a>\n * </div>\n */\nexport const FileField = <\n    RecordType extends Record<string, any> = Record<string, any>,\n>(\n    props: FileFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        title,\n        src,\n        target,\n        download,\n        ping,\n        rel,\n        ...rest\n    } = props;\n    const sourceValue = useFieldValue(props);\n    const titleValue =\n        useFieldValue({\n            ...props,\n            // @ts-ignore We ignore here because title might be a custom label or undefined instead of a field name\n            source: title,\n        })?.toString() ?? title;\n    const translate = useTranslate();\n\n    if (!sourceValue) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : (\n            <Root className={className} {...sanitizeFieldRestProps(rest)} />\n        );\n    }\n\n    if (Array.isArray(sourceValue)) {\n        return (\n            <StyledList className={className} {...sanitizeFieldRestProps(rest)}>\n                {sourceValue.map((file, index) => {\n                    const fileTitleValue = title\n                        ? get(file, title, title)\n                        : title;\n                    const srcValue = src ? get(file, src, title) : title;\n\n                    return (\n                        <li key={index}>\n                            <Link\n                                href={srcValue}\n                                title={fileTitleValue}\n                                target={target}\n                                download={download}\n                                ping={ping}\n                                rel={rel}\n                                variant=\"body2\"\n                                onClick={e => e.stopPropagation()}\n                            >\n                                {fileTitleValue}\n                            </Link>\n                        </li>\n                    );\n                })}\n            </StyledList>\n        );\n    }\n\n    return (\n        <Root className={className} {...sanitizeFieldRestProps(rest)}>\n            <Link\n                href={sourceValue?.toString()}\n                title={titleValue}\n                target={target}\n                download={download}\n                ping={ping}\n                rel={rel}\n                variant=\"body2\"\n            >\n                {titleValue}\n            </Link>\n        </Root>\n    );\n};\n\nexport interface FileFieldProps<\n    RecordType extends Record<string, any> = Record<string, any>,\n> extends FieldProps<RecordType> {\n    src?: string;\n    title?: Call<Objects.AllPaths, RecordType> extends never\n        ? AnyString\n        : Call<Objects.AllPaths, RecordType> | AnyString;\n    target?: string;\n    download?: boolean | string;\n    ping?: string;\n    rel?: string;\n    sx?: SxProps;\n}\ntype AnyString = string & {};\n\nconst PREFIX = 'RaFileField';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    display: 'inline-block',\n});\n\nconst StyledList = styled('ul')({\n    display: 'inline-block',\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}