{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport * as React from 'react';\nimport { forwardRef, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport { InputAdornment, IconButton, TextField as MuiTextField } from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { useTranslate } from 'ra-core';\n/**\n * An override of the default Material UI TextField which is resettable\n */\nexport var ResettableTextField = forwardRef(function (props, ref) {\n  var clearAlwaysVisible = props.clearAlwaysVisible,\n    InputProps = props.InputProps,\n    value = props.value,\n    resettable = props.resettable,\n    disabled = props.disabled,\n    variant = props.variant,\n    margin = props.margin,\n    className = props.className,\n    rest = __rest(props, [\"clearAlwaysVisible\", \"InputProps\", \"value\", \"resettable\", \"disabled\", \"variant\", \"margin\", \"className\"]);\n  var translate = useTranslate();\n  var onChange = props.onChange;\n  var handleClickClearButton = useCallback(function (event) {\n    event.preventDefault();\n    onChange && onChange('');\n  }, [onChange]);\n  var clearButton = ResettableTextFieldClasses.clearButton,\n    clearIcon = ResettableTextFieldClasses.clearIcon,\n    inputAdornedEnd = ResettableTextFieldClasses.inputAdornedEnd,\n    selectAdornment = ResettableTextFieldClasses.selectAdornment,\n    visibleClearIcon = ResettableTextFieldClasses.visibleClearIcon;\n  var _a = InputProps || {},\n    endAdornment = _a.endAdornment,\n    InputPropsWithoutEndAdornment = __rest(_a, [\"endAdornment\"]);\n  if (clearAlwaysVisible && endAdornment) {\n    throw new Error('ResettableTextField cannot display both an endAdornment and a clear button always visible');\n  }\n  var getEndAdornment = function () {\n    var _a;\n    if (!resettable) {\n      return endAdornment;\n    } else if (!value) {\n      if (clearAlwaysVisible) {\n        // show clear button, inactive\n        return React.createElement(InputAdornment, {\n          position: \"end\",\n          className: props.select ? selectAdornment : undefined\n        }, React.createElement(IconButton, {\n          className: clearButton,\n          \"aria-label\": translate('ra.action.clear_input_value'),\n          title: translate('ra.action.clear_input_value'),\n          disabled: true,\n          size: \"large\"\n        }, React.createElement(ClearIcon, {\n          className: clsx(clearIcon, visibleClearIcon)\n        })));\n      } else {\n        if (endAdornment) {\n          return endAdornment;\n        } else {\n          // show spacer\n          return React.createElement(InputAdornment, {\n            position: \"end\",\n            className: props.select ? selectAdornment : undefined\n          }, React.createElement(\"span\", {\n            className: clearButton\n          }, \"\\u00A0\"));\n        }\n      }\n    } else {\n      // show clear\n      return React.createElement(InputAdornment, {\n        position: \"end\",\n        className: props.select ? selectAdornment : undefined\n      }, React.createElement(IconButton, {\n        className: clearButton,\n        \"aria-label\": translate('ra.action.clear_input_value'),\n        title: translate('ra.action.clear_input_value'),\n        onClick: handleClickClearButton,\n        onMouseDown: handleMouseDownClearButton,\n        disabled: disabled,\n        size: \"large\"\n      }, React.createElement(ClearIcon, {\n        className: clsx(clearIcon, (_a = {}, _a[visibleClearIcon] = clearAlwaysVisible || value, _a))\n      })));\n    }\n  };\n  return React.createElement(StyledTextField, __assign({\n    value: value,\n    InputProps: __assign({\n      classes: props.select && variant === 'filled' ? {\n        adornedEnd: inputAdornedEnd\n      } : {},\n      endAdornment: getEndAdornment()\n    }, InputPropsWithoutEndAdornment),\n    disabled: disabled,\n    variant: variant,\n    margin: margin,\n    className: className\n  }, rest, {\n    inputRef: ref\n  }));\n});\nResettableTextField.displayName = 'ResettableTextField';\nvar handleMouseDownClearButton = function (event) {\n  event.preventDefault();\n};\nvar PREFIX = 'RaResettableTextField';\nexport var ResettableTextFieldClasses = {\n  clearIcon: \"\".concat(PREFIX, \"-clearIcon\"),\n  visibleClearIcon: \"\".concat(PREFIX, \"-visibleClearIcon\"),\n  clearButton: \"\".concat(PREFIX, \"-clearButton\"),\n  selectAdornment: \"\".concat(PREFIX, \"-selectAdornment\"),\n  inputAdornedEnd: \"\".concat(PREFIX, \"-inputAdornedEnd\")\n};\nexport var ResettableTextFieldStyles = (_a = {}, _a[\"& .\".concat(ResettableTextFieldClasses.clearIcon)] = {\n  height: 16,\n  width: 0\n}, _a[\"& .\".concat(ResettableTextFieldClasses.visibleClearIcon)] = {\n  width: 16\n}, _a[\"& .\".concat(ResettableTextFieldClasses.clearButton)] = {\n  height: 24,\n  width: 24,\n  padding: 0\n}, _a[\"& .\".concat(ResettableTextFieldClasses.selectAdornment)] = {\n  position: 'absolute',\n  right: 24\n}, _a[\"& .\".concat(ResettableTextFieldClasses.inputAdornedEnd)] = {\n  paddingRight: 0\n}, _a);\nvar StyledTextField = styled(MuiTextField, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(ResettableTextFieldStyles);","map":{"version":3,"names":["React","forwardRef","useCallback","styled","clsx","InputAdornment","IconButton","TextField","MuiTextField","ClearIcon","useTranslate","ResettableTextField","props","ref","clearAlwaysVisible","InputProps","value","resettable","disabled","variant","margin","className","rest","__rest","translate","onChange","handleClickClearButton","event","preventDefault","clearButton","ResettableTextFieldClasses","clearIcon","inputAdornedEnd","selectAdornment","visibleClearIcon","_a","endAdornment","InputPropsWithoutEndAdornment","Error","getEndAdornment","createElement","position","select","undefined","title","size","onClick","onMouseDown","handleMouseDownClearButton","StyledTextField","__assign","classes","adornedEnd","inputRef","displayName","PREFIX","concat","ResettableTextFieldStyles","height","width","padding","right","paddingRight","name","overridesResolver","styles","root"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/ResettableTextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { forwardRef, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport {\n    InputAdornment,\n    IconButton,\n    TextField as MuiTextField,\n    TextFieldProps,\n} from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { useTranslate } from 'ra-core';\n\n/**\n * An override of the default Material UI TextField which is resettable\n */\nexport const ResettableTextField = forwardRef(\n    (props: ResettableTextFieldProps, ref) => {\n        const {\n            clearAlwaysVisible,\n            InputProps,\n            value,\n            resettable,\n            disabled,\n            variant,\n            margin,\n            className,\n            ...rest\n        } = props;\n\n        const translate = useTranslate();\n\n        const { onChange } = props;\n        const handleClickClearButton = useCallback(\n            event => {\n                event.preventDefault();\n                onChange && onChange('');\n            },\n            [onChange]\n        );\n\n        const {\n            clearButton,\n            clearIcon,\n            inputAdornedEnd,\n            selectAdornment,\n            visibleClearIcon,\n        } = ResettableTextFieldClasses;\n\n        const { endAdornment, ...InputPropsWithoutEndAdornment } =\n            InputProps || {};\n\n        if (clearAlwaysVisible && endAdornment) {\n            throw new Error(\n                'ResettableTextField cannot display both an endAdornment and a clear button always visible'\n            );\n        }\n\n        const getEndAdornment = () => {\n            if (!resettable) {\n                return endAdornment;\n            } else if (!value) {\n                if (clearAlwaysVisible) {\n                    // show clear button, inactive\n                    return (\n                        <InputAdornment\n                            position=\"end\"\n                            className={\n                                props.select ? selectAdornment : undefined\n                            }\n                        >\n                            <IconButton\n                                className={clearButton}\n                                aria-label={translate(\n                                    'ra.action.clear_input_value'\n                                )}\n                                title={translate('ra.action.clear_input_value')}\n                                disabled={true}\n                                size=\"large\"\n                            >\n                                <ClearIcon\n                                    className={clsx(\n                                        clearIcon,\n                                        visibleClearIcon\n                                    )}\n                                />\n                            </IconButton>\n                        </InputAdornment>\n                    );\n                } else {\n                    if (endAdornment) {\n                        return endAdornment;\n                    } else {\n                        // show spacer\n                        return (\n                            <InputAdornment\n                                position=\"end\"\n                                className={\n                                    props.select ? selectAdornment : undefined\n                                }\n                            >\n                                <span className={clearButton}>&nbsp;</span>\n                            </InputAdornment>\n                        );\n                    }\n                }\n            } else {\n                // show clear\n                return (\n                    <InputAdornment\n                        position=\"end\"\n                        className={props.select ? selectAdornment : undefined}\n                    >\n                        <IconButton\n                            className={clearButton}\n                            aria-label={translate(\n                                'ra.action.clear_input_value'\n                            )}\n                            title={translate('ra.action.clear_input_value')}\n                            onClick={handleClickClearButton}\n                            onMouseDown={handleMouseDownClearButton}\n                            disabled={disabled}\n                            size=\"large\"\n                        >\n                            <ClearIcon\n                                className={clsx(clearIcon, {\n                                    [visibleClearIcon]:\n                                        clearAlwaysVisible || value,\n                                })}\n                            />\n                        </IconButton>\n                    </InputAdornment>\n                );\n            }\n        };\n\n        return (\n            <StyledTextField\n                value={value}\n                InputProps={{\n                    classes:\n                        props.select && variant === 'filled'\n                            ? { adornedEnd: inputAdornedEnd }\n                            : {},\n                    endAdornment: getEndAdornment(),\n                    ...InputPropsWithoutEndAdornment,\n                }}\n                disabled={disabled}\n                variant={variant}\n                margin={margin}\n                className={className}\n                {...rest}\n                inputRef={ref}\n            />\n        );\n    }\n);\n\nResettableTextField.displayName = 'ResettableTextField';\n\nconst handleMouseDownClearButton = event => {\n    event.preventDefault();\n};\n\ninterface Props {\n    clearAlwaysVisible?: boolean;\n    resettable?: boolean;\n}\n\nexport type ResettableTextFieldProps = Props &\n    Omit<\n        TextFieldProps,\n        'onChange' | 'onPointerEnterCapture' | 'onPointerLeaveCapture'\n    > & {\n        onChange?: (eventOrValue: any) => void;\n    };\n\nconst PREFIX = 'RaResettableTextField';\n\nexport const ResettableTextFieldClasses = {\n    clearIcon: `${PREFIX}-clearIcon`,\n    visibleClearIcon: `${PREFIX}-visibleClearIcon`,\n    clearButton: `${PREFIX}-clearButton`,\n    selectAdornment: `${PREFIX}-selectAdornment`,\n    inputAdornedEnd: `${PREFIX}-inputAdornedEnd`,\n};\n\nexport const ResettableTextFieldStyles = {\n    [`& .${ResettableTextFieldClasses.clearIcon}`]: {\n        height: 16,\n        width: 0,\n    },\n    [`& .${ResettableTextFieldClasses.visibleClearIcon}`]: {\n        width: 16,\n    },\n    [`& .${ResettableTextFieldClasses.clearButton}`]: {\n        height: 24,\n        width: 24,\n        padding: 0,\n    },\n    [`& .${ResettableTextFieldClasses.selectAdornment}`]: {\n        position: 'absolute',\n        right: 24,\n    },\n    [`& .${ResettableTextFieldClasses.inputAdornedEnd}`]: {\n        paddingRight: 0,\n    },\n};\n\nconst StyledTextField = styled(MuiTextField, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(ResettableTextFieldStyles);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}