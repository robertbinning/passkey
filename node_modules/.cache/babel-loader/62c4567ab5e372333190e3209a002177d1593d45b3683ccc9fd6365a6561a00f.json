{"ast":null,"code":"var _jsxFileName = \"/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/Login.js\";\nimport React from 'react';\nimport { getCredential } from './webauthn';\nimport './Login.css';\nimport logo from './kwaai.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  const handleLogin = async () => {\n    const email = document.getElementById('email').value;\n    if (!email) {\n      alert('Please enter an email address.');\n      return;\n    }\n    try {\n      const assertion = await getCredential(email); // Ensure email is correctly encoded\n      console.log('Assertion:', assertion);\n      const response = await fetch('https://localhost/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: assertion.id,\n          rawId: assertion.rawId,\n          response: {\n            authenticatorData: assertion.response.authenticatorData,\n            clientDataJSON: assertion.response.clientDataJSON,\n            signature: assertion.response.signature,\n            userHandle: assertion.response.userHandle\n          },\n          type: assertion.type\n        })\n      });\n      if (response.ok) {\n        console.log('Logged in successfully');\n      } else {\n        console.error('Login failed');\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      alt: \"Kwaai Logo\",\n      className: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"input-field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      className: \"auth-button\",\n      children: \"Login with Passkey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"auth-link\",\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/register\",\n        children: \"Register here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 61\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","getCredential","logo","jsxDEV","_jsxDEV","Login","handleLogin","email","document","getElementById","value","alert","assertion","console","log","response","fetch","method","headers","body","JSON","stringify","id","rawId","authenticatorData","clientDataJSON","signature","userHandle","type","ok","error","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onClick","href","_c","$RefreshReg$"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/src/Login.js"],"sourcesContent":["import React from 'react';\nimport { getCredential } from './webauthn';\nimport './Login.css';\nimport logo from './kwaai.png';\n\nconst Login = () => {\n    const handleLogin = async () => {\n        const email = document.getElementById('email').value;\n        if (!email) {\n            alert('Please enter an email address.');\n            return;\n        }\n\n        try {\n            const assertion = await getCredential(email); // Ensure email is correctly encoded\n            console.log('Assertion:', assertion);\n\n            const response = await fetch('https://localhost/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    id: assertion.id,\n                    rawId: assertion.rawId,\n                    response: {\n                        authenticatorData: assertion.response.authenticatorData,\n                        clientDataJSON: assertion.response.clientDataJSON,\n                        signature: assertion.response.signature,\n                        userHandle: assertion.response.userHandle,\n                    },\n                    type: assertion.type,\n                }),\n            });\n\n            if (response.ok) {\n                console.log('Logged in successfully');\n            } else {\n                console.error('Login failed');\n            }\n        } catch (error) {\n            console.error('Error during login:', error);\n        }\n    };\n\n    return (\n        <div className=\"auth-container\">\n            <img src={logo} alt=\"Kwaai Logo\" className=\"logo\" />\n            <h1>Login</h1>\n            <input type=\"email\" id=\"email\" placeholder=\"Email\" className=\"input-field\" />\n            <button onClick={handleLogin} className=\"auth-button\">Login with Passkey</button>\n            <p className=\"auth-link\">Don't have an account? <a href=\"/register\">Register here</a></p>\n        </div>\n    );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}