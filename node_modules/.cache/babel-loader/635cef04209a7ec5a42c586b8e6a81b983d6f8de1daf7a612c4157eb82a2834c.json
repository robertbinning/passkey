{"ast":null,"code":"import { createContext } from 'react';\nexport var TranslatableContext = createContext(undefined);","map":{"version":3,"names":["createContext","TranslatableContext","undefined"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/i18n/TranslatableContext.ts"],"sourcesContent":["import { createContext } from 'react';\n\nexport const TranslatableContext = createContext<\n    TranslatableContextValue | undefined\n>(undefined);\n\nexport interface TranslatableContextValue {\n    locales: string[];\n    selectedLocale: string;\n    selectLocale: SelectTranslatableLocale;\n    getRecordForLocale: GetRecordForLocale;\n}\n\nexport type SelectTranslatableLocale = (locale: string) => void;\n\n/**\n * Returns a record where translatable fields have their values set to the value of the given locale.\n * This is necessary because the fields rely on the RecordContext to get their values and have no knowledge of the locale.\n *\n * Given the record { title: { en: 'title_en', fr: 'title_fr' } } and the locale 'fr',\n * the record for the locale 'fr' will be { title: 'title_fr' }\n */\nexport type GetRecordForLocale = (record: any, locale: string) => any;\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAErC,OAAO,IAAMC,mBAAmB,GAAGD,aAAa,CAE9CE,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}