{"ast":null,"code":"import { useContext } from 'react';\nimport { ShowContext } from './ShowContext';\n/**\n * Hook to read the show controller props from the ShowContext.\n *\n * Used within a <ShowContextProvider> (e.g. as a descendent of <Show>).\n *\n * @returns {ShowControllerResult} create controller props\n *\n * @see useShowController for how it is filled\n */\nexport var useShowContext = function () {\n  var context = useContext(ShowContext);\n  // Props take precedence over the context\n  if (!context) {\n    throw new Error('useShowContext must be used inside a ShowContextProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["useContext","ShowContext","useShowContext","context","Error"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/controller/show/useShowContext.tsx"],"sourcesContent":["import { useContext } from 'react';\n\nimport { RaRecord } from '../../types';\nimport { ShowContext } from './ShowContext';\nimport { ShowControllerResult } from './useShowController';\n\n/**\n * Hook to read the show controller props from the ShowContext.\n *\n * Used within a <ShowContextProvider> (e.g. as a descendent of <Show>).\n *\n * @returns {ShowControllerResult} create controller props\n *\n * @see useShowController for how it is filled\n */\nexport const useShowContext = <\n    RecordType extends RaRecord = any,\n>(): ShowControllerResult<RecordType> => {\n    const context = useContext(ShowContext);\n    // Props take precedence over the context\n    if (!context) {\n        throw new Error(\n            'useShowContext must be used inside a ShowContextProvider'\n        );\n    }\n    return context;\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAGlC,SAASC,WAAW,QAAQ,eAAe;AAG3C;;;;;;;;;AASA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAAA;EAG1B,IAAMC,OAAO,GAAGH,UAAU,CAACC,WAAW,CAAC;EACvC;EACA,IAAI,CAACE,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CACX,0DAA0D,CAC7D;;EAEL,OAAOD,OAAO;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}