{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { TranslatableContextProvider, useTranslatable, useRecordContext, useResourceContext } from 'ra-core';\nimport { TranslatableFieldsTabs } from './TranslatableFieldsTabs';\nimport { TranslatableFieldsTabContent } from './TranslatableFieldsTabContent';\n/**\n * Provides a way to show multiple languages for any field passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableFields locales={['en', 'fr']}>\n *     <TextField source={getSource('title')} />\n *     <TextField source={getSource('description')} />\n * </TranslatableFields>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableFields\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextField source={getSource('title')} />\n * <TranslatableFields>\n>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={selectLocale}>\n *             {locales.map((locale) => (\n *                 <option selected={locale.locale === selectedLocale}>\n *                     {locale.name}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales in the form. For example [{ 'en', 'fr' }].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to Material UI tabs.\n */\nexport var TranslatableFields = function (props) {\n  var defaultLocale = props.defaultLocale,\n    locales = props.locales,\n    _a = props.groupKey,\n    groupKey = _a === void 0 ? '' : _a,\n    _b = props.selector,\n    selector = _b === void 0 ? React.createElement(TranslatableFieldsTabs, {\n      groupKey: groupKey\n    }) : _b,\n    children = props.children,\n    className = props.className,\n    resourceProp = props.resource;\n  var record = useRecordContext(props);\n  if (!record) {\n    throw new Error(\"<TranslatableFields> was called outside of a RecordContext and without a record prop. You must set the record prop.\");\n  }\n  var resource = useResourceContext(props);\n  if (!resource) {\n    throw new Error(\"<TranslatableFields> was called outside of a ResourceContext and without a record prop. You must set the resource prop.\");\n  }\n  var context = useTranslatable({\n    defaultLocale: defaultLocale,\n    locales: locales\n  });\n  return React.createElement(Root, {\n    className: className\n  }, React.createElement(TranslatableContextProvider, {\n    value: context\n  }, selector, locales.map(function (locale) {\n    return React.createElement(TranslatableFieldsTabContent, {\n      key: locale,\n      locale: locale,\n      record: record,\n      resource: resourceProp,\n      groupKey: groupKey\n    }, children);\n  })));\n};\nvar PREFIX = 'RaTranslatableFields';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5)\n  };\n});","map":{"version":3,"names":["React","styled","TranslatableContextProvider","useTranslatable","useRecordContext","useResourceContext","TranslatableFieldsTabs","TranslatableFieldsTabContent","TranslatableFields","props","defaultLocale","locales","_a","groupKey","_b","selector","createElement","children","className","resourceProp","resource","record","Error","context","Root","value","map","locale","key","PREFIX","name","overridesResolver","styles","root","theme","flexGrow","marginTop","spacing","marginBottom"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/field/TranslatableFields.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement, ReactNode } from 'react';\nimport {\n    TranslatableContextProvider,\n    useTranslatable,\n    UseTranslatableOptions,\n    RaRecord,\n    useRecordContext,\n    useResourceContext,\n} from 'ra-core';\nimport { TranslatableFieldsTabs } from './TranslatableFieldsTabs';\nimport { TranslatableFieldsTabContent } from './TranslatableFieldsTabContent';\n\n/**\n * Provides a way to show multiple languages for any field passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableFields locales={['en', 'fr']}>\n *     <TextField source={getSource('title')} />\n *     <TextField source={getSource('description')} />\n * </TranslatableFields>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableFields\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextField source={getSource('title')} />\n * <TranslatableFields>\n>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={selectLocale}>\n *             {locales.map((locale) => (\n *                 <option selected={locale.locale === selectedLocale}>\n *                     {locale.name}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales in the form. For example [{ 'en', 'fr' }].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to Material UI tabs.\n */\nexport const TranslatableFields = (\n    props: TranslatableFieldsProps\n): ReactElement => {\n    const {\n        defaultLocale,\n        locales,\n        groupKey = '',\n        selector = <TranslatableFieldsTabs groupKey={groupKey} />,\n        children,\n        className,\n        resource: resourceProp,\n    } = props;\n    const record = useRecordContext(props);\n    if (!record) {\n        throw new Error(\n            `<TranslatableFields> was called outside of a RecordContext and without a record prop. You must set the record prop.`\n        );\n    }\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            `<TranslatableFields> was called outside of a ResourceContext and without a record prop. You must set the resource prop.`\n        );\n    }\n    const context = useTranslatable({ defaultLocale, locales });\n\n    return (\n        <Root className={className}>\n            <TranslatableContextProvider value={context}>\n                {selector}\n                {locales.map(locale => (\n                    <TranslatableFieldsTabContent\n                        key={locale}\n                        locale={locale}\n                        record={record}\n                        resource={resourceProp}\n                        groupKey={groupKey}\n                    >\n                        {children}\n                    </TranslatableFieldsTabContent>\n                ))}\n            </TranslatableContextProvider>\n        </Root>\n    );\n};\n\nexport interface TranslatableFieldsProps extends UseTranslatableOptions {\n    children: ReactNode;\n    className?: string;\n    record?: RaRecord;\n    resource?: string;\n    selector?: ReactElement;\n    groupKey?: string;\n}\n\nconst PREFIX = 'RaTranslatableFields';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5),\n}));\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAE7C,SACIC,2BAA2B,EAC3BC,eAAe,EAGfC,gBAAgB,EAChBC,kBAAkB,QACf,SAAS;AAChB,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAASC,4BAA4B,QAAQ,gCAAgC;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,OAAO,IAAMC,kBAAkB,GAAG,SAAAA,CAC9BC,KAA8B;EAG1B,IAAAC,aAAa,GAObD,KAAK,CAAAC,aAPQ;IACbC,OAAO,GAMPF,KAAK,CAAAE,OANE;IACPC,EAAA,GAKAH,KAAK,CAAAI,QALQ;IAAbA,QAAQ,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACbE,EAAA,GAIAL,KAAK,CAAAM,QAJoD;IAAzDA,QAAQ,GAAAD,EAAA,cAAGd,KAAA,CAAAgB,aAAA,CAACV,sBAAsB;MAACO,QAAQ,EAAEA;IAAQ,EAAI,GAAAC,EAAA;IACzDG,QAAQ,GAGRR,KAAK,CAAAQ,QAHG;IACRC,SAAS,GAETT,KAAK,CAAAS,SAFI;IACCC,YAAY,GACtBV,KAAK,CAAAW,QADiB;EAE1B,IAAMC,MAAM,GAAGjB,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAI,CAACY,MAAM,EAAE;IACT,MAAM,IAAIC,KAAK,CACX,qHAAqH,CACxH;;EAEL,IAAMF,QAAQ,GAAGf,kBAAkB,CAACI,KAAK,CAAC;EAC1C,IAAI,CAACW,QAAQ,EAAE;IACX,MAAM,IAAIE,KAAK,CACX,yHAAyH,CAC5H;;EAEL,IAAMC,OAAO,GAAGpB,eAAe,CAAC;IAAEO,aAAa,EAAAA,aAAA;IAAEC,OAAO,EAAAA;EAAA,CAAE,CAAC;EAE3D,OACIX,KAAA,CAAAgB,aAAA,CAACQ,IAAI;IAACN,SAAS,EAAEA;EAAS,GACtBlB,KAAA,CAAAgB,aAAA,CAACd,2BAA2B;IAACuB,KAAK,EAAEF;EAAO,GACtCR,QAAQ,EACRJ,OAAO,CAACe,GAAG,CAAC,UAAAC,MAAM;IAAI,OACnB3B,KAAA,CAAAgB,aAAA,CAACT,4BAA4B;MACzBqB,GAAG,EAAED,MAAM;MACXA,MAAM,EAAEA,MAAM;MACdN,MAAM,EAAEA,MAAM;MACdD,QAAQ,EAAED,YAAY;MACtBN,QAAQ,EAAEA;IAAQ,GAEjBI,QAAQ,CACkB;EATZ,CAUtB,CAAC,CACwB,CAC3B;AAEf,CAAC;AAWD,IAAMY,MAAM,GAAG,sBAAsB;AAErC,IAAML,IAAI,GAAGvB,MAAM,CAAC,KAAK,EAAE;EACvB6B,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,SAAAA,CAACtB,KAAK,EAAEuB,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAACrB,EAAS;MAAPsB,KAAK,GAAAtB,EAAA,CAAAsB,KAAA;EAAO,OAAC;IACfC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAEF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC;IAC3BC,YAAY,EAAEJ,KAAK,CAACG,OAAO,CAAC,GAAG;GAClC;AAJiB,CAIhB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}