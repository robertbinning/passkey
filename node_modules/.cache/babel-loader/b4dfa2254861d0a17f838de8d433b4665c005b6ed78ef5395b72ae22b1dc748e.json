{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useBasename } from '../routing';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\nexport var useCheckAuth = function () {\n  var authProvider = useAuthProvider();\n  var notify = useNotify();\n  var logout = useLogout();\n  var basename = useBasename();\n  var loginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.loginUrl));\n  var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo) {\n    if (params === void 0) {\n      params = {};\n    }\n    if (logoutOnFailure === void 0) {\n      logoutOnFailure = true;\n    }\n    if (redirectTo === void 0) {\n      redirectTo = loginUrl;\n    }\n    return authProvider ? authProvider.checkAuth(params).catch(function (error) {\n      if (logoutOnFailure) {\n        logout({}, error && error.redirectTo != null ? error.redirectTo : redirectTo);\n        var shouldSkipNotify = error && error.message === false;\n        !shouldSkipNotify && notify(getErrorMessage(error, 'ra.auth.auth_check_error'), {\n          type: 'error'\n        });\n      }\n      throw error;\n    }) : checkAuthWithoutAuthProvider();\n  }, [authProvider, logout, notify, loginUrl]);\n  return checkAuth;\n};\nvar checkAuthWithoutAuthProvider = function () {\n  return Promise.resolve();\n};\nvar getErrorMessage = function (error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};","map":{"version":3,"names":["useCallback","useAuthProvider","defaultAuthParams","useLogout","useNotify","useBasename","removeDoubleSlashes","useCheckAuth","authProvider","notify","logout","basename","loginUrl","concat","checkAuth","params","logoutOnFailure","redirectTo","catch","error","shouldSkipNotify","message","getErrorMessage","type","checkAuthWithoutAuthProvider","Promise","resolve","defaultMessage"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-core/src/auth/useCheckAuth.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useBasename } from '../routing';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\nexport const useCheckAuth = (): CheckAuth => {\n    const authProvider = useAuthProvider();\n    const notify = useNotify();\n    const logout = useLogout();\n    const basename = useBasename();\n    const loginUrl = removeDoubleSlashes(\n        `${basename}/${defaultAuthParams.loginUrl}`\n    );\n\n    const checkAuth = useCallback(\n        (params: any = {}, logoutOnFailure = true, redirectTo = loginUrl) =>\n            authProvider\n                ? authProvider.checkAuth(params).catch(error => {\n                      if (logoutOnFailure) {\n                          logout(\n                              {},\n                              error && error.redirectTo != null\n                                  ? error.redirectTo\n                                  : redirectTo\n                          );\n                          const shouldSkipNotify =\n                              error && error.message === false;\n                          !shouldSkipNotify &&\n                              notify(\n                                  getErrorMessage(\n                                      error,\n                                      'ra.auth.auth_check_error'\n                                  ),\n                                  { type: 'error' }\n                              );\n                      }\n                      throw error;\n                  })\n                : checkAuthWithoutAuthProvider(),\n        [authProvider, logout, notify, loginUrl]\n    );\n\n    return checkAuth;\n};\n\nconst checkAuthWithoutAuthProvider = () => Promise.resolve();\n\n/**\n * Check if the current user is authenticated by calling authProvider.checkAuth().\n * Logs the user out on failure.\n *\n * @param {Object} params The parameters to pass to the authProvider\n * @param {boolean} logoutOnFailure Whether the user should be logged out if the authProvider fails to authenticate them. True by default.\n * @param {string} redirectTo The login form url. Defaults to '/login'\n *\n * @return {Promise} Resolved to the authProvider response if the user passes the check, or rejected with an error otherwise\n */\nexport type CheckAuth = (\n    params?: any,\n    logoutOnFailure?: boolean,\n    redirectTo?: string\n) => Promise<any>;\n\nconst getErrorMessage = (error, defaultMessage) =>\n    typeof error === 'string'\n        ? error\n        : typeof error === 'undefined' || !error.message\n          ? defaultMessage\n          : error.message;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAOC,eAAe,IAAIC,iBAAiB,QAAQ,mBAAmB;AACtE,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,OAAO,IAAMC,YAAY,GAAG,SAAAA,CAAA;EACxB,IAAMC,YAAY,GAAGP,eAAe,EAAE;EACtC,IAAMQ,MAAM,GAAGL,SAAS,EAAE;EAC1B,IAAMM,MAAM,GAAGP,SAAS,EAAE;EAC1B,IAAMQ,QAAQ,GAAGN,WAAW,EAAE;EAC9B,IAAMO,QAAQ,GAAGN,mBAAmB,CAChC,GAAAO,MAAA,CAAGF,QAAQ,OAAAE,MAAA,CAAIX,iBAAiB,CAACU,QAAQ,CAAE,CAC9C;EAED,IAAME,SAAS,GAAGd,WAAW,CACzB,UAACe,MAAgB,EAAEC,eAAsB,EAAEC,UAAqB;IAA/D,IAAAF,MAAA;MAAAA,MAAA,KAAgB;IAAA;IAAE,IAAAC,eAAA;MAAAA,eAAA,OAAsB;IAAA;IAAE,IAAAC,UAAA;MAAAA,UAAA,GAAAL,QAAqB;IAAA;IAC5D,OAAAJ,YAAY,GACNA,YAAY,CAACM,SAAS,CAACC,MAAM,CAAC,CAACG,KAAK,CAAC,UAAAC,KAAK;MACtC,IAAIH,eAAe,EAAE;QACjBN,MAAM,CACF,EAAE,EACFS,KAAK,IAAIA,KAAK,CAACF,UAAU,IAAI,IAAI,GAC3BE,KAAK,CAACF,UAAU,GAChBA,UAAU,CACnB;QACD,IAAMG,gBAAgB,GAClBD,KAAK,IAAIA,KAAK,CAACE,OAAO,KAAK,KAAK;QACpC,CAACD,gBAAgB,IACbX,MAAM,CACFa,eAAe,CACXH,KAAK,EACL,0BAA0B,CAC7B,EACD;UAAEI,IAAI,EAAE;QAAO,CAAE,CACpB;;MAET,MAAMJ,KAAK;IACf,CAAC,CAAC,GACFK,4BAA4B,EAAE;EAtBpC,CAsBoC,EACxC,CAAChB,YAAY,EAAEE,MAAM,EAAED,MAAM,EAAEG,QAAQ,CAAC,CAC3C;EAED,OAAOE,SAAS;AACpB,CAAC;AAED,IAAMU,4BAA4B,GAAG,SAAAA,CAAA;EAAM,OAAAC,OAAO,CAACC,OAAO,EAAE;AAAjB,CAAiB;AAkB5D,IAAMJ,eAAe,GAAG,SAAAA,CAACH,KAAK,EAAEQ,cAAc;EAC1C,cAAOR,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACL,OAAOA,KAAK,KAAK,WAAW,IAAI,CAACA,KAAK,CAACE,OAAO,GAC5CM,cAAc,GACdR,KAAK,CAACE,OAAO;AAJrB,CAIqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}