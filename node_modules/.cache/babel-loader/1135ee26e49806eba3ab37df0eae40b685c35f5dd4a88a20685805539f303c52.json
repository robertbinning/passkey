{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useRecordContext, useSaveContext } from 'ra-core';\nimport { DeleteWithUndoButton } from './DeleteWithUndoButton';\nimport { DeleteWithConfirmButton } from './DeleteWithConfirmButton';\n/**\n * Button used to delete a single record. Added by default by the <Toolbar> of edit and show views.\n *\n * @typedef {Object} Props The props you can use (other props are injected if you used it in the <Toolbar>)\n * @prop {boolean} mutationMode Either 'pessimistic', 'optimistic' or 'undoable'. Determine whether the deletion uses an undo button in a notification or a confirmation dialog. Defaults to 'undoable'.\n * @prop {Object} record The current resource record\n * @prop {string} className\n * @prop {string} label Button label. Defaults to 'ra.action.delete, translated.\n * @prop {boolean} disabled Disable the button.\n * @prop {string} variant Material UI variant for the button. Defaults to 'contained'.\n * @prop {ReactElement} icon Override the icon. Defaults to the Delete icon from Material UI.\n *\n * @param {Props} props\n *\n * @example Usage in the <TopToolbar> of an <Edit> form\n *\n * import * as React from 'react';\n * import { Edit, DeleteButton, TopToolbar } from 'react-admin';\n *\n * const EditActions = props => {\n *     const { data, resource } = props;\n *     return (\n *         <TopToolbar>\n *             <DeleteButton\n *                 mutationMode=\"pessimistic\" // Renders the <DeleteWithConfirmButton>\n *             />\n *         </TopToolbar>\n *     );\n * };\n *\n * const Edit = props => {\n *     return <Edit actions={<EditActions />} {...props} />;\n * };\n */\nexport var DeleteButton = function (props) {\n  var mutationMode = props.mutationMode,\n    rest = __rest(props, [\"mutationMode\"]);\n  var record = useRecordContext(props);\n  var saveContext = useSaveContext(props);\n  if (!record || record.id == null) {\n    return null;\n  }\n  var finalMutationMode = mutationMode ? mutationMode : (saveContext === null || saveContext === void 0 ? void 0 : saveContext.mutationMode) ? saveContext.mutationMode : 'undoable';\n  return finalMutationMode === 'undoable' ? React.createElement(DeleteWithUndoButton, __assign({\n    record: record\n  }, rest)) : React.createElement(DeleteWithConfirmButton, __assign({\n    // @ts-ignore I looked for the error for one hour without finding it\n    mutationMode: finalMutationMode,\n    record: record\n  }, rest));\n};","map":{"version":3,"names":["React","useRecordContext","useSaveContext","DeleteWithUndoButton","DeleteWithConfirmButton","DeleteButton","props","mutationMode","rest","__rest","record","saveContext","id","finalMutationMode","createElement","__assign"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/button/DeleteButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport {\n    RaRecord,\n    MutationMode,\n    DeleteParams,\n    useRecordContext,\n    useSaveContext,\n    SaveContextValue,\n    RedirectionSideEffect,\n} from 'ra-core';\n\nimport { ButtonProps } from './Button';\nimport { DeleteWithUndoButton } from './DeleteWithUndoButton';\nimport { DeleteWithConfirmButton } from './DeleteWithConfirmButton';\n\n/**\n * Button used to delete a single record. Added by default by the <Toolbar> of edit and show views.\n *\n * @typedef {Object} Props The props you can use (other props are injected if you used it in the <Toolbar>)\n * @prop {boolean} mutationMode Either 'pessimistic', 'optimistic' or 'undoable'. Determine whether the deletion uses an undo button in a notification or a confirmation dialog. Defaults to 'undoable'.\n * @prop {Object} record The current resource record\n * @prop {string} className\n * @prop {string} label Button label. Defaults to 'ra.action.delete, translated.\n * @prop {boolean} disabled Disable the button.\n * @prop {string} variant Material UI variant for the button. Defaults to 'contained'.\n * @prop {ReactElement} icon Override the icon. Defaults to the Delete icon from Material UI.\n *\n * @param {Props} props\n *\n * @example Usage in the <TopToolbar> of an <Edit> form\n *\n * import * as React from 'react';\n * import { Edit, DeleteButton, TopToolbar } from 'react-admin';\n *\n * const EditActions = props => {\n *     const { data, resource } = props;\n *     return (\n *         <TopToolbar>\n *             <DeleteButton\n *                 mutationMode=\"pessimistic\" // Renders the <DeleteWithConfirmButton>\n *             />\n *         </TopToolbar>\n *     );\n * };\n *\n * const Edit = props => {\n *     return <Edit actions={<EditActions />} {...props} />;\n * };\n */\nexport const DeleteButton = <RecordType extends RaRecord = any>(\n    props: DeleteButtonProps<RecordType>\n) => {\n    const { mutationMode, ...rest } = props;\n    const record = useRecordContext(props);\n    const saveContext = useSaveContext(props);\n    if (!record || record.id == null) {\n        return null;\n    }\n\n    const finalMutationMode = mutationMode\n        ? mutationMode\n        : saveContext?.mutationMode\n          ? saveContext.mutationMode\n          : 'undoable';\n\n    return finalMutationMode === 'undoable' ? (\n        <DeleteWithUndoButton<RecordType> record={record} {...rest} />\n    ) : (\n        <DeleteWithConfirmButton<RecordType>\n            // @ts-ignore I looked for the error for one hour without finding it\n            mutationMode={finalMutationMode}\n            record={record}\n            {...rest}\n        />\n    );\n};\n\nexport interface DeleteButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps,\n        SaveContextValue {\n    confirmTitle?: React.ReactNode;\n    confirmContent?: React.ReactNode;\n    confirmColor?: 'primary' | 'warning';\n    icon?: ReactElement;\n    mutationMode?: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteParams<RecordType>\n    >;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,SAIIC,gBAAgB,EAChBC,cAAc,QAGX,SAAS;AAGhB,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,uBAAuB,QAAQ,2BAA2B;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,IAAMC,YAAY,GAAG,SAAAA,CACxBC,KAAoC;EAE5B,IAAAC,YAAY,GAAcD,KAAK,CAAAC,YAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKH,KAAK,EAAjC,gBAAyB,CAAF;EAC7B,IAAMI,MAAM,GAAGT,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAMK,WAAW,GAAGT,cAAc,CAACI,KAAK,CAAC;EACzC,IAAI,CAACI,MAAM,IAAIA,MAAM,CAACE,EAAE,IAAI,IAAI,EAAE;IAC9B,OAAO,IAAI;;EAGf,IAAMC,iBAAiB,GAAGN,YAAY,GAChCA,YAAY,GACZ,CAAAI,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEJ,YAAY,IACvBI,WAAW,CAACJ,YAAY,GACxB,UAAU;EAElB,OAAOM,iBAAiB,KAAK,UAAU,GACnCb,KAAA,CAAAc,aAAA,CAACX,oBAAoB,EAAAY,QAAA;IAAaL,MAAM,EAAEA;EAAM,GAAMF,IAAI,EAAI,GAE9DR,KAAA,CAAAc,aAAA,CAACV,uBAAuB,EAAAW,QAAA;IACpB;IACAR,YAAY,EAAEM,iBAAiB;IAC/BH,MAAM,EAAEA;EAAM,GACVF,IAAI,EAEf;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}