{"ast":null,"code":"import * as React from 'react';\nimport { useMemo } from 'react';\nimport { Typography, Stack } from '@mui/material';\nimport clsx from 'clsx';\nimport { RecordContextProvider, SourceContextProvider, useResourceContext, useSourceContext } from 'ra-core';\nimport { SimpleFormIteratorClasses } from './useSimpleFormIteratorStyles';\nimport { useSimpleFormIterator } from './useSimpleFormIterator';\nimport { SimpleFormIteratorItemContext } from './SimpleFormIteratorItemContext';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\nexport var SimpleFormIteratorItem = React.forwardRef(function (props, ref) {\n  var children = props.children,\n    disabled = props.disabled,\n    disableReordering = props.disableReordering,\n    disableRemove = props.disableRemove,\n    getItemLabel = props.getItemLabel,\n    index = props.index,\n    inline = props.inline,\n    record = props.record,\n    _a = props.removeButton,\n    removeButton = _a === void 0 ? React.createElement(DefaultRemoveItemButton, null) : _a,\n    _b = props.reOrderButtons,\n    reOrderButtons = _b === void 0 ? React.createElement(DefaultReOrderButtons, null) : _b;\n  var resource = useResourceContext(props);\n  if (!resource) {\n    throw new Error('SimpleFormIteratorItem must be used in a ResourceContextProvider or be passed a resource prop.');\n  }\n  var _c = useSimpleFormIterator(),\n    total = _c.total,\n    reOrder = _c.reOrder,\n    remove = _c.remove;\n  // Returns a boolean to indicate whether to disable the remove button for certain fields.\n  // If disableRemove is a function, then call the function with the current record to\n  // determining if the button should be disabled. Otherwise, use a boolean property that\n  // enables or disables the button for all of the fields.\n  var disableRemoveField = function (record) {\n    if (typeof disableRemove === 'boolean') {\n      return disableRemove;\n    }\n    return disableRemove && disableRemove(record);\n  };\n  var context = useMemo(function () {\n    return {\n      index: index,\n      total: total,\n      reOrder: function (newIndex) {\n        return reOrder(index, newIndex);\n      },\n      remove: function () {\n        return remove(index);\n      }\n    };\n  }, [index, total, reOrder, remove]);\n  var label = typeof getItemLabel === 'function' ? getItemLabel(index) : getItemLabel;\n  var parentSourceContext = useSourceContext();\n  var sourceContext = useMemo(function () {\n    return {\n      getSource: function (source) {\n        if (!source) {\n          // source can be empty for scalar values, e.g.\n          // <ArrayInput source=\"tags\" /> => SourceContext is \"tags\"\n          //   <SimpleFormIterator> => SourceContext is \"tags.0\"\n          //      <TextInput /> => use its parent's getSource so finalSource = \"tags.0\"\n          //   </SimpleFormIterator>\n          // </ArrayInput>\n          return parentSourceContext.getSource(\"\".concat(index));\n        } else {\n          // Normal input with source, e.g.\n          // <ArrayInput source=\"orders\" /> => SourceContext is \"orders\"\n          //   <SimpleFormIterator> => SourceContext is \"orders.0\"\n          //      <DateInput source=\"date\" /> => use its parent's getSource so finalSource = \"orders.0.date\"\n          //   </SimpleFormIterator>\n          // </ArrayInput>\n          return parentSourceContext.getSource(\"\".concat(index, \".\").concat(source));\n        }\n      },\n      getLabel: function (source) {\n        // <ArrayInput source=\"orders\" /> => LabelContext is \"orders\"\n        //   <SimpleFormIterator> => LabelContext is ALSO \"orders\"\n        //      <DateInput source=\"date\" /> => use its parent's getLabel so finalLabel = \"orders.date\"\n        //   </SimpleFormIterator>\n        // </ArrayInput>\n        //\n        // we don't prefix with the index to avoid that translation keys contain it\n        return parentSourceContext.getLabel(source);\n      }\n    };\n  }, [index, parentSourceContext]);\n  return React.createElement(SimpleFormIteratorItemContext.Provider, {\n    value: context\n  }, React.createElement(\"li\", {\n    className: SimpleFormIteratorClasses.line,\n    ref: ref\n  }, label != null && React.createElement(Typography, {\n    variant: \"body2\",\n    className: SimpleFormIteratorClasses.index\n  }, label), React.createElement(SourceContextProvider, {\n    value: sourceContext\n  }, React.createElement(RecordContextProvider, {\n    value: record\n  }, React.createElement(Stack, {\n    className: clsx(SimpleFormIteratorClasses.form),\n    direction: inline ? {\n      xs: 'column',\n      sm: 'row'\n    } : 'column',\n    gap: inline ? 2 : 0\n  }, children))), !disabled && React.createElement(\"span\", {\n    className: SimpleFormIteratorClasses.action\n  }, !disableReordering && reOrderButtons, !disableRemoveField(record) && removeButton)));\n});","map":{"version":3,"names":["React","useMemo","Typography","Stack","clsx","RecordContextProvider","SourceContextProvider","useResourceContext","useSourceContext","SimpleFormIteratorClasses","useSimpleFormIterator","SimpleFormIteratorItemContext","RemoveItemButton","DefaultRemoveItemButton","ReOrderButtons","DefaultReOrderButtons","SimpleFormIteratorItem","forwardRef","props","ref","children","disabled","disableReordering","disableRemove","getItemLabel","index","inline","record","_a","removeButton","createElement","_b","reOrderButtons","resource","Error","_c","total","reOrder","remove","disableRemoveField","context","newIndex","label","parentSourceContext","sourceContext","getSource","source","concat","getLabel","Provider","value","className","line","variant","form","direction","xs","sm","gap","action"],"sources":["/Users/robertbinning/Documents/GitHub/robertbinning/passkey/node_modules/react-admin/node_modules/ra-ui-materialui/src/input/ArrayInput/SimpleFormIteratorItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, ReactNode, useMemo } from 'react';\nimport { Typography, Stack } from '@mui/material';\nimport clsx from 'clsx';\nimport {\n    RaRecord,\n    RecordContextProvider,\n    SourceContextProvider,\n    useResourceContext,\n    useSourceContext,\n} from 'ra-core';\n\nimport { SimpleFormIteratorClasses } from './useSimpleFormIteratorStyles';\nimport { useSimpleFormIterator } from './useSimpleFormIterator';\nimport { ArrayInputContextValue } from './ArrayInputContext';\nimport {\n    SimpleFormIteratorItemContext,\n    SimpleFormIteratorItemContextValue,\n} from './SimpleFormIteratorItemContext';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\n\nexport const SimpleFormIteratorItem = React.forwardRef(\n    (props: SimpleFormIteratorItemProps, ref: any) => {\n        const {\n            children,\n            disabled,\n            disableReordering,\n            disableRemove,\n            getItemLabel,\n            index,\n            inline,\n            record,\n            removeButton = <DefaultRemoveItemButton />,\n            reOrderButtons = <DefaultReOrderButtons />,\n        } = props;\n        const resource = useResourceContext(props);\n        if (!resource) {\n            throw new Error(\n                'SimpleFormIteratorItem must be used in a ResourceContextProvider or be passed a resource prop.'\n            );\n        }\n        const { total, reOrder, remove } = useSimpleFormIterator();\n        // Returns a boolean to indicate whether to disable the remove button for certain fields.\n        // If disableRemove is a function, then call the function with the current record to\n        // determining if the button should be disabled. Otherwise, use a boolean property that\n        // enables or disables the button for all of the fields.\n        const disableRemoveField = (record: RaRecord) => {\n            if (typeof disableRemove === 'boolean') {\n                return disableRemove;\n            }\n            return disableRemove && disableRemove(record);\n        };\n\n        const context = useMemo<SimpleFormIteratorItemContextValue>(\n            () => ({\n                index,\n                total,\n                reOrder: newIndex => reOrder(index, newIndex),\n                remove: () => remove(index),\n            }),\n            [index, total, reOrder, remove]\n        );\n\n        const label =\n            typeof getItemLabel === 'function'\n                ? getItemLabel(index)\n                : getItemLabel;\n\n        const parentSourceContext = useSourceContext();\n        const sourceContext = useMemo(\n            () => ({\n                getSource: (source: string) => {\n                    if (!source) {\n                        // source can be empty for scalar values, e.g.\n                        // <ArrayInput source=\"tags\" /> => SourceContext is \"tags\"\n                        //   <SimpleFormIterator> => SourceContext is \"tags.0\"\n                        //      <TextInput /> => use its parent's getSource so finalSource = \"tags.0\"\n                        //   </SimpleFormIterator>\n                        // </ArrayInput>\n                        return parentSourceContext.getSource(`${index}`);\n                    } else {\n                        // Normal input with source, e.g.\n                        // <ArrayInput source=\"orders\" /> => SourceContext is \"orders\"\n                        //   <SimpleFormIterator> => SourceContext is \"orders.0\"\n                        //      <DateInput source=\"date\" /> => use its parent's getSource so finalSource = \"orders.0.date\"\n                        //   </SimpleFormIterator>\n                        // </ArrayInput>\n                        return parentSourceContext.getSource(\n                            `${index}.${source}`\n                        );\n                    }\n                },\n                getLabel: (source: string) => {\n                    // <ArrayInput source=\"orders\" /> => LabelContext is \"orders\"\n                    //   <SimpleFormIterator> => LabelContext is ALSO \"orders\"\n                    //      <DateInput source=\"date\" /> => use its parent's getLabel so finalLabel = \"orders.date\"\n                    //   </SimpleFormIterator>\n                    // </ArrayInput>\n                    //\n                    // we don't prefix with the index to avoid that translation keys contain it\n                    return parentSourceContext.getLabel(source);\n                },\n            }),\n            [index, parentSourceContext]\n        );\n\n        return (\n            <SimpleFormIteratorItemContext.Provider value={context}>\n                <li className={SimpleFormIteratorClasses.line} ref={ref}>\n                    {label != null && (\n                        <Typography\n                            variant=\"body2\"\n                            className={SimpleFormIteratorClasses.index}\n                        >\n                            {label}\n                        </Typography>\n                    )}\n                    <SourceContextProvider value={sourceContext}>\n                        <RecordContextProvider value={record}>\n                            <Stack\n                                className={clsx(SimpleFormIteratorClasses.form)}\n                                direction={\n                                    inline\n                                        ? { xs: 'column', sm: 'row' }\n                                        : 'column'\n                                }\n                                gap={inline ? 2 : 0}\n                            >\n                                {children}\n                            </Stack>\n                        </RecordContextProvider>\n                    </SourceContextProvider>\n                    {!disabled && (\n                        <span className={SimpleFormIteratorClasses.action}>\n                            {!disableReordering && reOrderButtons}\n\n                            {!disableRemoveField(record) && removeButton}\n                        </span>\n                    )}\n                </li>\n            </SimpleFormIteratorItemContext.Provider>\n        );\n    }\n);\n\nexport type DisableRemoveFunction = (record: RaRecord) => boolean;\n\ntype GetItemLabelFunc = (index: number) => string | ReactElement;\n\nexport type SimpleFormIteratorItemProps = Partial<ArrayInputContextValue> & {\n    children?: ReactNode;\n    disabled?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    getItemLabel?: boolean | GetItemLabelFunc;\n    index: number;\n    inline?: boolean;\n    onRemoveField: (index: number) => void;\n    onReorder: (origin: number, destination: number) => void;\n    record: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource?: string;\n    source?: string;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}